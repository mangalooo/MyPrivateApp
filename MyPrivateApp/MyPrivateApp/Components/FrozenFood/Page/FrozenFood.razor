@page "/FrozenFood"

@using MyPrivateApp.Client.ViewModels
@using MyPrivateApp.Components.Enum
@using MyPrivateApp.Components.FrozenFood.Classes
@using MyPrivateApp.Data
@using MyPrivateApp.Data.Models
@using Microsoft.AspNetCore.Components.QuickGrid
@using static Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions;
@using AutoMapper;

@rendermode InteractiveServer

@inject ApplicationDbContext db;
@inject NavigationManager Navigation
@inject IFrozenFoodClass BackEndClass

<PageTitle> Frysvaror </PageTitle>

@* Header *@
<div>

    <br />

    <h1 style="text-align:center"> Frysvaror </h1>

    <br />

    <h3 style="text-align:center">Total vikt: @totalWeight kg</h3>

    <div style="text-align:center" hidden="@ShowOrHideCreateButton">

        <br />
        <br />

        <button class="btn btn-outline-success btn-sm" @onclick="@HideNewOrChangesForm"> Ny frysvara </button>
    </div>

    <div style="text-align:center" hidden="@ShowOrHideErrorMessage">
        <br />
        <br />
        <Alert Color="AlertColor.Danger"> <Icon Name="IconName.ExclamationTriangleFill" class="me-2"></Icon> <b>@ErrorMessage</b> </Alert>
    </div>

    <br />
    <br />

</div>

@* Form and views *@
<div class="container">
    <div class="col-md-12">
        <div class="card">

            @* Form *@
            <div class="card-header">
                <EditForm Model="pageModel" OnSubmit="AddOrEdit" FormName="AddOrUpdateFrozenFood" Enhance hidden="@(!HideNewOrChangesFields)">

                    <DataAnnotationsValidator />

                    <ValidationSummary class="text-danger" role="alert" />

                    <br />

                    <div class="row">

                        <div id="mobile" class="col-6" />

                        <div class="col-6">
                            <div class="form-floating">
                                <InputDate @bind-Value="pageModel.Date" class="form-control" disabled="@DisabledForm" />
                                <label for="Date"> Datum </label>
                                <ValidationMessage For="() => pageModel.Date" class="text-danger" />
                            </div>
                        </div>

                        <div class="col-6">
                            <div class="form-floating">
                                <InputText @bind-Value="pageModel.Type" class="form-control" disabled="@DisabledForm" />
                                <label for="Type"> Typ </label>
                                <ValidationMessage For="() => pageModel.Type" class="text-danger" />
                            </div>
                        </div>
                    </div>

                    <br />

                    <div class="row">

                        <div id="mobile" class="col-6" />

                        <div class="col-6">
                            <div class="form-floating">
                                <InputText @bind-Value="pageModel.Name" class="form-control" placeholder="" disabled="@DisabledForm" />
                                <label for="Name"> Namn </label>
                                <ValidationMessage For="() => pageModel.Name" class="text-danger" />
                            </div>
                        </div>
                        <div class="col-6">
                            <div class="form-floating">
                                <InputSelect @bind-Value="pageModel.FrozenGoods" class="form-control" placeholder="" disabled="@DisabledForm">
                                    @foreach (object frozenGoods in Enum.GetValues(typeof(FreezerFrozenGoods)))
                                    {
                                        <option value="@frozenGoods">@frozenGoods</option>
                                    }
                                </InputSelect>
                                <label for="frozenGoods"> Vilt </label>
                                <ValidationMessage For="() => pageModel.FrozenGoods" class="text-danger" />
                            </div>
                        </div>
                    </div>

                    <br />

                    <div class="row">

                        <div id="mobile" class="col-6" />

                        <div class="col-6">
                            <div class="form-floating">
                                <InputSelect @bind-Value="pageModel.Place" class="form-control" placeholder="" disabled="@DisabledForm">
                                    @foreach (object freezerPlaces in Enum.GetValues(typeof(FreezerPlaces)))
                                    {
                                        <option value="@freezerPlaces">@freezerPlaces</option>
                                    }
                                </InputSelect>
                                <label for="FreezerPlaces"> Frys plats </label>
                                <ValidationMessage For="() => pageModel.Place" class="text-danger" />
                            </div>
                        </div>
                        <div class="col-6">
                            <div class="form-floating">
                                <InputSelect @bind-Value="pageModel.FreezerCompartment" class="form-control" placeholder="" disabled="@DisabledForm">
                                    @foreach (object freezerCompartment in Enum.GetValues(typeof(FreezerCompartment)))
                                    {
                                        <option value="@freezerCompartment">@freezerCompartment</option>
                                    }
                                </InputSelect>
                                <label for="FreezerCompartment"> Frysfack </label>
                                <ValidationMessage For="() => pageModel.FreezerCompartment" class="text-danger" />
                            </div>
                        </div>
                    </div>

                    <br />

                    <div class="row">

                        <div id="mobile" class="col-6" />

                        <div class="col-6">
                            <div class="form-floating">
                                <InputNumber @bind-Value="pageModel.Weight" class="form-control" disabled="@DisabledForm" />
                                <label for="Weight"> Vikt (gram) </label>
                                <ValidationMessage For="() => pageModel.Weight" class="text-danger" />
                            </div>
                        </div>
                        <div class="col-6">
                            <div class="form-floating">
                                <InputNumber @bind-Value="pageModel.Number" class="form-control" disabled="@DisabledForm" />
                                <label for="Number"> Antal </label>
                                <ValidationMessage For="() => pageModel.Number" class="text-danger" />
                            </div>
                        </div>
                    </div>

                    <br />

                    <div class="row">
                        <div class="col-12">
                            <div class="form-floating">
                                <InputTextArea @bind-Value="pageModel.Notes" class="form-control" disabled="@DisabledForm" />
                                <label for="Notes"> Anteckningar </label>
                                <ValidationMessage For="() => pageModel.Notes" class="text-danger" />
                            </div>
                        </div>
                    </div>


                    <br />

                    <div style="text-align:center">
                        <button hidden="@ShowOrHideAddNewButton" @onclick="HideNewOrChangesForm" type="submit" style="text-align:center" class="btn btn-outline-success btn-sm"> Lägg till ny frysvara </button>
                    </div>

                    <div style="text-align:center">
                        <button @onclick="HideNewOrChangesForm" hidden="@ShowOrHideEditButton" type="submit" style="text-align:center" class="btn btn-outline-warning btn-sm"> Ändra </button>
                    </div>

                    <br />

                    <div style="text-align:center">
                        <button @onclick="RefreshPage" type="button" style="text-align:center" class="btn btn-outline-secondary btn-sm"> Tillbaka </button>
                    </div>

                    <br />
                    <br />
                </EditForm>
            </div>

            @* View - Desktop *@
            <div id="desktop">

                <br />

                <div align="center">
                    <div class="form-check-inline">
                        <label class="form-check-label">
                            Rådjur <input type="checkbox" class="form-check-input" value="" id="1" bind="" @onchange="SearchDeer">
                        </label>
                    </div>
                    <div class="form-check-inline">
                        <label class="form-check-label">
                            Vildsvin <input type="checkbox" class="form-check-input" value="" id="2" @onchange="SearchWildboar">
                        </label>
                    </div>
                    <div class="form-check-inline">
                        <label class="form-check-label">
                            Älg <input type="checkbox" class="form-check-input" value="" id="3" @onchange="SearchMoose">
                        </label>
                    </div>
                    <div class="form-check-inline">
                        <label class="form-check-label">
                            Övrigt <input type="checkbox" class="form-check-input" value="" id="4" @onchange="SearchOther">
                        </label>
                    </div>
                </div>

                <br />

                <div class="card-body">
                    <QuickGrid Items="@queryable" Pagination="pagination">

                        <PropertyColumn Title="Datum" Property="@(c => c.Date)" Format="yyyy-MM-dd" Sortable="true" />

                        <PropertyColumn Title="Name" Property="@(c => c.Name)" Sortable="true">
                            <ColumnOptions>
                                <div class="search-box">
                                    <input type="search" autofocus @onchange="SearchName" />
                                </div>
                            </ColumnOptions>
                        </PropertyColumn>

                        <PropertyColumn Title="Varor" Property="@(c => c.FrozenGoods)" Sortable="true">
                            <ColumnOptions>
                                <div class="search-box">
                                    <input type="search" autofocus @onchange="SearchWildMeat" />
                                </div>
                            </ColumnOptions>
                        </PropertyColumn>

                        <PropertyColumn Title="Typ" Property="@(c => c.Type)" Sortable="true" />

                        <PropertyColumn Title="År" Property="@(c => BackEndClass.HowLongTimeInFreezer(c.Date))" Sortable="true" />

                        <PropertyColumn Title="Frys plats" Property="@(c => c.Place)" Sortable="true" />

                        <PropertyColumn Title="Frysfack" Property="@(c => c.FreezerCompartment)" Sortable="true" />

                        <PropertyColumn Title="Vikt (gram)" Property="@(c => c.Weight)" Sortable="true" />

                        <PropertyColumn Title="Antal" Property="@(c => c.Number)" Sortable="true" />

                        <TemplateColumn Title="Ändra">

                            <div class="btn-group" role="group">
                                <button title="Info" id="btnGroupDrop1" type="button" class="btn btn-outline-secondary btn-sm dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">
                                    Info
                                </button>
                                <ul class="dropdown-menu" aria-labelledby="btnGroupDrop1">
                                    <li class="dropdown-item"><button class="btn btn-outline-info btn-sm" @onclick="@(() => Info(context))"> All info </button></li>
                                    <li class="dropdown-item"><button class="btn btn-outline-warning btn-sm" @onclick="@(() => Edit(context))"> Ändra </button></li>
                                    <li class="dropdown-item"><button class="btn btn-outline-danger btn-sm" @onclick="@(() => OpenDeleteWindow(context))"> Ta bort </button></li>
                                </ul>
                            </div>

                            <div class="modal @ModalClass" tabindex="-1" role="dialog" style="display:@ModalDisplay">
                                <div class="modal-dialog" role="document">
                                    <div class="modal-content">
                                        <div class="modal-header">
                                            <h5 class="modal-title"> Vill du ta bort frysvaran? </h5>
                                        </div>
                                        <div class="modal-footer">
                                            <button type="button" class="btn btn-outline-danger" @onclick="@(() => Delete())"> Ta bort frysvaran </button>
                                            <button type="button" class="btn btn-outline-secondary" data-dismiss="modal" @onclick="() => CloseDeleteWindow()"> Ångra </button>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            @if (ShowBackdrop)
                            {
                                <div class="modal-backdrop fade show"></div>
                            }

                        </TemplateColumn>
                    </QuickGrid>

                    <div class="card-footer"><Paginator State="@pagination" /></div>

                    <br />
                    <br />

                </div>
            </div>

            @* View - Mobile *@
            <div id="mobile">
                <div class="card-body">

                    <br />

                    <div class="row" align="center">
                        <div class="form-check-inline">

                            <label class="form-check-label">
                                Rådjur <input type="checkbox" class="form-check-input" value="" id="1" bind="" @onchange="SearchDeer">
                            </label>

                            &nbsp;&nbsp;

                            <label class="form-check-label">
                                Vildsvin <input type="checkbox" class="form-check-input" value="" id="2" @onchange="SearchWildboar">
                            </label>

                        </div>
                    </div>

                    <br />

                    <div class="row" align="center">
                        <div class="form-check-inline">

                            <label class="form-check-label">
                                Älg <input type="checkbox" class="form-check-input" value="" id="3" @onchange="SearchMoose">
                            </label>

                            &nbsp;&nbsp;

                            <label class="form-check-label">
                                Övrigt <input type="checkbox" class="form-check-input" value="" id="4" @onchange="SearchOther">
                            </label>

                        </div>
                    </div>

                    <br />

                    <QuickGrid Items="@queryable">

                        <PropertyColumn Title="Varor" Property="@(c => c.FrozenGoods)" Sortable="true">
                            <ColumnOptions>
                                <div class="search-box">
                                    <input type="search" autofocus @onchange="SearchWildMeat" />
                                </div>
                            </ColumnOptions>
                        </PropertyColumn>

                        <PropertyColumn Title="År" Property="@(c => BackEndClass.HowLongTimeInFreezer(c.Date))" Sortable="true" />

                        <TemplateColumn Title="Info">

                            <div class="btn-group" role="group">
                                <button title="Info" id="btnGroupDrop1" type="button" class="btn btn-outline-secondary btn-sm dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">
                                    Info
                                </button>
                                <ul class="dropdown-menu" aria-labelledby="btnGroupDrop1">
                                    <li class="dropdown-item"><button class="btn btn-outline-info btn-sm" @onclick="@(() => Info(context))"> All info </button></li>
                                    <li class="dropdown-item"><button class="btn btn-outline-warning btn-sm" @onclick="@(() => Edit(context))"> Ändra </button></li>
                                    <li class="dropdown-item"><button class="btn btn-outline-danger btn-sm" @onclick="@(() => OpenDeleteWindow(context))"> Ta bort </button></li>
                                </ul>
                            </div>

                            <div class="modal @ModalClass" tabindex="-1" role="dialog" style="display:@ModalDisplay">
                                <div class="modal-dialog" role="document">
                                    <div class="modal-content">
                                        <div class="modal-header">
                                            <h5 class="modal-title"> Vill du ta bort frysvaran? </h5>
                                        </div>
                                        <div class="modal-footer">
                                            <button type="button" class="btn btn-outline-danger" @onclick="@(() => Delete())"> Ta bort frysvaran </button>
                                            <button type="button" class="btn btn-outline-secondary" data-dismiss="modal" @onclick="() => CloseDeleteWindow()"> Ångra </button>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            @if (ShowBackdrop)
                            {
                                <div class="modal-backdrop fade show"></div>
                            }

                        </TemplateColumn>
                    </QuickGrid>

                    <br />
                    <br />

                </div>
            </div>

        </div>
    </div>
</div>

@* Footer *@
<div>

    <br />
    <br />

    <div class="footer" align="center">
        <p> Copyright 2023 - @DateTime.Now.Year</p>
    </div>

    <br />
    <br />

</div>

@* Back-End *@
@code
{
    [SupplyParameterFromForm]
    private FrozenFoodViewModel pageModel { get; set; } = new();

    PaginationState pagination = new PaginationState { ItemsPerPage = 10 };
    private IQueryable<FrozenFoodViewModel> queryable = Enumerable.Empty<FrozenFoodViewModel>().AsQueryable();

    // Holds temporary id to delete items
    private int TemporaryId { get; set; } = 0;

    // Modol window settings
    public Guid Guid = Guid.NewGuid();
    public string ModalDisplay = "none;";
    public string ModalClass = "";
    public bool ShowBackdrop = false;

    // Hide button and fields
    private bool HideNewOrChangesFields { get; set; } = false;
    private bool ShowOrHideCreateButton { get; set; } = false;
    private bool ShowOrHideEditButton { get; set; } = false;
    private bool ShowOrHideAddNewButton { get; set; } = false;
    private bool DisabledForm { get; set; } = false;
    private bool ShowOrHideErrorMessage { get; set; } = true;
    private string totalWeight = string.Empty;

    // Text messeges
    private string ErrorMessage { get; set; } = string.Empty;

    // Load data from database to the Queryable container
    private async Task ConvertListToQueryable()
    {
        List<FrozenFoods> farmWorks = await db.FrozenFoods.OrderByDescending(c => c.Date).ToListAsync();

        if (!farmWorks.Any()) return;

        queryable = farmWorks
            .Select(model => BackEndClass.ChangeFromModelToViewModel(model))
            .AsQueryable();

        pagination.TotalItemCountChanged += (sender, EventArgs) => StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        totalWeight = await GetTotalWeight();
        await ConvertListToQueryable();
    }
    
    private async Task RefreshPage() => await Task.Run(() => Navigation.Refresh(true));

    private void HideNewOrChangesForm()
    {
        HideNewOrChangesFields = !HideNewOrChangesFields;
        ShowOrHideCreateButton = true;
        ShowOrHideEditButton = true;
    }

    private async Task AddOrEdit()
    {
        DisabledForm = false;

        try
        {
            if (pageModel.FrozenFoodId > 0)
                ErrorMessage = await BackEndClass.Edit(pageModel);
            else
                ErrorMessage = await BackEndClass.Add(pageModel);

            if (!string.IsNullOrEmpty(ErrorMessage))
            {
                HideNewOrChangesForm();
                ShowOrHideErrorMessage = false;
                ShowOrHideEditButton = true;
                ShowOrHideAddNewButton = false;
                return;
            }
            else
            {
                pageModel = new();
                await RefreshPage();
            }
        }
        catch (Exception ex)
        {
            ErrorMessage += $"\r\n\r\nEtt fel uppstod: {ex.Message}";
            ShowOrHideErrorMessage = true;
        }
    }

    private void Info(FrozenFoodViewModel vm)
    {
        HideNewOrChangesForm();
        ShowOrHideAddNewButton = true;
        DisabledForm = true;
        pageModel = vm;
    }

    private void Edit(FrozenFoodViewModel vm)
    {
        DisabledForm = false;
        ShowOrHideEditButton = false;
        ShowOrHideAddNewButton = true;
        ShowOrHideCreateButton = true;
        HideNewOrChangesFields = true;
        pageModel = vm;
    }

    private async Task Delete()
    {
        if (!db.FrozenFoods.Any()) return;

        FrozenFoods? model = await db.FrozenFoods.FirstOrDefaultAsync(a => a.FrozenFoodsId == TemporaryId);
        if (model == null) return;

        FrozenFoodViewModel vm = BackEndClass.ChangeFromModelToViewModel(model);
        ErrorMessage = await BackEndClass.Delete(vm);

        if (!string.IsNullOrEmpty(ErrorMessage))
            ShowOrHideErrorMessage = false;
        else
        {
            pageModel = new();
            await RefreshPage();
        }
    }

    private void ToggleModal(ref string modalDisplay, ref string modalClass, ref bool showBackdrop, bool isOpen)
    {
        modalDisplay = isOpen ? "block;" : "none";
        modalClass = isOpen ? "Show" : "";
        showBackdrop = isOpen;
        StateHasChanged();
    }

    private void OpenDeleteWindow(FrozenFoodViewModel vm)
    {
        TemporaryId = vm.FrozenFoodId;
        ToggleModal(ref ModalDisplay, ref ModalClass, ref ShowBackdrop, true);
    }

    private void CloseDeleteWindow() => ToggleModal(ref ModalDisplay, ref ModalClass, ref ShowBackdrop, false);

    private async Task SearchName(ChangeEventArgs e)
    {
        string? searchValue = e.Value?.ToString();

        if (!string.IsNullOrEmpty(searchValue))
        {
            var result = await db.FrozenFoods
                .AsNoTracking()
                .Where(c => c.Name != null && c.Name.Contains(searchValue, StringComparison.OrdinalIgnoreCase))
                .OrderBy(c => c.FrozenFoodsId)
                .ToListAsync();

            queryable = result
                .Select(model => BackEndClass.ChangeFromModelToViewModel(model))
                .AsQueryable();

            if (!queryable.Any())
                queryable = Enumerable.Empty<FrozenFoodViewModel>().AsQueryable();
        }
        else
            await RefreshPage();
    }

    private async Task SearchWildMeat(ChangeEventArgs e)
    {
        queryable = Enumerable.Empty<FrozenFoodViewModel>().AsQueryable();

        if (string.IsNullOrEmpty(e.Value?.ToString()))
        {
            await RefreshPage();
            return;
        }

        string? searchValue = e.Value?.ToString()?.ToLower() ?? string.Empty;
        var frozenGoodsMapping = new Dictionary<string, FreezerFrozenGoods>
        {
            { "hare", FreezerFrozenGoods.Hare },
            { "ko", FreezerFrozenGoods.Ko },
            { "rådjur", FreezerFrozenGoods.Rådjur },
            { "vildsvin", FreezerFrozenGoods.Vildsvin },
            { "älg", FreezerFrozenGoods.Älg },
            { "övrigt", FreezerFrozenGoods.Övrigt }
        };

        if (frozenGoodsMapping.TryGetValue(searchValue, out var frozenGoods))
        {
            var result = db.FrozenFoods
                .AsNoTracking()
                .Where(c => c.FrozenGoods == frozenGoods)
                .OrderBy(c => c.FrozenFoodsId)
                .Select(model => BackEndClass.ChangeFromModelToViewModel(model))
                .AsQueryable();

            queryable = result.Any() ? result : Enumerable.Empty<FrozenFoodViewModel>().AsQueryable();
        }
    }

    private async Task<string> GetTotalWeight()
    {
        if (await db.FrozenFoods.AnyAsync())
        {
            double totalWeight = await db.FrozenFoods
                .SumAsync(item => item.Number > 0 ? item.Weight * item.Number : item.Weight);

            return Math.Round(totalWeight / 1000, 1, MidpointRounding.AwayFromZero).ToString("#,##0.00");
        }

        return string.Empty;
    }

    private void SetQuery(IEnumerable<FrozenFoods> result)
    {
        if (!result.Any())
        {
            queryable = Enumerable.Empty<FrozenFoodViewModel>().AsQueryable();
            return;
        }

        queryable = result
            .OrderBy(c => c.FrozenFoodsId)
            .Select(model => BackEndClass.ChangeFromModelToViewModel(model))
            .AsQueryable();
    }

    private async Task SearchDeer(ChangeEventArgs e)
    {
        if (bool.TryParse(e.Value?.ToString(), out bool isChecked) && isChecked)
        {
            var result = await db.FrozenFoods
                .Where(c => c.FrozenGoods == FreezerFrozenGoods.Rådjur)
                .ToListAsync();

            queryable = result
                .Select(model => BackEndClass.ChangeFromModelToViewModel(model))
                .AsQueryable();
        }
        else
            await RefreshPage();
    }

    private async Task SearchWildboar(ChangeEventArgs e)
    {
        if (bool.TryParse(e.Value?.ToString(), out bool isChecked) && isChecked)
        {
            var result = await db.FrozenFoods
                .Where(c => c.FrozenGoods == FreezerFrozenGoods.Vildsvin)
                .ToListAsync();

            queryable = result
                .Select(model => BackEndClass.ChangeFromModelToViewModel(model))
                .AsQueryable();
        }
        else
            await RefreshPage();
    }

    private async Task SearchMoose(ChangeEventArgs e)
    {
        if (bool.TryParse(e.Value?.ToString(), out bool isChecked) && isChecked)
        {
            var result = await db.FrozenFoods
                .Where(c => c.FrozenGoods == FreezerFrozenGoods.Älg)
                .ToListAsync();

            queryable = result
                .Select(model => BackEndClass.ChangeFromModelToViewModel(model))
                .AsQueryable();
        }
        else
            await RefreshPage();
    }

    private async Task SearchOther(ChangeEventArgs e)
    {
        if (bool.TryParse(e.Value?.ToString(), out bool isChecked) && isChecked)
        {
            var result = await db.FrozenFoods
                .Where(c => c.FrozenGoods == FreezerFrozenGoods.Övrigt)
                .ToListAsync();

            queryable = result
                .Select(model => BackEndClass.ChangeFromModelToViewModel(model))
                .AsQueryable();
        }
        else
            await RefreshPage();
    }    
}