@page "/FrozenFood"

@using MyPrivateApp.Client.ViewModels
@using MyPrivateApp.Components.Enum
@using MyPrivateApp.Data
@using MyPrivateApp.Data.Models
@using Microsoft.AspNetCore.Components.QuickGrid

@rendermode InteractiveServer

@inject ApplicationDbContext db;
@inject NavigationManager Navigation

<PageTitle> Frysta varor </PageTitle>

<h1 style="text-align:center"> Frysta varor </h1>

<br />

<div style="text-align:center">
    <button class="btn btn-outline-success btn-sm" @onclick="@HideNewOrChangesFrozenFoodForm" hidden="@ShowOrHideCreateButton">Skapa ny resa</button>
</div>

<br />
<br />

<div class="container">

    <div class="col-md-12">
        <div class="card">
            <div class="card-header">
                <EditForm Model="frozenFood" OnSubmit="CreateOrUpdateFrozenFood" FormName="CreateOrUpdateFrozenFood" Enhance hidden="@(!HideNewOrChangesFrozenFoodFields)">

                     <DataAnnotationsValidator />

                     <ValidationSummary class="text-danger" role="alert" />

                     <div class="row">
                         <div class="col">
                             <div class="form-floating">
                                 <InputText @bind-Value="frozenFood.Name" class="form-control" placeholder="" disabled="@DisabledForm" />
                                 <label for="Name"> Namn </label>
                                 <ValidationMessage For="() => frozenFood.Name" class="text-danger" />
                             </div>
                         </div>
                         <div class="col">
                             <div class="form-floating">
                                 <InputDate @bind-Value="frozenFood.Date" class="form-control" disabled="@DisabledForm" />
                                 <label for="Date"> Datum </label>
                                 <ValidationMessage For="() => frozenFood.Date" class="text-danger" />
                             </div>
                         </div>
                     </div>

                     <div class="row">
                         <div class="col">
                             <div class="form-floating">
                                 <InputText @bind-Value="frozenFood.FreezerCompartment" class="form-control" placeholder="" disabled="@DisabledForm" />
                                 <label for="FreezerCompartment"> Frysfack </label>
                                 <ValidationMessage For="() => frozenFood.FreezerCompartment" class="text-danger" />
                             </div>
                         </div>
                         <div class="col">
                             <div class="form-floating">
                                 <InputSelect @bind-Value="frozenFood.WildMeat" class="form-control" placeholder="" disabled="@DisabledForm" >
                                    @foreach (object wildMeat in Enum.GetValues(typeof(WildMeat)))
                                    {
                                        <option value="@wildMeat">@wildMeat</option>
                                    }
                                  </InputSelect>
                                 <label for="WildMeat"> Vilket vilt? </label>
                                 <ValidationMessage For="() => frozenFood.WildMeat" class="text-danger" />
                             </div>
                         </div>
                     </div>

                     <div class="row">
                         <div class="col">
                             <div class="form-floating">
                                 <InputNumber @bind-Value="frozenFood.Weight" class="form-control" disabled="@DisabledForm" />
                                 <label for="Weight"> Vikt (gram) </label>
                                 <ValidationMessage For="() => frozenFood.Weight" class="text-danger" />
                             </div>
                         </div>
                     </div>

                     <br />

                     <div style="text-align:center">
                         <button hidden="@ShowOrHideAddNewFrozenFoodButton" @onclick="HideNewOrChangesFrozenFoodForm" type="submit" style="text-align:center" class="btn btn-outline-success btn-sm"> Lägg till ny frysvara </button>
                     </div>

                     <div style="text-align:center">
                         <button @onclick="HideNewOrChangesFrozenFoodForm" hidden="@ShowOrHideEditButton" type="submit" style="text-align:center" class="btn btn-outline-warning btn-sm"> Ändra </button>
                     </div>

                     <br />

                     <div style="text-align:center">
                         <button @onclick="RefreshPage" type="submit" style="text-align:center" class="btn btn-outline-secondary btn-sm"> Tillbaka </button>
                     </div>

                     <br />
                     <br />
                 </EditForm>
             </div>

             <div class="card-body">
                <QuickGrid Items="@frozenFoodQueryable" Pagination="pagination" align="center">

                     <PropertyColumn Title="Namn " Property="@(c => c.Name)" Sortable="true" >
                         <ColumnOptions>
                             <div class="search-box">
                                 <input type="search" autofocus @onchange="SearchName" />
                             </div>
                         </ColumnOptions>
                     </PropertyColumn>
                     <PropertyColumn Title="År" Property="@(c => HowLongTimeInFreezer(c.Date))" Sortable="true" />
                     <PropertyColumn Title="Vara" Property="@(c => c.WildMeat)" Sortable="true">
                         <ColumnOptions>
                             <div class="search-box">
                                 <input type="search" autofocus @onchange="SearchWildMeat" />
                             </div>
                         </ColumnOptions>
                     </PropertyColumn>
                     <TemplateColumn Title="Ändringar">

                         <button class="btn btn-outline-info btn-sm" @onclick="@(() => InfoFrozenFood(context))"> All info </button>
                         <button class="btn btn-outline-warning btn-sm" @onclick="@(() => EditFrozenFood(context))"> Ändra </button>
                         <button class="btn btn-outline-danger btn-sm" @onclick="@(() => OpenDeleteWindow())"> Ta bort </button>

                         <div class="modal @ModalClass" tabindex="-1" role="dialog" style="display:@ModalDisplay">
                             <div class="modal-dialog" role="document">
                                 <div class="modal-content">
                                     <div class="modal-header">
                                         <h5 class="modal-title"> Vill du ta bort frysvaran? </h5>
                                     </div>
                                     <div class="modal-footer">
                                         <button type="button" class="btn btn-outline-danger" @onclick="@(() => DeleteFrozenFood(context))"> Ta bort kontakt </button>
                                         <button type="button" class="btn btn-outline-secondary" data-dismiss="modal" @onclick="() => CloseWindow()"> Ångra </button>
                                     </div>
                                 </div>
                             </div>
                         </div>

                        @if (ShowBackdrop)
                        {
                            <div class="modal-backdrop fade show"></div>
                        }

                    </TemplateColumn>
                </QuickGrid>

                <div class="card-footer"><Paginator State="@pagination" /></div>

                <br />
                <br />

            </div>
        </div>
    </div>
</div>

<br />
<br />

@code
{
    // Modol window settings
    public Guid Guid = Guid.NewGuid();
    public string ModalDisplay = "none;";
    public string ModalClass = "";
    public bool ShowBackdrop = false;

    // Hide button and fields
    private bool HideNewOrChangesFrozenFoodFields { get; set; } = false;
    private bool ShowOrHideCreateButton { get; set; } = false;
    private bool ShowOrHideEditButton { get; set; } = false;
    private bool ShowOrHideAddNewFrozenFoodButton { get; set; } = false;
    private bool DisabledForm { get; set; } = false;

    PaginationState pagination = new PaginationState { ItemsPerPage = 10 };
    private IQueryable<FrozenFoodViewModel> frozenFoodQueryable = Enumerable.Empty<FrozenFoodViewModel>().AsQueryable();

    [SupplyParameterFromForm]
    private FrozenFoodViewModel frozenFood { get; set; } = new();

    protected override void OnInitialized() => ConvertListToQueryable();

    private FrozenFoods GetFrozenFood(int? id) => db.FrozenFoods.FirstOrDefault(r => r.FrozenFoodsId == frozenFood.FrozenFoodId);

    private void CreateOrUpdateFrozenFood()
    {
        DisabledForm = false;

        FrozenFoods getDbFrozenFoodModel;
        FrozenFoods changesToModel;

        // Update frozen food
        if (frozenFood.FrozenFoodId > 0)
        {
            ShowOrHideCreateButton = true;

            FrozenFoods c = db.FrozenFoods.FirstOrDefault(p => p.FrozenFoodsId == frozenFood.FrozenFoodId);

            if (c is null) return;

            getDbFrozenFoodModel = GetFrozenFood(frozenFood.FrozenFoodId);

            changesToModel = changesFrozenFoodToModel(frozenFood);

            getDbFrozenFoodModel.Date = changesToModel.Date;
            getDbFrozenFoodModel.Name = changesToModel.Name;
            getDbFrozenFoodModel.FreezerCompartment = changesToModel.FreezerCompartment;
            getDbFrozenFoodModel.WildMeat = changesToModel.WildMeat;
            getDbFrozenFoodModel.Weight = changesToModel.Weight;
            getDbFrozenFoodModel.Notes = changesToModel.Notes;

            db.SaveChanges();

            frozenFood = new();
            Navigation.Refresh(true);

            return;
        }

        if (string.IsNullOrEmpty(frozenFood.Name)) return;

        // Add new frozen food
        getDbFrozenFoodModel = GetFrozenFood(frozenFood.FrozenFoodId);
        changesToModel = changesFrozenFoodToModel(frozenFood);
        db.FrozenFoods.Add(changesToModel);
        db.SaveChanges();
        frozenFood = new();
        Navigation.Refresh(true);

        return;
    }

    // Load data from database to the Queryable container
    private void ConvertListToQueryable()
    {
        if (db.FrozenFoods.Count() == 0) return;

        frozenFoodQueryable = Enumerable.Empty<FrozenFoodViewModel>().AsQueryable();

        foreach (FrozenFoods model in db.FrozenFoods.OrderBy(c => c.FrozenFoodsId))
        {
            FrozenFoodViewModel frozenFood = ChangeFromModelToViewModel(model);
            frozenFoodQueryable = frozenFoodQueryable.Concat(new[] { frozenFood }.AsQueryable());
        }

        pagination.TotalItemCountChanged += (sender, EventArgs) => StateHasChanged();
    }

    public FrozenFoodViewModel ChangeFromModelToViewModel(FrozenFoods model)
    {
        DateTime date = DateTime.Parse(model.Date);

        FrozenFoodViewModel vm = new()
            {
                FrozenFoodId = model.FrozenFoodsId,
                Name = model.Name,
                Date = date,
                FreezerCompartment = model.FreezerCompartment,
                WildMeat = model.WildMeat,
                Weight = model.Weight,
                Notes = model.Notes
            };

        return vm;
    }

    private FrozenFoods changesFrozenFoodToModel(FrozenFoodViewModel vm)
    {
        FrozenFoods frozenFood = new()
            {
                FrozenFoodsId = vm.FrozenFoodId,
                Name = vm.Name,
                Date = vm.Date.ToString("yyyy-MM-dd"),
                FreezerCompartment = vm.FreezerCompartment,
                WildMeat = vm.WildMeat,
                Weight = vm.Weight,
                Notes = vm.Notes
            };

        return frozenFood;
    }

    private void InfoFrozenFood(FrozenFoodViewModel incomingModel)
    {
        HideNewOrChangesFrozenFoodForm();
        ShowOrHideAddNewFrozenFoodButton = true;
        DisabledForm = true;
        frozenFood = incomingModel;
    }

    private void EditFrozenFood(FrozenFoodViewModel incomingModel)
    {
        DisabledForm = false;
        ShowOrHideEditButton = false;
        ShowOrHideAddNewFrozenFoodButton = true;
        HideNewOrChangesFrozenFoodFields = true;
        frozenFood = incomingModel;
    }

    private void DeleteFrozenFood(FrozenFoodViewModel incomingModel)
    {
        if (db.FrozenFoods.Count() == 0) return;

        FrozenFoods frozenFood = changesFrozenFoodToModel(incomingModel);

        db.ChangeTracker.Clear();
        db.FrozenFoods.Remove(frozenFood);
        db.SaveChanges();

        Navigation.Refresh(true);
    }

    private void SearchName(ChangeEventArgs e)
    {
        if (!string.IsNullOrEmpty(e.Value!.ToString()))
        {
            IEnumerable<FrozenFoods> result = db.FrozenFoods.Where(c => c.Name == e.Value!.ToString());
            frozenFoodQueryable = Enumerable.Empty<FrozenFoodViewModel>().AsQueryable();

            if (result.Count() == 0) return;

            if (result.Any())
                foreach (FrozenFoods model in result.OrderBy(c => c.FrozenFoodsId))
                {
                    FrozenFoodViewModel frozenFood = ChangeFromModelToViewModel(model);
                    frozenFoodQueryable = frozenFoodQueryable.Concat(new[] { frozenFood }.AsQueryable());
                }

            return;
        }

        Navigation.Refresh(true);
    }

    private void SearchWildMeat(ChangeEventArgs e)
    {
        if (!string.IsNullOrEmpty(e.Value!.ToString()))
        {
            IEnumerable<FrozenFoods> result = db.FrozenFoods.Where(c => c.WildMeat.ToString() == e.Value!.ToString());
            frozenFoodQueryable = Enumerable.Empty<FrozenFoodViewModel>().AsQueryable();

            if (result.Count() == 0) return;

            if (result.Any())
                foreach (FrozenFoods model in result.OrderBy(c => c.FrozenFoodsId))
                {
                    FrozenFoodViewModel frozenFood = ChangeFromModelToViewModel(model);
                    frozenFoodQueryable = frozenFoodQueryable.Concat(new[] { frozenFood }.AsQueryable());
                }

            return;
        }

        Navigation.Refresh(true);
    }

    private int HowLongTimeInFreezer(DateTime date)
    {
        int days = (DateTime.Now - date).Days;
        int result = days / 365;

        return result;
    }

    private void HideNewOrChangesFrozenFoodForm()
    {
        HideNewOrChangesFrozenFoodFields = !HideNewOrChangesFrozenFoodFields;
        ShowOrHideCreateButton = true;
        ShowOrHideEditButton = true;
    }

    private void RefreshPage() => Navigation.Refresh(true);

    private void OpenDeleteWindow()
    {
        ModalDisplay = "block;";
        ModalClass = "Show";
        ShowBackdrop = true;
        StateHasChanged();
    }

    private void CloseWindow()
    {
        ModalDisplay = "none";
        ModalClass = "";
        ShowBackdrop = false;
        StateHasChanged();
    }
}