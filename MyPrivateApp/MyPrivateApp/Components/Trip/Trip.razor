@page "/Trips"

@using MyPrivateApp.Client.ViewModels
@using MyPrivateApp.Data
@using MyPrivateApp.Data.Models
@using Microsoft.AspNetCore.Components.QuickGrid

@rendermode InteractiveServer

@inject ApplicationDbContext db;
@inject NavigationManager Navigation

<PageTitle> Resor </PageTitle>

<h1 style="text-align:center"> Resor </h1>

<br />

<div style="text-align:center">
    <button class="btn btn-outline-success btn-sm" @onclick="@HideNewOrChangesTripForm" hidden="@ShowOrHideCreateButton">Skapa ny resa</button>
</div>

<br />
<br />

<div class="container">

    <div class="col-md-12">
        <div class="card">
            <div class="card-header">
                <EditForm Model="trip" OnSubmit="CreateOrUpdateTrip" FormName="CreateOrUpdateTrip" Enhance hidden="@(!HideNewOrChangesTripFields)">

                     <DataAnnotationsValidator />

                     <ValidationSummary class="text-danger" role="alert" />

                     <div class="row">
                         <div class="col">
                             <div class="form-floating">
                                 <InputDate @bind-Value="trip.Date" class="form-control" placeholder="" disabled="@DisabledForm" />
                                 <label for="Date"> Datum </label>
                                 <ValidationMessage For="() => trip.Date" class="text-danger" />
                             </div>
                         </div>
                         <div class="col">
                             <div class="form-floating">
                                 <InputDate @bind-Value="trip.HowLongTravel" class="form-control" disabled="@DisabledForm" />
                                 <label for="HowLongTravel"> Dag för hemresa </label>
                                 <ValidationMessage For="() => trip.HowLongTravel" class="text-danger" />
                             </div>
                         </div>
                     </div>

                     <div class="row">
                         <div class="col">
                             <div class="form-floating">
                                 <InputText @bind-Value="trip.Country" class="form-control" placeholder="" disabled="@DisabledForm" />
                                 <label for="Country"> Land </label>
                                 <ValidationMessage For="() => trip.Country" class="text-danger" />
                             </div>
                         </div>
                         <div class="col">
                             <div class="form-floating">
                                 <InputText @bind-Value="trip.Place" class="form-control" placeholder="" disabled="@DisabledForm" />
                                 <label for="Place"> Plats </label>
                                 <ValidationMessage For="() => trip.Place" class="text-danger" />
                             </div>
                         </div>
                     </div>

                     <div class="row">
                         <div class="col">
                             <div class="form-floating">
                                 <InputText @bind-Value="trip.TravelBuddies" class="form-control" disabled="@DisabledForm" />
                                 <label for="TravelBuddies"> Medpassagerare</label>
                                 <ValidationMessage For="() => trip.TravelBuddies" class="text-danger" />
                             </div>
                         </div>
                     </div>

                     <div class="row">
                         <div class="col">
                             <div class="form-floating">
                                 <InputText @bind-Value="trip.Description" class="form-control" disabled="@DisabledForm" />
                                 <label for="Description"> Beskrivning </label>
                                 <ValidationMessage For="() => trip.Description" class="text-danger" />
                             </div>
                         </div>
                     </div>

                     <br />

                     <div style="text-align:center">
                         <button hidden="@ShowOrHideAddNewTripButton" @onclick="HideNewOrChangesTripForm" type="submit" style="text-align:center" class="btn btn-outline-success btn-sm"> Lägg till ny resa </button>
                     </div>

                     <div style="text-align:center">
                         <button @onclick="HideNewOrChangesTripForm" hidden="@ShowOrHideEditButton" type="submit" style="text-align:center" class="btn btn-outline-warning btn-sm"> Ändra </button>
                     </div>

                     <br />

                     <div style="text-align:center">
                         <button @onclick="RefreshPage" type="submit" style="text-align:center" class="btn btn-outline-secondary btn-sm"> Tillbaka </button>
                     </div>

                     <br />
                     <br />
                 </EditForm>
             </div>

             <div class="card-body">
                 <QuickGrid Items="@TripsQueryable" Pagination="pagination">

                     <PropertyColumn Title="Datum utresa" Property="@(c => c.Date)" Format="yyyy-MM-dd" Sortable="true" />
                     <PropertyColumn Title="Dagar borta" Property="@(c => HowLongTravel(c.Date ,c.HowLongTravel))" Sortable="true" />
                     <PropertyColumn Title="Land" Property="@(c => c.Country)" Sortable="true" >
                         <ColumnOptions>
                             <div class="search-box">
                                 <input type="search" autofocus @onchange="SearchCountry" />
                             </div>
                         </ColumnOptions>
                     </PropertyColumn>
                     <PropertyColumn Title="Plats" Property="@(c => c.Place)" Sortable="true" >
                                                  <ColumnOptions>
                             <div class="search-box">
                                 <input type="search" autofocus @onchange="SearchPlace" />
                             </div>
                         </ColumnOptions>
                     </PropertyColumn>
                     <TemplateColumn Title="Ändringar">

                         <button class="btn btn-outline-info btn-sm" @onclick="@(() => InfoTrip(context))"> All info </button>
                         <button class="btn btn-outline-warning btn-sm" @onclick="@(() => EditTrip(context))"> Ändra </button>
                         <button class="btn btn-outline-danger btn-sm" @onclick="@(() => OpenDeleteWindow())"> Ta bort </button>

                         <div class="modal @ModalClass" tabindex="-1" role="dialog" style="display:@ModalDisplay">
                             <div class="modal-dialog" role="document">
                                 <div class="modal-content">
                                     <div class="modal-header">
                                         <h5 class="modal-title"> Vill du ta bort kontaken? </h5>
                                     </div>
                                     <div class="modal-footer">
                                         <button type="button" class="btn btn-outline-danger" @onclick="@(() => DeleteTrip(context))"> Ta bort kontakt </button>
                                         <button type="button" class="btn btn-outline-secondary" data-dismiss="modal" @onclick="() => CloseWindow()"> Ångra </button>
                                     </div>
                                 </div>
                             </div>
                         </div>

                         @if (ShowBackdrop)
                        {
                            <div class="modal-backdrop fade show"></div>
                        }

                    </TemplateColumn>
                </QuickGrid>

                <div class="card-footer"><Paginator State="@pagination" /></div>

                <br />
                <br />

            </div>
        </div>
    </div>
</div>

<br />
<br />

@code
 {
    // Modol window settings
    public Guid Guid = Guid.NewGuid();
    public string ModalDisplay = "none;";
    public string ModalClass = "";
    public bool ShowBackdrop = false;

    // Hide button and fields
    private bool HideNewOrChangesTripFields { get; set; } = false;
    private bool ShowOrHideCreateButton { get; set; } = false;
    private bool ShowOrHideEditButton { get; set; } = false;
    private bool ShowOrHideAddNewTripButton { get; set; } = false;
    private bool DisabledForm { get; set; } = false;

    PaginationState pagination = new PaginationState { ItemsPerPage = 10 };
    private IQueryable<TripsViewModel> TripsQueryable = Enumerable.Empty<TripsViewModel>().AsQueryable();

    [SupplyParameterFromForm]
    private TripsViewModel trip { get; set; } = new();

    protected override void OnInitialized() => ConvertListToQueryable();

    private Trips GetTrip(int? id) => db.Trips.FirstOrDefault(r => r.TripsId == trip.TripsId);

    private void CreateOrUpdateTrip()
    {
        DisabledForm = false;

        Trips getDbTripModel;
        Trips changesToModel;

        // Update trip
        if (trip.TripsId > 0)
        {
            ShowOrHideCreateButton = true;

            Trips c = db.Trips.FirstOrDefault(p => p.TripsId == trip.TripsId);

            if (c is null) return;

            getDbTripModel = GetTrip(trip.TripsId);

            changesToModel = changesTripToModel(trip);

            getDbTripModel.Date = changesToModel.Date;
            getDbTripModel.Country = changesToModel.Country;
            getDbTripModel.Description = changesToModel.Description;
            getDbTripModel.HowLongTravel = changesToModel.HowLongTravel;
            getDbTripModel.TravelBuddies = changesToModel.TravelBuddies;
            getDbTripModel.Place = changesToModel.Place;

            db.SaveChanges();

            trip = new();
            Navigation.Refresh(true);

            return;
        }

        if (string.IsNullOrEmpty(trip.Country)) return;

        // Add new trip
        getDbTripModel = GetTrip(trip.TripsId);
        changesToModel = changesTripToModel(trip);
        db.Trips.Add(changesToModel);
        db.SaveChanges();
        trip = new();
        Navigation.Refresh(true);

        return;
    }

    // Load data from database to the Queryable container
    private void ConvertListToQueryable()
    {
        if (db.Trips.Count() == 0) return;

        TripsQueryable = Enumerable.Empty<TripsViewModel>().AsQueryable();

        foreach (Trips model in db.Trips.OrderBy(c => c.TripsId))
        {
            TripsViewModel trip = ChangeFromModelToViewModel(model);
            TripsQueryable = TripsQueryable.Concat(new[] { trip }.AsQueryable());
        }

        pagination.TotalItemCountChanged += (sender, EventArgs) => StateHasChanged();
    }

    public TripsViewModel ChangeFromModelToViewModel(Trips model)
    {
        DateTime outDate = DateTime.Parse(model.Date);
        DateTime homeDate = DateTime.Parse(model.HowLongTravel);

        TripsViewModel vm = new()
            {
                TripsId = model.TripsId,
                Date = outDate,
                Country = model.Country,
                Description = model.Description,
                HowLongTravel = homeDate,
                TravelBuddies = model.TravelBuddies,
                Place = model.Place
            };

        return vm;
    }

    private Trips changesTripToModel(TripsViewModel vm)
    {
        Trips trips = new()
            {
                TripsId = vm.TripsId,
                Date = vm.Date.ToString("yyyy-MM-dd"),
                Country = vm.Country,
                Description = vm.Description,
                HowLongTravel = vm.HowLongTravel.ToString("yyyy-MM-dd"),
                TravelBuddies = vm.TravelBuddies,
                Place = vm.Place
            };

        return trips;
    }

    private void InfoTrip(TripsViewModel incomingModel)
    {
        HideNewOrChangesTripForm();
        ShowOrHideAddNewTripButton = true;
        DisabledForm = true;
        trip = incomingModel;
    }

    private void EditTrip(TripsViewModel incomingModel)
    {
        DisabledForm = false;
        ShowOrHideEditButton = false;
        ShowOrHideAddNewTripButton = true;
        HideNewOrChangesTripFields = true;
        trip = incomingModel;
    }

    private void DeleteTrip(TripsViewModel incomingModel)
    {
        if (db.Trips.Count() == 0) return;

        Trips trip = changesTripToModel(incomingModel);

        db.ChangeTracker.Clear();
        db.Trips.Remove(trip);
        db.SaveChanges();

        Navigation.Refresh(true);
    }

    private void SearchCountry(ChangeEventArgs e)
    {
        if (!string.IsNullOrEmpty(e.Value!.ToString()))
        {
            IEnumerable<Trips> result = db.Trips.Where(c => c.Country == e.Value!.ToString());
            TripsQueryable = Enumerable.Empty<TripsViewModel>().AsQueryable();

            if (result.Count() == 0) return;

            if (result.Any())
                foreach (Trips model in result.OrderBy(c => c.TripsId))
                {
                    TripsViewModel trip = ChangeFromModelToViewModel(model);
                    TripsQueryable = TripsQueryable.Concat(new[] { trip }.AsQueryable());
                }

            return;
        }

        Navigation.Refresh(true);
    }

    private void SearchPlace(ChangeEventArgs e)
    {
        if (!string.IsNullOrEmpty(e.Value!.ToString()))
        {
            IEnumerable<Trips> result = db.Trips.Where(c => c.Place == e.Value!.ToString());
            TripsQueryable = Enumerable.Empty<TripsViewModel>().AsQueryable();

            if (result.Count() == 0) return;

            if (result.Any())
                foreach (Trips model in result.OrderBy(c => c.TripsId))
                {
                    TripsViewModel trip = ChangeFromModelToViewModel(model);
                    TripsQueryable = TripsQueryable.Concat(new[] { trip }.AsQueryable());
                }

            return;
        }

        Navigation.Refresh(true);
    }

    private double HowLongTravel(DateTime outDate, DateTime homeDate) => (homeDate - outDate).TotalDays;

    private void HideNewOrChangesTripForm()
    {
        HideNewOrChangesTripFields = !HideNewOrChangesTripFields;
        ShowOrHideCreateButton = true;
        ShowOrHideEditButton = true;
    }

    private void RefreshPage() => Navigation.Refresh(true);

    private void OpenDeleteWindow()
    {
        ModalDisplay = "block;";
        ModalClass = "Show";
        ShowBackdrop = true;
        StateHasChanged();
    }

    private void CloseWindow()
    {
        ModalDisplay = "none";
        ModalClass = "";
        ShowBackdrop = false;
        StateHasChanged();
    }
}