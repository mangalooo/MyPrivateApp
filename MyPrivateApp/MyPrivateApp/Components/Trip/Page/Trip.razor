@page "/Trips"

@using MyPrivateApp.Client.ViewModels
@using MyPrivateApp.Components.Trip.Classes
@using MyPrivateApp.Data
@using MyPrivateApp.Data.Models
@using Microsoft.AspNetCore.Components.QuickGrid
@using static Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions;
@using AutoMapper;

@rendermode InteractiveServer

@inject ApplicationDbContext db;
@inject NavigationManager Navigation
@inject ITripClass BackEndClass

<PageTitle> Resor </PageTitle>

@* Header *@
<div>

    <br />

    <h1 style="text-align:center"> Kontakter </h1>

    <div style="text-align:center" hidden="@ShowOrHideCreateButton">

        <br />

        <button class="btn btn-outline-success btn-sm" @onclick="@HideNewOrChangesForm"> Ny resa </button>
    </div>

    @if (ShowOrHideErrorMessage)
    {
        <div style="text-align:center">
            <Alert Color="AlertColor.Danger">
                <Icon Name="IconName.ExclamationTriangleFill" class="me-2"></Icon>
                <b>@ErrorMessage</b>
            </Alert>
        </div>
    }

    <br /> <br />

</div>

@* Form and views *@
<div class="container">
    <div class="col-md-16">
        <div class="card">

            @* Form *@
            <div class="card-header">
                <EditForm Model="pageViewModel" OnSubmit="AddOrEdit" FormName="CreateOrUpdate" Enhance hidden="@(!HideNewOrChangesFields)">

                     <DataAnnotationsValidator />

                     <ValidationSummary class="text-danger" role="alert" />

                     <div class="row">

                         <div id="mobile" class="col-6" />

                         <div class="col-6">
                             <div class="form-floating">
                                <InputDate @bind-Value="pageViewModel.Date" class="form-control" placeholder="" disabled="@DisabledForm" />
                                 <label for="Date"> Datum </label>
                                <ValidationMessage For="() => pageViewModel.Date" class="text-danger" />
                             </div>
                         </div>
                         <div class="col-6">
                             <div class="form-floating">
                                <InputDate @bind-Value="pageViewModel.HomeDate" class="form-control" disabled="@DisabledForm" />
                                 <label for="HomeDate"> Hem </label>
                                <ValidationMessage For="() => pageViewModel.HomeDate" class="text-danger" />
                             </div>
                         </div>
                     </div>

                     <br />

                     <div class="row">

                         <div id="mobile" class="col-6" />

                         <div class="col-6">
                             <div class="form-floating">
                                <InputText @bind-Value="pageViewModel.Country" class="form-control" placeholder="" disabled="@DisabledForm" />
                                 <label for="Country"> Land </label>
                                <ValidationMessage For="() => pageViewModel.Country" class="text-danger" />
                             </div>
                         </div>
                         <div class="col-6">
                             <div class="form-floating">
                                <InputText @bind-Value="pageViewModel.Place" class="form-control" placeholder="" disabled="@DisabledForm" />
                                 <label for="Place"> Plats </label>
                                <ValidationMessage For="() => pageViewModel.Place" class="text-danger" />
                             </div>
                         </div>
                     </div>

                     <br />

                     <div class="row">
                         <div class="col-12">
                             <div class="form-floating">
                                <InputText @bind-Value="pageViewModel.TravelBuddies" class="form-control" disabled="@DisabledForm" />
                                 <label for="TravelBuddies"> Medpassagerare</label>
                                <ValidationMessage For="() => pageViewModel.TravelBuddies" class="text-danger" />
                             </div>
                         </div>
                     </div>

                     <br />

                     <div class="row">
                         <div class="col-12">
                             <div class="form-floating">
                                <InputTextArea @bind-Value="pageViewModel.Description" class="form-control" disabled="@DisabledForm" />
                                 <label for="Description"> Beskrivning </label>
                                <ValidationMessage For="() => pageViewModel.Description" class="text-danger" />
                             </div>
                         </div>
                     </div>

                     <br />

                     <div style="text-align:center">
                        <button hidden="@ShowOrHideAddNewButton" @onclick="HideNewOrChangesForm" type="submit" style="text-align:center" class="btn btn-outline-success btn-sm"> Lägg till ny resa </button>
                     </div>

                     <div style="text-align:center">
                        <button @onclick="HideNewOrChangesForm" hidden="@ShowOrHideEditButton" type="submit" style="text-align:center" class="btn btn-outline-warning btn-sm"> Ändra </button>
                     </div>

                     <br />

                     <div style="text-align:center">
                         <button @onclick="RefreshPage" type="submit" style="text-align:center" class="btn btn-outline-secondary btn-sm"> Tillbaka </button>
                     </div>

                     <br />
                     <br />
                 </EditForm>
             </div>

             @* View - Desktop *@
             <div id="desktop">
                 <div id="desktop" class="card-body">
                    <QuickGrid Items="@queryable" Pagination="pagination">

                         <PropertyColumn Title="Datum" Property="@(c => c.Date)" Format="yyyy-MM-dd" Sortable="true" />
                         <PropertyColumn Title="Dagar" Property="@(c => c.HowManyDays)" Sortable="true" />
                         <PropertyColumn Title="Land" Property="@(c => c.Country)" Sortable="true">
                             <ColumnOptions>
                                 <div class="search-box">
                                     <input type="search" autofocus @onchange="SearchCountry" />
                                 </div>
                             </ColumnOptions>
                         </PropertyColumn>
                         <PropertyColumn Title="Plats" Property="@(c => c.Place)" Sortable="true">
                             <ColumnOptions>
                                 <div class="search-box">
                                     <input type="search" autofocus @onchange="SearchPlace" />
                                 </div>
                             </ColumnOptions>
                         </PropertyColumn>
                         <PropertyColumn Title="Medpassagerare" Property="@(c => c.TravelBuddies)" Sortable="true" />
                         <TemplateColumn Title="Ändringar">

                             <div class="btn-group" role="group">
                                 <button title="Info" id="btnGroupDrop1" type="button" class="btn btn-outline-secondary btn-sm dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">
                                     Info
                                 </button>
                                 <ul class="dropdown-menu" aria-labelledby="btnGroupDrop1">
                                     <li class="dropdown-item"><button class="btn btn-outline-info btn-sm" @onclick="@(() => Info(context))"> All info </button></li>
                                     <li class="dropdown-item"><button class="btn btn-outline-warning btn-sm" @onclick="@(() => Edit(context))"> Ändra </button></li>
                                    <li class="dropdown-item"><button class="btn btn-outline-danger btn-sm" @onclick="@(() => OpenDeleteWindow(context))"> Ta bort </button></li>
                                 </ul>
                             </div>

                             <div class="modal @ModalClass" tabindex="-1" role="dialog" style="display:@ModalDisplay">
                                 <div class="modal-dialog" role="document">
                                     <div class="modal-content">
                                         <div class="modal-header">
                                             <h5 class="modal-title"> Vill du ta bort resan? </h5>
                                         </div>
                                         <div class="modal-footer">
                                             <button type="button" class="btn btn-outline-danger" @onclick="@(() => Delete())"> Ta bort resan </button>
                                             <button type="button" class="btn btn-outline-secondary" data-dismiss="modal" @onclick="() => CloseWindow()"> Ångra </button>
                                         </div>
                                     </div>
                                 </div>
                             </div>

                             @if (ShowBackdrop)
                            {
                                <div class="modal-backdrop fade show"></div>
                            }

                        </TemplateColumn>
                    </QuickGrid>

                    <div class="card-footer"><Paginator State="@pagination" /></div>

                    <br />
                    <br />

                </div>
            </div>

            @* View - Mobile *@
            <div id="mobile">
                <div class="card-body">
                    <QuickGrid Items="@queryable" Pagination="pagination">

                        <PropertyColumn Title="Datum" Property="@(c => c.Date)" Format="yyyy-MM-dd" Sortable="true" />
                        <PropertyColumn Title="Plats" Property="@(c => c.Place)" Sortable="true">
                            <ColumnOptions>
                                <div class="search-box">
                                    <input type="search" autofocus @onchange="SearchPlace" />
                                </div>
                            </ColumnOptions>
                        </PropertyColumn>
                        <TemplateColumn Title="Info">

                            <div class="btn-group" role="group">
                                <button title="Info" id="btnGroupDrop1" type="button" class="btn btn-outline-secondary btn-sm dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">
                                    Info
                                </button>
                                <ul class="dropdown-menu" aria-labelledby="btnGroupDrop1">
                                    <li class="dropdown-item"><button class="btn btn-outline-info btn-sm" @onclick="@(() => Info(context))"> All info </button></li>
                                    <li class="dropdown-item"><button class="btn btn-outline-warning btn-sm" @onclick="@(() => Edit(context))"> Ändra </button></li>
                                    <li class="dropdown-item"><button class="btn btn-outline-danger btn-sm" @onclick="@(() => OpenDeleteWindow(context))"> Ta bort </button></li>
                                </ul>
                            </div>

                            <div class="modal @ModalClass" tabindex="-1" role="dialog" style="display:@ModalDisplay">
                                <div class="modal-dialog" role="document">
                                    <div class="modal-content">
                                        <div class="modal-header">
                                            <h5 class="modal-title"> Vill du ta bort resan? </h5>
                                        </div>
                                        <div class="modal-footer">
                                            <button type="button" class="btn btn-outline-danger" @onclick="@(() => Delete())"> Ta bort resan </button>
                                            <button type="button" class="btn btn-outline-secondary" data-dismiss="modal" @onclick="() => CloseWindow()"> Ångra </button>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            @if (ShowBackdrop)
                            {
                                <div class="modal-backdrop fade show"></div>
                            }

                        </TemplateColumn>
                    </QuickGrid>

                    <br />
                    <br />

                </div>
            </div>
        </div>
    </div>
</div>

@* Footer *@
<div>

    <br />
    <br />

    <div class="footer" align="center">
        <p> Copyright 2023 - @DateTime.Now.Year</p>
    </div>

    <br />
    <br />

</div>

@* Back-End *@
@code
{
    [SupplyParameterFromForm]
    private TripsViewModel pageViewModel { get; set; } = new();
    PaginationState pagination = new PaginationState { ItemsPerPage = 10 };
    private IQueryable<TripsViewModel> queryable = Enumerable.Empty<TripsViewModel>().AsQueryable();

    // Holds temporary id to delete items
    private int TemporaryId { get; set; } = 0;

    // Modol window settings
    public Guid Guid = Guid.NewGuid();
    public string ModalDisplay = "none;";
    public string ModalClass = "";
    public bool ShowBackdrop = false;

    // Hide button and fields
    private bool HideNewOrChangesFields { get; set; } = false;
    private bool ShowOrHideCreateButton { get; set; } = false;
    private bool ShowOrHideEditButton { get; set; } = false;
    private bool ShowOrHideAddNewButton { get; set; } = false;
    private bool DisabledForm { get; set; } = false;
    private bool ShowOrHideErrorMessage { get; set; } = false;

    // Text messeges
    private string ErrorMessage { get; set; } = string.Empty;

    // Load data from database to the Queryable container
    private async Task ConvertListToQueryableAsync()
    {
        List<Trips> trips = await db.Trips.OrderBy(c => c.Date).ToListAsync();

        if (!trips.Any()) return;

        queryable = trips
            .Select(model => BackEndClass.ChangeFromModelToViewModel(model))
            .AsQueryable();

        pagination.TotalItemCountChanged += (sender, EventArgs) => StateHasChanged();
    }

    protected override async Task OnInitializedAsync() => await ConvertListToQueryableAsync();

    private async Task RefreshPage() => await Task.Run(() => Navigation.Refresh(true));

    private void HideNewOrChangesForm()
    {
        HideNewOrChangesFields = !HideNewOrChangesFields;
        ShowOrHideCreateButton = true;
        ShowOrHideEditButton = true;
    }

    private async Task AddOrEdit()
    {
        DisabledForm = false;

        try
        {
            if (pageViewModel.TripsId > 0)
                ErrorMessage = await BackEndClass.Edit(pageViewModel);
            else
                ErrorMessage = await BackEndClass.Add(pageViewModel);

            if (!string.IsNullOrEmpty(ErrorMessage))
            {
                HideNewOrChangesForm();
                ShowOrHideErrorMessage = false;
                ShowOrHideEditButton = pageViewModel.TripsId > 0;
                ShowOrHideAddNewButton = pageViewModel.TripsId == 0;
            }
            else
            {
                pageViewModel = new();
                await RefreshPage();
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"An error occurred: {ex.Message}";
            ShowOrHideErrorMessage = false;
        }
    }

    private void Info(TripsViewModel vm)
    {
        HideNewOrChangesForm();
        ShowOrHideAddNewButton = true;
        DisabledForm = true;
        pageViewModel = vm;
    }

    private void Edit(TripsViewModel vm)
    {
        DisabledForm = false;
        ShowOrHideEditButton = false;
        ShowOrHideAddNewButton = true;
        ShowOrHideCreateButton = true;
        HideNewOrChangesFields = true;
        pageViewModel = vm;
    }

    private async Task Delete()
    {
        if (!db.Trips.Any()) return;

        Trips? model = await db.Trips.FirstOrDefaultAsync(a => a.TripsId  == TemporaryId);
        if (model == null) return;

        TripsViewModel vm = BackEndClass.ChangeFromModelToViewModel(model);
        ErrorMessage = await BackEndClass.Delete(vm);

        if (!string.IsNullOrEmpty(ErrorMessage))
            ShowOrHideErrorMessage = true;
        else
        {
            pageViewModel = new();
            await RefreshPage();
        }
    }

    private void ToggleModal(ref string modalDisplay, ref string modalClass, ref bool showBackdrop, bool isOpen)
    {
        modalDisplay = isOpen ? "block;" : "none";
        modalClass = isOpen ? "Show" : "";
        showBackdrop = isOpen;
        StateHasChanged();
    }

    private void OpenDeleteWindow(TripsViewModel vm)
    {
        TemporaryId = vm.TripsId;
        ToggleModal(ref ModalDisplay, ref ModalClass, ref ShowBackdrop, true);
    }

    private void CloseWindow() => ToggleModal(ref ModalDisplay, ref ModalClass, ref ShowBackdrop, false);

    private void GetGuery(IEnumerable<Trips> result)
    {
        queryable = Enumerable.Empty<TripsViewModel>().AsQueryable();

        if (result.Count() == 0) return;

        if (result.Any())
            foreach (Trips model in result.OrderBy(c => c.TripsId))
            {
                TripsViewModel vm = BackEndClass.ChangeFromModelToViewModel(model);
                queryable = queryable.Concat(new[] { vm }.AsQueryable());
            }
    }

    private void SearchCountry(ChangeEventArgs e)
    {
        if (!string.IsNullOrEmpty(e.Value!.ToString()))
        {
            IEnumerable<Trips> result = db.Trips.Where(c => c.Country == e.Value!.ToString());
            GetGuery(result);
            return;
        }

        Navigation.Refresh(true);
    }

    private void SearchPlace(ChangeEventArgs e)
    {
        if (!string.IsNullOrEmpty(e.Value!.ToString()))
        {
            IEnumerable<Trips> result = db.Trips.Where(c => c.Place == e.Value!.ToString());
            GetGuery(result);
            return;
        }

        Navigation.Refresh(true);
    }
}