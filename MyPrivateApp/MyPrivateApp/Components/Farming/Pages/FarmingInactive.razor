@page "/FarmingInactive"

@using MyPrivateApp.Client.ViewModels
@using MyPrivateApp.Components.Enum
@using MyPrivateApp.Components.Farming.Classes
@using MyPrivateApp.Components.ViewModels
@using MyPrivateApp.Components.ViewModels.SharesViewModels
@using MyPrivateApp.Data
@using MyPrivateApp.Data.Models
@using Microsoft.AspNetCore.Components.QuickGrid
@using MyPrivateApp.Data.Models.Farming
@using MyPrivateApp.Data.Models.SharesModels
@using MyPrivateApp.Components.Shares.Classes

@rendermode InteractiveServer

@inject ApplicationDbContext db;
@inject NavigationManager Navigation
@inject IFarmingClass BackEndClass

<PageTitle> Odling </PageTitle>

@* Header *@
<div>

    <br />

    <div style="text-align:center">
        <NavLink href="FarmingActive" type="button" class="btn btn-outline-dark btn-sm"> Aktiv odling </NavLink>
    </div>

    <br />
    <br />

    <h1 style="text-align:center"> Odling (inaktiv) </h1>

    <br />

    <div style="text-align:center" hidden="@ShowOrHideErrorMessage">
        <br />
        <br />
        <Alert Color="AlertColor.Danger"> <Icon Name="IconName.ExclamationTriangleFill" class="me-2"></Icon> <b>@ErrorMessage</b> </Alert>
    </div>

    <br />
    <br />

</div>

@* Form and views *@
<div class="container">
    <div class="col-md-12">
        <div class="card">

            @* Form *@
            <div class="card-header">
                <EditForm Model="pageModel" OnSubmit="Edit" FormName="AddOrUpdateFarming" Enhance hidden="@(!HideNewOrChangesFields)">

                    <DataAnnotationsValidator />

                    <ValidationSummary class="text-danger" role="alert" />

                    <div class="row">

                        <div id="mobile" class="col-4" />

                        <div class="col-4">
                            <div class="form-floating">
                                <InputText @bind-Value="pageModel.Name" class="form-control" disabled="@DisabledForm" />
                                <label for="Name"> Namn </label>
                                <ValidationMessage For="() => pageModel.Name" class="text-danger" />
                            </div>
                        </div>

                        <div class="col-4">
                            <div class="form-floating">
                                <InputText @bind-Value="pageModel.Type" class="form-control" disabled="@DisabledForm" />
                                <label for="Type"> Typ </label>
                                <ValidationMessage For="() => pageModel.Type" class="text-danger" />
                            </div>
                        </div>

                        <div class="col-4">
                            <div class="form-floating">
                                <InputText @bind-Value="pageModel.Place" class="form-control" disabled="@DisabledForm" />
                                <label for="Place"> Plats </label>
                                <ValidationMessage For="() => pageModel.Place" class="text-danger" />
                            </div>
                        </div>

                    </div>

                    <br />

                    <div class="row">

                        <div id="mobile" class="col-3" />

                        <div class="col-3">
                            <div class="form-floating">
                                <InputDate @bind-Value="pageModel.InactiveDate" class="form-control" disabled="@DisabledForm" />
                                <label for="InactiveDate"> Inaktiv datum </label>
                                <ValidationMessage For="() => pageModel.InactiveDate" class="text-danger" />
                            </div>
                        </div>

                        <div class="col-3">
                            <div class="form-floating">
                                <InputDate @bind-Value="pageModel.PutSeedDate" class="form-control" disabled="@DisabledForm" />
                                <label for="PutSeedDate"> Sätt frö datum </label>
                                <ValidationMessage For="() => pageModel.PutSeedDate" class="text-danger" />
                            </div>
                        </div>

                        <div class="col-3">
                            <div class="form-floating">
                                <InputDate @bind-Value="pageModel.SetDate" class="form-control" disabled="@DisabledForm" />
                                <label for="SetDate"> Plantera ut datum </label>
                                <ValidationMessage For="() => pageModel.SetDate" class="text-danger" />
                            </div>
                        </div>

                        <div class="col-3">
                            <div class="form-floating">
                                <InputDate @bind-Value="pageModel.TakeUpDate" class="form-control" disabled="@DisabledForm" />
                                <label for="TakeUpDate"> Ta upp datum </label>
                                <ValidationMessage For="() => pageModel.TakeUpDate" class="text-danger" />
                            </div>
                        </div>

                    </div>

                    <br />

                    <div class="row">

                        <div id="mobile" class="col-6" />

                        <div class="col-6">
                            <div class="form-floating">
                                <InputNumber @bind-Value="pageModel.HowMany" class="form-control" disabled="@DisabledForm" />
                                <label for="HowMany"> Hur många satta </label>
                                <ValidationMessage For="() => pageModel.HowMany" class="text-danger" />
                            </div>
                        </div>

                        <div class="col-6">
                            <div class="form-floating">
                                <InputNumber @bind-Value="pageModel.HowManySave" class="form-control" disabled="@DisabledForm" />
                                <label for="HowManySave"> Hur många sparade </label>
                                <ValidationMessage For="() => pageModel.HowManySave" class="text-danger" />
                            </div>
                        </div>

                    </div>

                    <br />

                    <div class="row">

                        <div class="col-12">
                            <div class="form-floating">
                                <InputTextArea rows="5" style="height:100%;" @bind-Value="pageModel.Note" class="form-control" disabled="@DisabledForm" />
                                <label for="Note"> Anteckningar </label>
                                <ValidationMessage For="() => pageModel.Note" class="text-danger" />
                            </div>
                        </div>
                    </div>

                    <br />

                    <div style="text-align:center">
                        <button @onclick="HideNewOrChangesForm" hidden="@ShowOrHideEditButton" type="submit" style="text-align:center" class="btn btn-outline-warning btn-sm"> Ändra </button>
                    </div>

                    <br />

                    <div style="text-align:center">
                        <button @onclick="RefreshPage" type="button" style="text-align:center" class="btn btn-outline-secondary btn-sm"> Tillbaka </button>
                    </div>

                    <br />
                    <br />
                </EditForm>
            </div>

            @* View - Desktop *@
            <div id="desktop">
                <div class="card-body">
                    <QuickGrid Items="@queryable" Pagination="pagination">

                        <PropertyColumn Title="Namn" Property="@(c => c.Name)" Sortable="true" />
                        <PropertyColumn Title="Typ" Property="@(c => c.Type)" Sortable="true" />
                        <PropertyColumn Title="Hur många" Property="@(c => c.HowMany)" Sortable="true" />
                        <PropertyColumn Title="Anteckningar" Property="@(c => c.Note)" Sortable="true" />

                        <TemplateColumn Title="Info">

                            <div class="btn-group" role="group">
                                <button title="Info" id="btnGroupDrop1" type="button" class="btn btn-outline-secondary btn-sm dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">
                                    Info
                                </button>
                                <ul class="dropdown-menu" aria-labelledby="btnGroupDrop1">
                                    <li class="dropdown-item"><button class="btn btn-outline-info btn-sm" @onclick="@(() => Info(context))"> All info </button></li>
                                    <li class="dropdown-item"><button class="btn btn-outline-warning btn-sm" @onclick="@(() => Edit(context))"> Ändra </button></li>
                                    <li class="dropdown-item"><button class="btn btn-outline-danger btn-sm" @onclick="@(() => OpenDeleteWindow(context))"> Ta bort </button></li>
                                </ul>
                            </div>

                            <div class="modal @ModalClass" tabindex="-1" role="dialog" style="display:@ModalDisplay">
                                <div class="modal-dialog" role="document">
                                    <div class="modal-content">
                                        <div class="modal-header">
                                            <h5 class="modal-title"> Vill du ta bort avgiften? </h5>
                                        </div>
                                        <div class="modal-footer">
                                            <button type="button" class="btn btn-outline-danger" @onclick="@(() => Delete())"> Ta bort odlingen </button>
                                            <button type="button" class="btn btn-outline-secondary" data-dismiss="modal" @onclick="() => CloseWindow()"> Ångra </button>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            @if (ShowBackdrop)
                            {
                                <div class="modal-backdrop fade show"></div>
                            }

                        </TemplateColumn>
                    </QuickGrid>

                    <div class="card-footer"><Paginator State="@pagination" /></div>

                    <br />
                    <br />

                </div>
            </div>

            @* View - Mobile *@
            <div id="mobile">
                <div class="card-body">
                    <QuickGrid Items="@queryable" Pagination="pagination">

                        <PropertyColumn Title="Namn" Property="@(c => c.Name)" Sortable="true" />
                        <PropertyColumn Title="Typ" Property="@(c => c.Type)" Sortable="true" />

                        <TemplateColumn Title="Info">

                            <div class="btn-group" role="group">
                                <button title="Info" id="btnGroupDrop1" type="button" class="btn btn-outline-secondary btn-sm dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">
                                    Info
                                </button>
                                <ul class="dropdown-menu" aria-labelledby="btnGroupDrop1">
                                    <li class="dropdown-item"><button class="btn btn-outline-info btn-sm" @onclick="@(() => Info(context))"> All info </button></li>
                                    <li class="dropdown-item"><button class="btn btn-outline-warning btn-sm" @onclick="@(() => Edit(context))"> Ändra </button></li>
                                    <li class="dropdown-item"><button class="btn btn-outline-danger btn-sm" @onclick="@(() => OpenDeleteWindow(context))"> Ta bort </button></li>
                                </ul>
                            </div>

                            <div class="modal @ModalClass" tabindex="-1" role="dialog" style="display:@ModalDisplay">
                                <div class="modal-dialog" role="document">
                                    <div class="modal-content">
                                        <div class="modal-header">
                                            <h5 class="modal-title"> Vill du ta bort odlingen? </h5>
                                        </div>
                                        <div class="modal-footer">
                                            <button type="button" class="btn btn-outline-danger" @onclick="@(() => Delete())"> Ta bort kontakt </button>
                                            <button type="button" class="btn btn-outline-secondary" data-dismiss="modal" @onclick="() => CloseWindow()"> Ångra </button>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            @if (ShowBackdrop)
                            {
                                <div class="modal-backdrop fade show"></div>
                            }

                        </TemplateColumn>
                    </QuickGrid>

                    <br />
                    <br />

                </div>
            </div>

        </div>
    </div>
</div>

@* Footer *@
<div>

    <br />
    <br />

    <div class="footer" align="center">
        <p> Copyright 2023 - @DateTime.Now.Year</p>
    </div>

    <br />
    <br />

</div>

@* Back-End *@
@code
{
    [SupplyParameterFromForm]
    private FarmingViewModels pageModel { get; set; } = new();

    PaginationState pagination = new PaginationState { ItemsPerPage = 10 };
    private IQueryable<FarmingViewModels> queryable = Enumerable.Empty<FarmingViewModels>().AsQueryable();

    // Holds temporary id to delete items
    private int TemporaryId { get; set; } = 0;

    // Modol window settings
    private Guid Guid = Guid.NewGuid();
    private string ModalDisplay = "none;";
    private string ModalClass = "";
    private bool ShowBackdrop = false;

    // Hide button and fields
    private bool HideNewOrChangesFields { get; set; } = false;
    private bool ShowOrHideEditButton { get; set; } = false;
    private bool DisabledForm { get; set; } = false;
    private bool ShowOrHideErrorMessage { get; set; } = true;

    // Text messeges
    private string ErrorMessage { get; set; } = string.Empty;

    // Load data from database to the Queryable container
    private void ConvertListToQueryable()
    {
        if (db.FarmingsInactive.Count() == 0) return;

        queryable = Enumerable.Empty<FarmingViewModels>().AsQueryable();

        foreach (FarmingsInactive model in db.FarmingsInactive.OrderBy(c => c.FarmingId))
        {
            FarmingViewModels vm = BackEndClass.ChangeFromModelToViewModel(model);
            queryable = queryable.Concat(new[] { vm }.AsQueryable().OrderByDescending(c => c.InactiveDate));
        }

        pagination.TotalItemCountChanged += (sender, EventArgs) => StateHasChanged();
    }

    protected override void OnInitialized() => ConvertListToQueryable();

    private void HideNewOrChangesForm()
    {
        HideNewOrChangesFields = !HideNewOrChangesFields;
        ShowOrHideEditButton = true;
    }

    private void RefreshPage() => Navigation.Refresh(true);

    private async Task Edit()
    {
        DisabledForm = false;

        if (pageModel.FarmingId > 0)
        {
            // Edit
            ErrorMessage = await BackEndClass.EditInactive(pageModel);

            if (!string.IsNullOrEmpty(ErrorMessage))
            {
                ShowOrHideErrorMessage = false;
                HideNewOrChangesFields = true;
                ShowOrHideEditButton = false;
                return;
            }
            else
            {
                pageModel = new();
                Navigation.Refresh(true);
                return;
            }
        }
    }

    private void Edit(FarmingViewModels vm)
    {
        DisabledForm = false;
        ShowOrHideEditButton = false;
        HideNewOrChangesFields = true;
        pageModel = vm;
    }

    private void Info(FarmingViewModels vm)
    {
        HideNewOrChangesForm();
        DisabledForm = true;
        pageModel = vm;
    }

    private async Task Delete()
    {
        if (db.FarmingsInactive.Count() == 0) return;

        bool findId = db.FarmingsInactive.Any(a => a.FarmingId == TemporaryId);

        if (findId)
        {
            FarmingsInactive model = db.FarmingsInactive.FirstOrDefault(a => a.FarmingId == TemporaryId);
            FarmingViewModels vm = BackEndClass.ChangeFromModelToViewModel(model);

            ErrorMessage = await BackEndClass.DeleteInactive(vm);

            if (!string.IsNullOrEmpty(ErrorMessage))
            {
                ShowOrHideErrorMessage = false;
                return;
            }
            else
            {
                pageModel = new();
                Navigation.Refresh(true);
                return;
            }
        }
    }

    private void OpenDeleteWindow(FarmingViewModels vm)
    {
        ModalDisplay = "block;";
        ModalClass = "Show";
        ShowBackdrop = true;
        StateHasChanged();
        TemporaryId = vm.FarmingId;
    }

    private void CloseWindow()
    {
        ModalDisplay = "none";
        ModalClass = "";
        ShowBackdrop = false;
        StateHasChanged();
    }
}