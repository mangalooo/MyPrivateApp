
@page "/SharesDividendPage"

@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using MyPrivateApp.Components.Enum
@using MyPrivateApp.Components.Shares.Classes
@using MyPrivateApp.Components.Shares.Classes.Interface
@using MyPrivateApp.Components.ViewModels.SharesViewModels
@using MyPrivateApp.Data
@using MyPrivateApp.Data.Models
@using MyPrivateApp.Data.Models.SharesModels
@using static Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions

@rendermode @(new InteractiveServerRenderMode(prerender:false))

@inject NavigationManager Navigation
@inject ISharesDividendClass BackEndClass
@inject IDbContextFactory<ApplicationDbContext> IDbContextFactory

<PageTitle> Aktier </PageTitle>

<br />

@try
{
    @* Header *@
    <div>

    @* Navigation *@
    <div class="navigation">
        <div id="desktop" class="text-center">
            <div class="btn-group">
                @foreach (var item in NavigationItems)
                {
                    <NavLink href="@item.Href" type="button" class="btn btn-outline-dark btn-sm"> @item.Text </NavLink>
                }
            </div>
        </div>

        <div id="mobile">
            <div class="btn-group" role="group">
                <button title="Info" id="btnGroupDrop1" type="button" class="btn btn-outline-secondary btn-sm dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">
                    Alla aktier sidor
                </button>
                <ul class="dropdown-menu" aria-labelledby="btnGroupDrop1">
                    @foreach (var item in NavigationItems)
                    {
                        <li class="dropdown-item">
                            <NavLink href="@item.Href" type="button" class="btn btn-outline-dark btn-sm"> @item.Text </NavLink>
                        </li>
                    }
                </ul>
            </div>
        </div>
    </div>

    <br /> <br />

    <h1 align="center"> Utdelningar </h1>

    @if (ShowOrHideCreateButton)
    {
        <br />

        <div align="center">
            <button class="btn btn-outline-success btn-sm" @onclick="@ShowAddForm"> Ny utdelning </button>
        </div>
    }

    @if (ShowOrHideErrorMessage)
    {
        <br />

        <div style="text-align:center">
            <Alert Color="AlertColor.Danger">
                <Icon Name="IconName.ExclamationTriangleFill" class="me-2"></Icon>
                <b>@ErrorMessage</b>
            </Alert>
        </div>
    }

    @if (ShowOrHideInfoMessage)
    {
        <br />

        <div align="center">
            <Alert Color="AlertColor.Info">
                <b>@InfoMessage</b>
            </Alert>
        </div>
    }

    <br />

</div>
    
    @* Form and views *@
    <div class="container">
    <div class="col-md-12">
        <div class="card">

            @* Form *@
            <div>
                @if (ShowOrHideAddOrEditForm)
                {
                    <div class="card-header">
                        <EditForm Model="pageViewModel" OnSubmit="AddOrEdit" Enhance>

                            <br />

                            <div class="row">

                                <div id="mobile" class="col-4" />

                                <div class="col-4">
                                    <div class="form-floating">
                                        <InputDate @bind-Value="pageViewModel.Date" class="form-control" disabled="@DisabledForm" />
                                        <label for="Date"> Datum </label>
                                    </div>
                                </div>

                                <div class="col-4">
                                    <div class="form-floating">
                                        <InputText @bind-Value="pageViewModel.Company" class="form-control" disabled="@DisabledForm" />
                                        <label for="Company"> Företag </label>
                                    </div>
                                </div>

                                <div class="col-4">
                                    <div class="form-floating">
                                        <InputText @bind-Value="pageViewModel.ISIN" class="form-control" disabled="@DisabledForm" />
                                        <label for="ISIN"> ISIN </label>
                                    </div>
                                </div>

                            </div>

                            <br />

                            <div class="row">

                                <div id="mobile" class="col-4" />

                                <div class="col-4">
                                    <div class="form-floating">
                                        <InputText @bind-Value="pageViewModel.TypeOfTransaction" class="form-control" disabled="@DisabledForm" />
                                        <label for="TypeOfTransaction"> Typ av transaktion </label>
                                    </div>
                                </div>

                                <div class="col-4">
                                    <div class="form-floating">
                                        <InputText @bind-Value="pageViewModel.AccountNumber" class="form-control" disabled="@DisabledForm" />
                                        <label for="AccountNumber"> Konto </label>
                                    </div>
                                </div>

                                <div class="col-4">
                                    <div class="form-floating">
                                        <InputText @bind-Value="pageViewModel.Currency" class="form-control" disabled="@DisabledForm" />
                                        <label for="Currency"> Valuta </label>
                                    </div>
                                </div>

                            </div>

                            <br />

                            <div class="row">

                                <div id="mobile" class="col-4" />

                                <div class="col-4">
                                    <div class="form-floating">
                                        <InputNumber @bind-Value="pageViewModel.NumberOfShares" class="form-control" disabled="@DisabledForm" />
                                        <label for="NumberOfShares"> Antal </label>
                                    </div>
                                </div>

                                <div class="col-4">
                                    <div class="form-floating">
                                        <InputText @bind-Value="pageViewModel.PricePerShare" class="form-control" disabled="@DisabledForm" />
                                        <label for="PricePerShare"> Pris per aktie </label>
                                    </div>
                                </div>

                                <div class="col-4">
                                    <div class="form-floating">
                                        <InputText @bind-Value="pageViewModel.TotalAmount" class="form-control" disabled="true" />
                                        <label for="TotalAmount"> Belopp </label>
                                    </div>
                                </div>

                            </div>

                            <br />

                            <div class="row">

                                <div class="col-12">
                                    <div class="form-floating">
                                        <InputTextArea @bind-Value="pageViewModel.Note" class="form-control" disabled="@DisabledForm" />
                                        <label for="Note"> Anteckningar </label>
                                    </div>
                                </div>

                            </div>

                            <br />

                            @if (ShowOrHideAddNewButton)
                            {
                                <div align="center">
                                    <button type="submit" align="center" class="btn btn-outline-success btn-sm"> Ny utdelning </button>
                                </div>
                            }

                            @if (ShowOrHideEditButton)
                            {
                                <div align="center">
                                    <button type="submit" align="center" class="btn btn-outline-warning btn-sm"> Ändra </button>
                                </div>
                            }

                            <br />

                            <div align="center">
                                <button @onclick="RefreshPage" type="button" align="center" class="btn btn-outline-secondary btn-sm"> Tillbaka </button>
                            </div>

                            <br /><br />

                        </EditForm>
                    </div>
                }
            </div>

            @* View - Desktop *@
            <div id="desktop">
                <div class="card-body">
                    <QuickGrid Items="@queryable" Pagination="pagination">

                        <PropertyColumn Title="Datum" Property="@(c => c.Date)" Format="yyyy-MM-dd" Sortable="true" />
                        <PropertyColumn Title="Företag" Property="@(c => c.Company)" Sortable="true" />
                        <PropertyColumn Title="Typ" Property="@(c => c.TypeOfTransaction)" Sortable="true" />
                        <PropertyColumn Title="Antal" Property="@(c => c.NumberOfShares)" Sortable="true" />
                        <PropertyColumn Title="Pris per aktie" Property="@(c => c.PricePerShare)" Sortable="true" />
                        <PropertyColumn Title="Belopp" Property="@(c => c.TotalAmount)" Sortable="true" />
                        <PropertyColumn Title="Valuta" Property="@(c => c.Currency)" Sortable="true" />

                        <TemplateColumn Title="Info">

                            <div class="btn-group" role="group">
                                <button title="Info" id="btnGroupDrop1" type="button" class="btn btn-outline-secondary btn-sm dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">
                                    Info
                                </button>
                                <ul class="dropdown-menu" aria-labelledby="btnGroupDrop1">
                                    <li class="dropdown-item"><button class="btn btn-outline-info btn-sm" @onclick="@(() => Info(context))"> All info </button></li>
                                    <li class="dropdown-item"><button class="btn btn-outline-warning btn-sm" @onclick="@(() => Edit(context))"> Ändra </button></li>
                                    <li class="dropdown-item"><button class="btn btn-outline-danger btn-sm" @onclick="@(() => OpenDeleteWindow(context))"> Ta bort </button></li>
                                </ul>
                            </div>

                            <div class="modal @ModalClass" tabindex="-1" role="dialog" style="display:@ModalDisplay">
                                <div class="modal-dialog" role="document">
                                    <div class="modal-content">
                                        <div class="modal-header">
                                            <h5 class="modal-title"> Vill du ta bort utdelningen? </h5>
                                        </div>
                                        <div class="modal-footer">
                                            <button type="button" class="btn btn-outline-danger" @onclick="@(() => Delete())"> Ta bort utdelningen </button>
                                            <button type="button" class="btn btn-outline-secondary" data-dismiss="modal" @onclick="() => CloseDeleteWindow()"> Ångra </button>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            @if (ShowBackdrop)
                            {
                                <div class="modal-backdrop fade show"></div>
                            }

                        </TemplateColumn>
                    </QuickGrid>

                    <div class="card-footer"><Paginator State="@pagination" /></div>

                    <br />
                    <br />

                </div>
            </div>

            @* View - Mobile *@
            <div id="mobile">
                <div class="card-body">
                    <QuickGrid Items="@queryable" Pagination="pagination">

                        <PropertyColumn Title="Företag" Property="@(c => c.Company)" Sortable="true" />

                        <TemplateColumn Title="Info">

                            <div class="btn-group" role="group">
                                <button title="Info" id="btnGroupDrop1" type="button" class="btn btn-outline-secondary btn-sm dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">
                                    Info
                                </button>
                                <ul class="dropdown-menu" aria-labelledby="btnGroupDrop1">
                                    <li class="dropdown-item"><button class="btn btn-outline-info btn-sm" @onclick="@(() => Info(context))"> All info </button></li>
                                    <li class="dropdown-item"><button class="btn btn-outline-warning btn-sm" @onclick="@(() => Edit(context))"> Ändra </button></li>
                                    <li class="dropdown-item"><button class="btn btn-outline-danger btn-sm" @onclick="@(() => OpenDeleteWindow(context))"> Ta bort </button></li>
                                </ul>
                            </div>

                            <div class="modal @ModalClass" tabindex="-1" role="dialog" style="display:@ModalDisplay">
                                <div class="modal-dialog" role="document">
                                    <div class="modal-content">
                                        <div class="modal-header">
                                            <h5 class="modal-title"> Vill du ta bort udelningen? </h5>
                                        </div>
                                        <div class="modal-footer">
                                            <button type="button" class="btn btn-outline-danger" @onclick="@(() => Delete())"> Ta bort utdelningen </button>
                                            <button type="button" class="btn btn-outline-secondary" data-dismiss="modal" @onclick="() => CloseDeleteWindow()"> Ångra </button>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            @if (ShowBackdrop)
                            {
                                <div class="modal-backdrop fade show"></div>
                            }

                        </TemplateColumn>
                    </QuickGrid>

                    <br />
                    <br />

                </div>
            </div>

        </div>
    </div>
</div>
    
    @* Footer *@
    <div>

    <br /> <br />

    <div class="footer" align="center">
        <p> Copyright 2023 - @DateTime.Now.Year</p>
    </div>

    <br /> <br />

</div>
}
catch (Exception ex)
{
    ShowErrorMessage($"Övergripande felmeddelande: {ex.Message}");
}

@* Back-End *@
@code
{
    [SupplyParameterFromForm]
    private SharesDividendViewModel pageViewModel { get; set; } = new();

    PaginationState pagination = new PaginationState { ItemsPerPage = 30 };
    private IQueryable<SharesDividendViewModel> queryable = Enumerable.Empty<SharesDividendViewModel>().AsQueryable();

    // Holds temporary id to delete items
    private int TemporaryId { get; set; } = 0;

    // Modol window settings
    public Guid Guid = Guid.NewGuid();
    public string ModalDisplay = "none;";
    public string ModalClass = "";
    public bool ShowBackdrop = false;

    // Hide button and fields
    private bool ShowOrHideAddOrEditForm { get; set; } = false;
    private bool ShowOrHideCreateButton { get; set; } = true;
    private bool ShowOrHideEditButton { get; set; } = false;
    private bool ShowOrHideAddNewButton { get; set; } = false;
    private bool DisabledForm { get; set; } = false;

    // Text messeges
    private string ErrorMessage { get; set; } = string.Empty;
    private bool ShowOrHideErrorMessage { get; set; } = false;
    private string InfoMessage { get; set; } = string.Empty;
    private bool ShowOrHideInfoMessage { get; set; } = false;

    private void ShowErrorMessage(string errorMessage)
    {
        ErrorMessage = errorMessage;
        ShowOrHideErrorMessage = true;
    }

    // Navigation items
    private List<NavigationItem> NavigationItems = new()
    {
        new NavigationItem("SharesIndexYearsPage", "Start"),
        new NavigationItem("SharesImportsPage", "Importera"),
        new NavigationItem("SharesPurchasedPage", "Köpta aktier"),
        new NavigationItem("SharesSoldPage", "Sålda aktier"),
        new NavigationItem("SharesPurchasedFundsPage", "Köpta fonder"),
        new NavigationItem("SharesSoldFundsPage", "Sålda fonder"),
        new NavigationItem("SharesDividendPage", "Utdelningar"),
        new NavigationItem("SharesFeePage", "Avgifter"),
        new NavigationItem("SharesDepositMoneyPage", "Banköverföringar"),
        new NavigationItem("SharesInterestRatesPage", "Räntor"),
        new NavigationItem("SharesOtherImportsPage", "Manuell hantering"),
        new NavigationItem("SharesErrorHandlingPage", "Felhantering")
    };

    private class NavigationItem
    {
        public string Href { get; }
        public string Text { get; }

        public NavigationItem(string href, string text)
        {
            Href = href;
            Text = text;
        }
    }

    // Load data from database to the Queryable container
    private async Task ConvertListToQueryableAsync()
    {
        try
        {
            await using ApplicationDbContext db = await IDbContextFactory.CreateDbContextAsync() ?? throw new Exception("ConvertListToQueryableAsync: db == null!");

            List<SharesDividend> items = await db.SharesDividends.OrderBy(c => c.DividendId).ToListAsync();

            if (!items.Any())
            {
                InfoMessage = "Finns ingen data att visa!";
                ShowOrHideInfoMessage = true;
                return;
            }

            queryable = items
                .Select(model => BackEndClass.ChangeFromModelToViewModel(model))
                .AsQueryable();

            pagination.TotalItemCountChanged += (sender, EventArgs) => StateHasChanged();
        }
        catch (Exception ex)
        {
            ShowErrorMessage($"ConvertListToQueryableAsync. Felmeddelande: {ex.Message}");
        }
    }

    protected override async Task OnInitializedAsync() => await ConvertListToQueryableAsync();

    private async Task RefreshPage() => await Task.Run(() => Navigation.Refresh(true));

    private void ShowAddForm()
    {
        ShowOrHideAddOrEditForm = true;
        ShowOrHideAddNewButton = true;
    }

    private async Task AddOrEdit()
    {
        DisabledForm = false;

        try
        {
            if (pageViewModel.DividendId > 0)
            {
                ErrorMessage = await BackEndClass.Edit(pageViewModel);
                ShowOrHideEditButton = true;
            }
            else
            {
                ErrorMessage = await BackEndClass.Add(pageViewModel, false);
                ShowOrHideAddNewButton = true;
            }

            if (!string.IsNullOrEmpty(ErrorMessage))
            {
                ShowOrHideAddOrEditForm = true;
                ShowOrHideErrorMessage = true;
                return;
            }
            else
            {
                pageViewModel = new();
                await RefreshPage();
            }
        }
        catch (Exception ex)
        {
            ShowErrorMessage($"Lägg till eller ändra. Felmeddelande: {ex.Message}");
        }
    }

    private void Info(SharesDividendViewModel vm)
    {
        ShowOrHideAddOrEditForm = !ShowOrHideAddOrEditForm;
        ShowOrHideCreateButton = false;
        ShowOrHideEditButton = false;
        ShowOrHideAddNewButton = false;
        DisabledForm = true;
        pageViewModel = vm;
    }

    private void Edit(SharesDividendViewModel vm)
    {
        if (vm.DividendId == 0)
        {
            ShowErrorMessage($"Går inte att ändra utdelningen. ID = {vm.DividendId}!");
            return;
        }

        DisabledForm = false;
        ShowOrHideEditButton = true;
        ShowOrHideAddNewButton = false;
        ShowOrHideCreateButton = false;
        ShowOrHideAddOrEditForm = true;
        pageViewModel = vm;
    }

    private async Task Delete()
    {
        try
        {
            await using ApplicationDbContext db = await IDbContextFactory.CreateDbContextAsync() ?? throw new Exception("Delete: db == null!");

            if (!db.SharesDividends.Any())
            {
                ShowErrorMessage("Det finns inga utdelningar att ta bort!");
                return;
            }

            SharesDividend? model = await db.SharesDividends.FirstOrDefaultAsync(a => a.DividendId == TemporaryId);
            if (model == null)
            {
                ShowErrorMessage("Hittar ingen utdelning att ta bort!");
                return;
            }

            ErrorMessage = await BackEndClass.Delete(model);

            if (!string.IsNullOrEmpty(ErrorMessage))
                ShowOrHideErrorMessage = true;
            else
            {
                pageViewModel = new();
                await RefreshPage();
            }
        }
        catch (Exception ex)
        {
            ShowErrorMessage($"Ta bort. Felmeddelande: {ex.Message}");
        }
    }

    private void ToggleModal(ref string modalDisplay, ref string modalClass, ref bool showBackdrop, bool isOpen)
    {
        modalDisplay = isOpen ? "block;" : "none";
        modalClass = isOpen ? "Show" : "";
        showBackdrop = isOpen;
        StateHasChanged();
    }

    private void OpenDeleteWindow(SharesDividendViewModel vm)
    {
        TemporaryId = vm.DividendId;
        ToggleModal(ref ModalDisplay, ref ModalClass, ref ShowBackdrop, true);
    }

    private void CloseDeleteWindow() => ToggleModal(ref ModalDisplay, ref ModalClass, ref ShowBackdrop, false);
}