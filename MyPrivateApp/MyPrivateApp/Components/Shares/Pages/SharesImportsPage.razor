@page "/SharesImportsPage"

@using MyPrivateApp.Client.ViewModels
@using MyPrivateApp.Components.Enum
@using MyPrivateApp.Components.Shares.Classes
@using MyPrivateApp.Components.ViewModels.SharesViewModels
@using MyPrivateApp.Data
@using MyPrivateApp.Data.Models
@using Microsoft.AspNetCore.Components.QuickGrid
@using MyPrivateApp.Data.Models.SharesModels
@using OfficeOpenXml;

@rendermode InteractiveServer

@inject ApplicationDbContext db
@inject NavigationManager Navigation
@inject ISharesImportsFileClass SharesImportsFileClass
@inject ISharesPurchasedClass SharesPurchasedClass
@inject ISharesPurchasedFundsClass SharesPurchasedFundsClass
@inject ISharesSoldFundsClass SharesSoldFundsClass
@inject ISharesDepositMoneyClass SharesDepositMoneyClass
@inject ISharesDividendClass SharesDividendClass
@inject ISharesFeeClass SharesFeeClass
@inject ISharesInterestRatesClass SharesInterestRatesClass
@inject ISharesOtherImportsClass SharesOtherImports
@inject ISharesSoldClass SharesSoldClass

<PageTitle> Aktier </PageTitle>

<br />

@* Header *@
<div>

    @* Navigation - Desktop *@
    <div id="desktop" style="text-align:center">
        <div class="btn-group">
            <NavLink href="SharesPage" type="button" class="btn btn-outline-dark btn-sm"> Start </NavLink>
            <NavLink href="SharesImportsPage" type="button" class="btn btn-outline-dark btn-sm"> Importera </NavLink>
            <NavLink href="SharesPurchasedPage" type="button" class="btn btn-outline-dark btn-sm"> Köpta aktier </NavLink>
            <NavLink href="SharesSoldPage" type="button" class="btn btn-outline-dark btn-sm">Sålda aktier</NavLink>
            <NavLink href="SharesPurchasedFundsPage" type="button" class="btn btn-outline-dark btn-sm"> Köpta fonder </NavLink>
            <NavLink href="SharesSoldFundsPage" type="button" class="btn btn-outline-dark btn-sm"> Sålda fonder </NavLink>
            <NavLink href="SharesDividendPage" type="button" class="btn btn-outline-dark btn-sm">Utdelningar</NavLink>
            <NavLink href="SharesFeePage" type="button" class="btn btn-outline-dark btn-sm">Avgifter</NavLink>
            <NavLink href="SharesDepositMoneyPage" type="button" class="btn btn-outline-dark btn-sm"> Banköverföringar </NavLink>
            <NavLink href="SharesInterestRatesPage" type="button" class="btn btn-outline-dark btn-sm"> Räntor </NavLink>
            <NavLink href="SharesOtherImportsPage" type="button" class="btn btn-outline-dark btn-sm"> Manuell hantering </NavLink>
            <NavLink href="SharesErrorHandlingPage" type="button" class="btn btn-outline-dark btn-sm">Felhantering</NavLink>
        </div>
    </div>

    @* Navigation - Mobile *@
    <div id="mobile">
        <div class="btn-group" role="group">
            <button title="Info" id="btnGroupDrop1" type="button" class="btn btn-outline-secondary btn-sm dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">
                Alla aktier sidor
            </button>
            <ul class="dropdown-menu" aria-labelledby="btnGroupDrop1">
                <li class="dropdown-item"><NavLink href="SharesPage" type="button" class="btn btn-outline-dark btn-sm"> Start </NavLink></li>
                <li class="dropdown-item"><NavLink href="SharesImportsPage" type="button" class="btn btn-outline-dark btn-sm"> Importera </NavLink></li>
                <li class="dropdown-item"><NavLink href="SharesPurchasedPage" type="button" class="btn btn-outline-dark btn-sm"> Köpta aktier </NavLink></li>
                <li class="dropdown-item"><NavLink href="SharesSoldPage" type="button" class="btn btn-outline-dark btn-sm">Sålda aktier</NavLink></li>
                <li class="dropdown-item"><NavLink href="SharesPurchasedFundsPage" type="button" class="btn btn-outline-dark btn-sm"> Köpta fonder </NavLink></li>
                <li class="dropdown-item"><NavLink href="SharesSoldFundsPage" type="button" class="btn btn-outline-dark btn-sm"> Sålda fonder </NavLink></li>
                <li class="dropdown-item"><NavLink href="SharesDividendPage" type="button" class="btn btn-outline-dark btn-sm">Utdelningar</NavLink></li>
                <li class="dropdown-item"><NavLink href="SharesFeePage" type="button" class="btn btn-outline-dark btn-sm">Avgifter</NavLink></li>
                <li class="dropdown-item"><NavLink href="SharesDepositMoneyPage" type="button" class="btn btn-outline-dark btn-sm"> Banköverföringar </NavLink></li>
                <li class="dropdown-item"><NavLink href="SharesInterestRatesPage" type="button" class="btn btn-outline-dark btn-sm"> Räntor </NavLink></li>
                <li class="dropdown-item"><NavLink href="SharesOtherImportsPage" type="button" class="btn btn-outline-dark btn-sm"> Manuell hantering </NavLink></li>
                <li class="dropdown-item"><NavLink href="SharesErrorHandlingPage" type="button" class="btn btn-outline-dark btn-sm">Felhantering</NavLink></li>
            </ul>
        </div>
    </div>

    <div>

        <br />

        <h1 style="text-align:center"> Import från Avanza </h1>

        <div style="text-align:center" hidden="@ShowOrHideCreateButton">

            <br />

            <button class="btn btn-outline-success btn-sm" @onclick="@HideNewOrChangesForm"> Ny import </button>
        </div>

        <div style="text-align:center" hidden="@ShowOrHideErrorMessage">
            <br />
            <br />
            <Alert Color="AlertColor.Danger"> <Icon Name="IconName.ExclamationTriangleFill" class="me-2"></Icon> <b>@ErrorMessage</b> </Alert>
        </div>

        <br />
        <br />

    </div>

    <div hidden="@LoadingDataFromFil">
        <div class="loading-section">
            <h2>Laddar importen...</h2>
            <div class="short-description">Vänta tills laddningen är klar</div>
            <div class="loader mt-5">
                <div class="loader-dot dot1"></div>
                <div class="loader-dot dot2"></div>
                <div class="loader-dot dot3"></div>
            </div>
        </div>
    </div>

    <br />
    <br />

</div>

<div class="container">
    <div class="col-md-12">
        <div class="card">

            @* Form *@
            <div class="card-header">
                <EditForm Model="SharesImportsFile" OnSubmit="AddOrEdit" FormName="AddOrUpdateSharesImportsFile" Enhance hidden="@(!HideNewOrChangesFields)">

                    <DataAnnotationsValidator />

                    <ValidationSummary class="text-danger" role="alert" />

                    <div class="row">

                        <div id="mobile" class="col-3" />

                        <div class="col-3">
                            <div class="form-floating">
                                <InputDate @bind-Value="SharesImportsFile.Date" class="form-control" disabled="@DisabledForm" />
                                <label for="Date"> Datum </label>
                                <ValidationMessage For="() => SharesImportsFile.Date" class="text-danger" />
                            </div>
                        </div>

                        <div class="col-3">
                            <div class="form-floating">
                                <InputFile class="form-control" OnChange="ImportExcelFile" accept=".xlsx" disabled="@UnDisabledFileField" />
                                <label for="File"> Excel fil (.xlsx) </label>
                            </div>
                        </div>

                        <div class="col-3">
                            <div class="form-floating">
                                <InputText @bind-Value="SharesImportsFile.FileName" class="form-control" disabled="@true" />
                                <label for="FileName"> Filnamn </label>
                                <ValidationMessage For="() => SharesImportsFile.FileName" class="text-danger" />
                            </div>
                        </div>

                        <div class="col-3">
                            <div class="form-floating">
                                <InputNumber @bind-Value="SharesImportsFile.NumbersOfTransaction" class="form-control" disabled="@true" />
                                <label for="NumbersOfTransaction"> Antal transaktion </label>
                                <ValidationMessage For="() => SharesImportsFile.NumbersOfTransaction" class="text-danger" />
                            </div>
                        </div>

                    </div>

                    <br />

                    <div class="row">
                        <div class="col-12">
                            <div class="form-floating">
                                <InputTextArea @bind-Value="SharesImportsFile.Errors" class="form-control" disabled="@true" />
                                <label for="Errors"> Felmedelanden </label>
                                <ValidationMessage For="() => SharesImportsFile.Errors" class="text-danger" />
                            </div>
                        </div>
                    </div>

                    <br />

                    <div class="row">
                        <div class="col-12">
                            <div class="form-floating">
                                <InputTextArea rows="4" style="height:100%;" @bind-Value="SharesImportsFile.Note" class="form-control" disabled="@DisabledForm" />
                                <label for="Note"> Anteckningar </label>
                                <ValidationMessage For="() => SharesImportsFile.Note" class="text-danger" />
                            </div>
                        </div>
                    </div>

                    <br />

                    <div style="text-align:center">
                        <button hidden="@ShowOrHideAddNewButton" @onclick="HideNewOrChangesForm" type="submit" style="text-align:center" class="btn btn-outline-success btn-sm"> Lägg till import </button>
                    </div>

                    <div style="text-align:center">
                        <button @onclick="HideNewOrChangesForm" hidden="@ShowOrHideEditButton" type="submit" style="text-align:center" class="btn btn-outline-warning btn-sm"> Ändra </button>
                    </div>

                    <br />

                    <div style="text-align:center">
                        <button @onclick="RefreshPage" type="button" style="text-align:center" class="btn btn-outline-secondary btn-sm"> Tillbaka </button>
                    </div>

                    <br />
                    <br />
                </EditForm>
            </div>

            @* View - Desktop *@
            <div id="desktop">
                <div class="card-body">
                    <QuickGrid Items="@SharesImportsFilesQueryable" Pagination="pagination">

                        <PropertyColumn Title="Datum" Property="@(c => c.Date)" Format="yyyy-MM-dd" Sortable="true" />
                        <PropertyColumn Title="Filnamn" Property="@(c => c.FileName)" Sortable="true" />
                        <PropertyColumn Title="Antal transaktion" Property="@(c => c.NumbersOfTransaction)" Sortable="true" />
                        <PropertyColumn Title="Felmedelanden" Property="@(c => c.Errors)" Sortable="true" />
                        <PropertyColumn Title="Anteckningar" Property="@(c => c.Note)" Sortable="true" />

                        <TemplateColumn Title="Info">

                            <div class="btn-group" role="group">
                                <button title="Info" id="btnGroupDrop1" type="button" class="btn btn-outline-secondary btn-sm dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">
                                    Info
                                </button>
                                <ul class="dropdown-menu" aria-labelledby="btnGroupDrop1">
                                    <li class="dropdown-item"><button class="btn btn-outline-primary btn-sm" @onclick="@(() => ImportFile(context))"> Importera fil </button></li>
                                    <li class="dropdown-item"><button class="btn btn-outline-info btn-sm" @onclick="@(() => Info(context))"> All info </button></li>
                                    <li class="dropdown-item"><button class="btn btn-outline-warning btn-sm" @onclick="@(() => Edit(context))"> Ändra </button></li>
                                    <li class="dropdown-item"><button class="btn btn-outline-danger btn-sm" @onclick="@(() => OpenDeleteWindow())"> Ta bort </button></li>
                                </ul>
                            </div>

                            <div class="modal @ModalClass" tabindex="-1" role="dialog" style="display:@ModalDisplay">
                                <div class="modal-dialog" role="document">
                                    <div class="modal-content">
                                        <div class="modal-header">
                                            <h5 class="modal-title"> Vill du ta bort importen? </h5>
                                        </div>
                                        <div class="modal-footer">
                                            <button type="button" class="btn btn-outline-danger" @onclick="@(() => Delete(context))"> Ta bort importen </button>
                                            <button type="button" class="btn btn-outline-secondary" data-dismiss="modal" @onclick="() => CloseWindow()"> Ångra </button>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            @if (ShowBackdrop)
                            {
                                <div class="modal-backdrop fade show"></div>
                            }

                        </TemplateColumn>
                    </QuickGrid>

                    <div class="card-footer"><Paginator State="@pagination" /></div>

                    <br />
                    <br />

                </div>
            </div>


            @* View - Mobile *@
            <div id="mobile">
                <div class="card-body" style="width:auto">
                    <QuickGrid Items="@SharesImportsFilesQueryable" Pagination="pagination" Virtualize="true">

                        <PropertyColumn Title="Filnamn" Property="@(c => c.FileName)" Sortable="true" />

                        <TemplateColumn Title="Info">

                            <div class="btn-group" role="group">
                                <button title="Info" id="btnGroupDrop1" type="button" class="btn btn-outline-secondary btn-sm dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">
                                    Info
                                </button>
                                <ul class="dropdown-menu" aria-labelledby="btnGroupDrop1">
                                    <li class="dropdown-item"><button class="btn btn-outline-primary btn-sm" @onclick="@(() => ImportFile(context))"> Importera fil </button></li>
                                    <li class="dropdown-item"><button class="btn btn-outline-info btn-sm" @onclick="@(() => Info(context))"> All info </button></li>
                                    <li class="dropdown-item"><button class="btn btn-outline-warning btn-sm" @onclick="@(() => Edit(context))"> Ändra </button></li>
                                    <li class="dropdown-item"><button class="btn btn-outline-danger btn-sm" @onclick="@(() => OpenDeleteWindow())"> Ta bort </button></li>
                                </ul>
                            </div>

                            <div class="modal @ModalClass" tabindex="-1" role="dialog" style="display:@ModalDisplay">
                                <div class="modal-dialog" role="document">
                                    <div class="modal-content">
                                        <div class="modal-header">
                                            <h5 class="modal-title"> Vill du ta bort importen? </h5>
                                        </div>
                                        <div class="modal-footer">
                                            <button type="button" class="btn btn-outline-danger" @onclick="@(() => Delete(context))"> Ta bort importen </button>
                                            <button type="button" class="btn btn-outline-secondary" data-dismiss="modal" @onclick="() => CloseWindow()"> Ångra </button>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            @if (ShowBackdrop)
                            {
                                <div class="modal-backdrop fade show"></div>
                            }

                        </TemplateColumn>

                    </QuickGrid>

                    <br />
                    <br />

                </div>
            </div>
        </div>

    </div>
</div>

<div class="footer" align="center">

    <br />
    <br />

    <p> Copyright 2023 - @DateTime.Now.Year</p>

    <br />
    <br />

</div>

@code {

    [SupplyParameterFromForm]
    private SharesImportsFileViewModel SharesImportsFile { get; set; } = new();

    PaginationState pagination = new PaginationState { ItemsPerPage = 10 };
    private IQueryable<SharesImportsFileViewModel> SharesImportsFilesQueryable = Enumerable.Empty<SharesImportsFileViewModel>().AsQueryable();

    // Modol window settings
    private Guid Guid = Guid.NewGuid();
    private string ModalDisplay = "none;";
    private string ModalClass = "";
    private bool ShowBackdrop = false;

    // Hide button and fields
    private bool HideNewOrChangesFields { get; set; } = false;
    private bool ShowOrHideCreateButton { get; set; } = false;
    private bool ShowOrHideEditButton { get; set; } = false;
    private bool ShowOrHideAddNewButton { get; set; } = false;
    private bool DisabledForm { get; set; } = false;
    private bool UnDisabledFileField { get; set; } = true;
    private bool LoadingDataFromFil { get; set; } = true;
    private bool ShowOrHideErrorMessage { get; set; } = true;

    // Text messeges
    private string ErrorMessage { get; set; } = string.Empty;

    // Load data from database to the Queryable container
    private void ConvertListToQueryable()
    {
        if (db.SharesImportsFiles.Count() == 0) return;

        SharesImportsFilesQueryable = Enumerable.Empty<SharesImportsFileViewModel>().AsQueryable();

        foreach (SharesImportsFile model in db.SharesImportsFiles.OrderBy(c => c.SharesImportsFileId))
        {
            SharesImportsFileViewModel vm = SharesImportsFileClass.ChangeFromModelToViewModel(model);
            SharesImportsFilesQueryable = SharesImportsFilesQueryable.Concat(new[] { vm }.AsQueryable());
        }

        pagination.TotalItemCountChanged += (sender, EventArgs) => StateHasChanged();
    }

    protected override void OnInitialized() => ConvertListToQueryable();

    private void HideNewOrChangesForm()
    {
        HideNewOrChangesFields = !HideNewOrChangesFields;
        ShowOrHideCreateButton = true;
        ShowOrHideEditButton = true;
    }

    private void RefreshPage() => Navigation.Refresh(true);

    private void AddOrEdit()
    {
        DisabledForm = false;

        if (SharesImportsFile.SharesImportsFileId > 0)
        {
            // Edit
            ErrorMessage = SharesImportsFileClass.Edit(db, SharesImportsFile);

            if (!string.IsNullOrEmpty(ErrorMessage))
            {
                HideNewOrChangesForm();
                ShowOrHideErrorMessage = false;
                ShowOrHideEditButton = false;
                return;
            }
            else
            {
                SharesImportsFile = new();
                Navigation.Refresh(true);
                return;
            }
        }
        else
        {
            // Add
            ErrorMessage = SharesImportsFileClass.Add(db, SharesImportsFile, false);

            if (!string.IsNullOrEmpty(ErrorMessage))
            {
                HideNewOrChangesForm();
                ShowOrHideErrorMessage = false;
                ShowOrHideEditButton = true;
                ShowOrHideAddNewButton = false;
                return;
            }
            else
            {
                SharesImportsFile = new();
                Navigation.Refresh(true);
                return;
            }
        }
    }

    private void Info(SharesImportsFileViewModel vm)
    {
        HideNewOrChangesForm();
        ShowOrHideAddNewButton = true;
        DisabledForm = true;
        SharesImportsFile = vm;
    }

    private void Edit(SharesImportsFileViewModel vm)
    {
        DisabledForm = false;
        ShowOrHideEditButton = false;
        ShowOrHideAddNewButton = true;
        HideNewOrChangesFields = true;
        SharesImportsFile = vm;
    }

    private void Delete(SharesImportsFileViewModel vm)
    {
        if (db.SharesImportsFiles.Count() == 0) return;

        SharesImportsFileClass.Delete(db, vm, false);

        SharesImportsFile = new();
        Navigation.Refresh(true);
    }

    private void OpenDeleteWindow()
    {
        ModalDisplay = "block;";
        ModalClass = "Show";
        ShowBackdrop = true;
        StateHasChanged();
    }

    private void CloseWindow()
    {
        ModalDisplay = "none";
        ModalClass = "";
        ShowBackdrop = false;
        StateHasChanged();
    }

    private void ImportFile(SharesImportsFileViewModel vm)
    {
        HideNewOrChangesForm();
        ShowOrHideAddNewButton = true;
        DisabledForm = true;
        UnDisabledFileField = false;
        SharesImportsFile = vm;
    }

    private async Task ImportExcelFile(InputFileChangeEventArgs e)
    {
        SharesImportsFile importModel = db.SharesImportsFiles.FirstOrDefault(r => r.SharesImportsFileId == SharesImportsFile.SharesImportsFileId);

        int rowCount = 0;
        int transactionCounter = 0;
        string fileName = string.Empty;

        try
        {
            RefreshPage();

            LoadingDataFromFil = true;

            foreach (IBrowserFile file in e.GetMultipleFiles(1))
            {
                fileName = file.Name;

                using (MemoryStream ms = new MemoryStream())
                {
                    // copy data from file to memory stream
                    await file.OpenReadStream().CopyToAsync(ms);
                    // positions the cursor at the beginning of the memory stream
                    ms.Position = 0;

                    // create ExcelPackage from memory stream
                    ExcelPackage.LicenseContext = LicenseContext.NonCommercial;
                    using (ExcelPackage package = new ExcelPackage(ms))
                    {
                        ExcelWorksheet ws = package.Workbook.Worksheets.FirstOrDefault();
                        int colCount = ws.Dimension.End.Column;
                        rowCount = ws.Dimension.End.Row;

                        List<SharesImports> importList = new();
                        SharesImports setImport;

                        for (int i = 2; i < rowCount + 1; i++)
                        {
                            setImport = new()
                                {
                                    Date = ws.Cells[i, 1].Value == null ? string.Empty : ws.Cells[i, 1].Value.ToString(),
                                    AccountNumber = ws.Cells[i, 2].Value == null ? string.Empty : ws.Cells[i, 2].Value.ToString(),
                                    TypeOfTransaction = ws.Cells[i, 3].Value == null ? string.Empty : ws.Cells[i, 3].Value.ToString(),
                                    CompanyOrInformation = ws.Cells[i, 4].Value == null ? string.Empty : ws.Cells[i, 4].Value.ToString(),
                                    NumberOfSharesString = ws.Cells[i, 5].Value == null ? string.Empty : ws.Cells[i, 5].Value.ToString(),
                                    PricePerShareString = ws.Cells[i, 6].Value == null ? string.Empty : ws.Cells[i, 6].Value.ToString(),
                                    AmountString = ws.Cells[i, 7].Value == null ? string.Empty : ws.Cells[i, 7].Value.ToString(),
                                    BrokerageString = ws.Cells[i, 8].Value == null ? string.Empty : ws.Cells[i, 8].Value.ToString(),
                                    Currency = ws.Cells[i, 9].Value == null ? string.Empty : ws.Cells[i, 9].Value.ToString(),
                                    ISIN = ws.Cells[i, 10].Value == null ? string.Empty : ws.Cells[i, 10].Value.ToString()
                                };

                            importList.Add(setImport);
                        }

                        foreach (var import in importList)
                        {
                            switch (import.TypeOfTransaction)
                            {
                                case "Köp":
                                    AddSharesImport(import);
                                    break;
                                case "Sälj":
                                    SoldShareImport(import);
                                    break;
                                case "FondKöp":
                                    AddFundImport(import);
                                    break;
                                case "FondSälj":
                                    SoldFundImport(import);
                                    break;
                                case "Utdelning":
                                    DividendImport(import);
                                    break;
                                case "Insättning":
                                    DepositMoneyImport(import);
                                    break;
                                case "Uttag":
                                    DepositMoneyImport(import);
                                    break;
                                case "Ränta":
                                    InterestRatesImport(import);
                                    break;
                                default:
                                    OtherImports(import);
                                    break;
                            }

                            transactionCounter++;

                            Thread.Sleep(2000);
                        }
                    }
                }

                try
                {
                    importModel.FileName = fileName;
                    importModel.NumbersOfTransaction = rowCount - 1;
                    importModel.Note = $"Färdiga transaktion: {transactionCounter} av {rowCount - 1}";

                    db.SaveChanges();
                }
                catch (Exception ex)
                {
                    importModel.Errors += $"Spara till databasen: Fel på rad {transactionCounter + 1}. Felmeddelande: {ex.Message}";
                    importModel.FileName = fileName;
                    importModel.NumbersOfTransaction = transactionCounter;
                    importModel.Note = $"Färdiga transaktion: {transactionCounter} av {rowCount - 1}";

                    db.SaveChanges();

                    RefreshPage();
                }
            }

            RefreshPage();
        }
        catch (Exception exc)
        {
            importModel.Errors += $"Övergripande: Fel på rad {transactionCounter + 1}. Felmeddelande: {exc.Message}";
            importModel.FileName = fileName;
            importModel.NumbersOfTransaction = transactionCounter;
            importModel.Note = $"Färdiga transaktion: {transactionCounter} av {rowCount - 1}";

            db.SaveChanges();

            RefreshPage();
        }
    }

    private void AddSharesImport(SharesImports import)
    {
        SharesPurchasedViewModel vm = SharesPurchasedClass.ChangeFromImportAddToViewModel(import);
        bool sharesExist = db.SharesPurchaseds.Any(r => r.ISIN == import.ISIN);

        if (sharesExist)
            SharesPurchasedClass.AddMore(db, vm, true);
        else
            SharesPurchasedClass.Add(db, vm, true);
    }

    private void SoldShareImport(SharesImports import)
    {
        SharesPurchasedViewModel vm = SharesPurchasedClass.ChangeFromImportSellToViewModel(import);
        bool sharesExist = db.SharesPurchaseds.Any(r => r.ISIN == import.ISIN);

        if (sharesExist)
            SharesPurchasedClass.Sell(db, vm, true, SharesFeeClass);
        else
        {
            DateTime date = DateTime.Now;

            SharesErrorHandlings sharesErrorHandling = new()
                {
                    Date = $"{date.Year}-{date.Month}-{date.Day}",
                    ErrorMessage = $"Felmeddelande: Aktien jag försöker sälja finns inte i databasen!",
                    Note = $"Säljdatum: {vm.DateOfPurchase} \r\nImport: Ja \r\nAktien: {vm.CompanyName} \r\nISIN: {vm.ISIN}."
                };

            db.SharesErrorHandlings.Add(sharesErrorHandling);
            db.SaveChanges();
        }
    }

    private void AddFundImport(SharesImports import)
    {
        SharesPurchasedFundViewModel vm = SharesPurchasedFundsClass.ChangeFromImportAddToViewModel(import);
        bool sharesExist = db.SharesPurchasedFunds.Any(r => r.ISIN == import.ISIN);

        if (sharesExist)
            SharesPurchasedFundsClass.AddMore(db, vm, true);
        else
            SharesPurchasedFundsClass.Add(db, vm, true);
    }

    private void SoldFundImport(SharesImports import)
    {
        SharesPurchasedFundViewModel vm = SharesPurchasedFundsClass.ChangeFromImportSellToViewModel(import);
        bool sharesExist = db.SharesPurchasedFunds.Any(r => r.ISIN == import.ISIN);

        if (sharesExist)
            SharesPurchasedFundsClass.Sell(db, vm, true, SharesFeeClass);
        else
        {
            DateTime date = DateTime.Now;

            SharesErrorHandlings sharesErrorHandling = new()
                {
                    Date = $"{date.Year}-{date.Month}-{date.Day}",
                    ErrorMessage = $"Felmeddelande: Fonden jag försöker sälja finns inte i databasen!",
                    Note = $"Säljdatum: {vm.DateOfPurchase} \r\nImport: Ja \r\nFonden: {vm.FundName} \r\nISIN: {vm.ISIN}."
                };

            db.SharesErrorHandlings.Add(sharesErrorHandling);
            db.SaveChanges();
        }
    }

    private void DividendImport(SharesImports import)
    {
        SharesDividendViewModel vm = SharesDividendClass.ChangeFromImportToViewModel(import);
        SharesDividendClass.Add(db, vm, true);
    }

    private void DepositMoneyImport(SharesImports import)
    {
        SharesDepositMoneyViewModel vm = SharesDepositMoneyClass.ChangeFromImportToViewModel(import);
        SharesDepositMoneyClass.Add(db, vm, true);
    }

    private void InterestRatesImport(SharesImports import)
    {
        SharesInterestRatesViewModel vm = SharesInterestRatesClass.ChangeFromImportToViewModel(import);
        SharesInterestRatesClass.Add(db, vm, true);
    }

    private void OtherImports(SharesImports import)
    {
        SharesOtherShareImportViewModel vm = SharesOtherImports.ChangeFromImportToViewModel(import);
        SharesOtherImports.Add(db, vm, true);
    }
}