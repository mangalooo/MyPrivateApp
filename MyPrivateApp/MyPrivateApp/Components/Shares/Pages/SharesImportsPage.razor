@page "/SharesImportsPage"

@using Microsoft.AspNetCore.Components.QuickGrid
@using MyPrivateApp.Client.ViewModels
@using MyPrivateApp.Components.Enum
@using MyPrivateApp.Components.Shares.Classes
@using MyPrivateApp.Components.Shares.Classes.Interface
@using MyPrivateApp.Components.ViewModels.SharesViewModels
@using MyPrivateApp.Data
@using MyPrivateApp.Data.Models
@using MyPrivateApp.Data.Models.SharesModels
@using OfficeOpenXml;
@using static Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions

@rendermode @(new InteractiveServerRenderMode(prerender:false))

@inject ApplicationDbContext db
@inject NavigationManager Navigation
@inject ISharesImportsFileClass BackEndClass
@inject ISharesPurchasedClass SharesPurchasedClass
@inject ISharesPurchasedFundsClass SharesPurchasedFundsClass
@inject ISharesSoldFundsClass SharesSoldFundsClass
@inject ISharesDepositMoneyClass SharesDepositMoneyClass
@inject ISharesDividendClass SharesDividendClass
@inject ISharesFeeClass SharesFeeClass
@inject ISharesInterestRatesClass SharesInterestRatesClass
@inject ISharesOtherImportsClass SharesOtherImports
@inject ISharesSoldClass SharesSoldClass

<PageTitle> Aktier </PageTitle>

@* Header *@
<div>
    <div>

        @* Navigation *@
        <div class="navigation">
            <div id="desktop" align="center">
                <div class="btn-group">
                    @foreach (var item in NavigationItems)
                    {
                        <NavLink href="@item.Href" type="button" class="btn btn-outline-dark btn-sm"> @item.Text </NavLink>
                    }
                </div>
            </div>

            <div id="mobile">
                <div class="btn-group" role="group">
                    <button title="Info" id="btnGroupDrop1" type="button" class="btn btn-outline-secondary btn-sm dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">
                        Alla aktier sidor
                    </button>
                    <ul class="dropdown-menu" aria-labelledby="btnGroupDrop1">
                        @foreach (var item in NavigationItems)
                        {
                            <li class="dropdown-item">
                                <NavLink href="@item.Href" type="button" class="btn btn-outline-dark btn-sm"> @item.Text </NavLink>
                            </li>
                        }
                    </ul>
                </div>
            </div>
        </div>

        <br /> <br />

        <h1 align="center"> Import </h1>

        @if (ShowOrHideCreateButton)
        {
            <br />

            <div align="center">
                <button class="btn btn-outline-success btn-sm" @onclick="@ShowAddForm"> Ny import </button>
            </div>
        }

        @if (ShowOrHideErrorMessage)
        {
            <br />

            <div align="center">
                <Alert Color="AlertColor.Danger">
                    <Icon Name="IconName.ExclamationTriangleFill" class="me-2"></Icon>
                    <b>@ErrorMessage</b>
                </Alert>
            </div>
        }

        @if (ShowOrHideInfoMessage)
        {
            <br />

            <div align="center">
                <Alert Color="AlertColor.Info">
                    <b>@InfoMessage</b>
                </Alert>
            </div>
        }

        <br />

    </div>

    <div hidden="@LoadingDataFromFil">
        <div class="loading-section">
            <h2>Laddar importen...</h2>
            <div class="short-description">Vänta tills laddningen är klar</div>
            <div class="loader mt-5">
                <div class="loader-dot dot1"></div>
                <div class="loader-dot dot2"></div>
                <div class="loader-dot dot3"></div>
            </div>
        </div>
    </div>

    <br />

</div>

@* Form and views *@
<div class="container">
    <div class="col-md-12">
        <div class="card">

            @* Form *@
            <div>
                @if (ShowOrHideAddOrEditForm)
                {
                    <div class="card-header">
                        <EditForm Model="pageViewModel" OnSubmit="AddOrEdit" Enhance>

                            <div class="row">

                                <div id="mobile" class="col-3" />

                                <div class="col-3">
                                    <div class="form-floating">
                                        <InputDate @bind-Value="pageViewModel.Date" class="form-control" disabled="@DisabledForm" />
                                        <label for="Date"> Datum </label>
                                    </div>
                                </div>

                                <div class="col-3">
                                    <div class="form-floating">
                                        <InputFile class="form-control" OnChange="ImportExcelFile" accept=".xlsx" disabled="@UnDisabledFileField" />
                                        <label for="File"> Excel fil (.xlsx) </label>
                                    </div>
                                </div>

                                <div class="col-3">
                                    <div class="form-floating">
                                        <InputText @bind-Value="pageViewModel.FileName" class="form-control" disabled="@true" />
                                        <label for="FileName"> Filnamn </label>
                                    </div>
                                </div>

                                <div class="col-3">
                                    <div class="form-floating">
                                        <InputNumber @bind-Value="pageViewModel.NumbersOfTransaction" class="form-control" disabled="@true" />
                                        <label for="NumbersOfTransaction"> Antal transaktion </label>
                                    </div>
                                </div>

                            </div>

                            <br />

                            <div class="row">
                                <div class="col-12">
                                    <div class="form-floating">
                                        <InputTextArea rows="4" style="height:100%;" @bind-Value="pageViewModel.Errors" class="form-control" disabled="@true" />
                                        <label for="Errors"> Felmedelanden </label>
                                    </div>
                                </div>
                            </div>

                            <br />

                            <div class="row">
                                <div class="col-12">
                                    <div class="form-floating">
                                        <InputTextArea rows="4" style="height:100%;" @bind-Value="pageViewModel.Note" class="form-control" disabled="@DisabledForm" />
                                        <label for="Note"> Anteckningar </label>
                                    </div>
                                </div>
                            </div>

                            <br />

                            @if (ShowOrHideAddNewButton)
                            {
                                <div align="center">
                                    <button type="submit" align="center" class="btn btn-outline-success btn-sm"> Lägg till import </button>
                                </div>
                            }

                            @if (ShowOrHideEditButton)
                            {
                                <div align="center">
                                    <button type="submit" align="center" class="btn btn-outline-warning btn-sm"> Ändra </button>
                                </div>
                            }

                            <br />

                            <div align="center">
                                <button @onclick="RefreshPage" type="button" align="center" class="btn btn-outline-secondary btn-sm"> Tillbaka </button>
                            </div>

                            <br /><br />
                        </EditForm>
                    </div>
                }
            </div>

            @* View - Desktop *@
            <div id="desktop">
                <div class="card-body">
                    <QuickGrid Items="@queryable" Pagination="pagination">

                        <PropertyColumn Title="Datum" Property="@(c => c.Date)" Format="yyyy-MM-dd" Sortable="true" />
                        <PropertyColumn Title="Filnamn" Property="@(c => c.FileName)" Sortable="true" />
                        <PropertyColumn Title="Antal transaktion" Property="@(c => c.NumbersOfTransaction)" Sortable="true" />
                        <PropertyColumn Title="Felmedelanden" Property="@(c => c.Errors)" Sortable="true" />
                        <PropertyColumn Title="Anteckningar" Property="@(c => c.Note)" Sortable="true" />

                        <TemplateColumn Title="Info">

                            <div class="btn-group" role="group">
                                <button title="Info" id="btnGroupDrop1" type="button" class="btn btn-outline-secondary btn-sm dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">
                                    Info
                                </button>
                                <ul class="dropdown-menu" aria-labelledby="btnGroupDrop1">
                                    <li class="dropdown-item"><button class="btn btn-outline-primary btn-sm" @onclick="@(() => ImportFile(context))"> Importera fil </button></li>
                                    <li class="dropdown-item"><button class="btn btn-outline-info btn-sm" @onclick="@(() => Info(context))"> All info </button></li>
                                    <li class="dropdown-item"><button class="btn btn-outline-warning btn-sm" @onclick="@(() => Edit(context))"> Ändra </button></li>
                                    <li class="dropdown-item"><button class="btn btn-outline-danger btn-sm" @onclick="@(() => OpenDeleteWindow(context))"> Ta bort </button></li>
                                </ul>
                            </div>

                            <div class="modal @ModalClass" tabindex="-1" role="dialog" style="display:@ModalDisplay">
                                <div class="modal-dialog" role="document">
                                    <div class="modal-content">
                                        <div class="modal-header">
                                            <h5 class="modal-title"> Vill du ta bort importen? </h5>
                                        </div>
                                        <div class="modal-footer">
                                            <button type="button" class="btn btn-outline-danger" @onclick="@(() => Delete())"> Ta bort importen </button>
                                            <button type="button" class="btn btn-outline-secondary" data-dismiss="modal" @onclick="() => CloseDeleteWindow()"> Ångra </button>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            @if (ShowBackdrop)
                            {
                                <div class="modal-backdrop fade show"></div>
                            }

                        </TemplateColumn>
                    </QuickGrid>

                    <div class="card-footer"><Paginator State="@pagination" /></div>

                    <br /> <br />

                </div>
            </div>

            @* View - Mobile *@
            <div id="mobile">
                <div class="card-body" style="width:auto">
                    <QuickGrid Items="@queryable" Pagination="pagination" Virtualize="true">

                        <PropertyColumn Title="Filnamn" Property="@(c => c.FileName)" Sortable="true" />

                        <TemplateColumn Title="Info">

                            <div class="btn-group" role="group">
                                <button title="Info" id="btnGroupDrop1" type="button" class="btn btn-outline-secondary btn-sm dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">
                                    Info
                                </button>
                                <ul class="dropdown-menu" aria-labelledby="btnGroupDrop1">
                                    <li class="dropdown-item"><button class="btn btn-outline-primary btn-sm" @onclick="@(() => ImportFile(context))"> Importera fil </button></li>
                                    <li class="dropdown-item"><button class="btn btn-outline-info btn-sm" @onclick="@(() => Info(context))"> All info </button></li>
                                    <li class="dropdown-item"><button class="btn btn-outline-warning btn-sm" @onclick="@(() => Edit(context))"> Ändra </button></li>
                                    <li class="dropdown-item"><button class="btn btn-outline-danger btn-sm" @onclick="@(() => OpenDeleteWindow(context))"> Ta bort </button></li>
                                </ul>
                            </div>

                            <div class="modal @ModalClass" tabindex="-1" role="dialog" style="display:@ModalDisplay">
                                <div class="modal-dialog" role="document">
                                    <div class="modal-content">
                                        <div class="modal-header">
                                            <h5 class="modal-title"> Vill du ta bort importen? </h5>
                                        </div>
                                        <div class="modal-footer">
                                            <button type="button" class="btn btn-outline-danger" @onclick="@(() => Delete())"> Ta bort importen </button>
                                            <button type="button" class="btn btn-outline-secondary" data-dismiss="modal" @onclick="() => CloseDeleteWindow()"> Ångra </button>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            @if (ShowBackdrop)
                            {
                                <div class="modal-backdrop fade show"></div>
                            }

                        </TemplateColumn>

                    </QuickGrid>

                    <br /> <br />

                </div>
            </div>
        </div>
    </div>
</div>

@* Footer *@
<div>

    <br /> <br />

    <div class="footer" align="center">
        <p> Copyright 2023 - @DateTime.Now.Year</p>
    </div>

    <br /> <br />

</div>

@* Back-End *@
@code {

    [SupplyParameterFromForm]
    private SharesImportsFileViewModel pageViewModel { get; set; } = new();
    PaginationState pagination = new PaginationState { ItemsPerPage = 30 };
    private IQueryable<SharesImportsFileViewModel> queryable = Enumerable.Empty<SharesImportsFileViewModel>().AsQueryable();

    // Holds temporary id to delete items
    private int TemporaryId { get; set; } = 0;

    // Modol window settings
    private Guid Guid = Guid.NewGuid();
    private string ModalDisplay = "none;";
    private string ModalClass = "";
    private bool ShowBackdrop = false;

    // Hide button and fields
    private bool ShowOrHideAddOrEditForm { get; set; } = false;
    private bool ShowOrHideCreateButton { get; set; } = true;
    private bool ShowOrHideEditButton { get; set; } = false;
    private bool ShowOrHideAddNewButton { get; set; } = false;
    private bool DisabledForm { get; set; } = false;
    private bool UnDisabledFileField { get; set; } = true;
    private bool LoadingDataFromFil { get; set; } = true;

    // Text messeges
    private string ErrorMessage { get; set; } = string.Empty;
    private bool ShowOrHideErrorMessage { get; set; } = false;
    private string InfoMessage { get; set; } = string.Empty;
    private bool ShowOrHideInfoMessage { get; set; } = false;

    private void ShowErrorMessage(string errorMessage)
    {
        ErrorMessage = errorMessage;
        ShowOrHideErrorMessage = true;
    }

    // Navigation items
    private List<NavigationItem> NavigationItems = new()
    {
        new NavigationItem("SharesIndexYearsPage", "Start"),
        new NavigationItem("SharesImportsPage", "Importera"),
        new NavigationItem("SharesPurchasedPage", "Köpta aktier"),
        new NavigationItem("SharesSoldPage", "Sålda aktier"),
        new NavigationItem("SharesPurchasedFundsPage", "Köpta fonder"),
        new NavigationItem("SharesSoldFundsPage", "Sålda fonder"),
        new NavigationItem("SharesDividendPage", "Utdelningar"),
        new NavigationItem("SharesFeePage", "Avgifter"),
        new NavigationItem("SharesDepositMoneyPage", "Banköverföringar"),
        new NavigationItem("SharesInterestRatesPage", "Räntor"),
        new NavigationItem("SharesOtherImportsPage", "Manuell hantering"),
        new NavigationItem("SharesErrorHandlingPage", "Felhantering")
    };

    private class NavigationItem
    {
        public string Href { get; }
        public string Text { get; }

        public NavigationItem(string href, string text)
        {
            Href = href;
            Text = text;
        }
    }

    // Load data from database to the Queryable container
    private async Task ConvertListToQueryableAsync()
    {
        List<SharesImportsFile> items = await db.SharesImportsFiles.OrderByDescending(c => c.Date).ToListAsync();

        if (!items.Any())
        {
            InfoMessage = "Finns ingen data att visa!";
            ShowOrHideInfoMessage = true;
            return;
        }

        queryable = items
            .Select(model => BackEndClass.ChangeFromModelToViewModel(model))
            .AsQueryable();

        pagination.TotalItemCountChanged += (sender, EventArgs) => StateHasChanged();
    }

    protected override async Task OnInitializedAsync() => await ConvertListToQueryableAsync();

    private async Task RefreshPage() => await Task.Run(() => Navigation.Refresh(true));

    private void ShowAddForm()
    {
        ShowOrHideAddOrEditForm = true;
        ShowOrHideAddNewButton = true;
    }

    private async Task AddOrEdit()
    {
        DisabledForm = false;

        try
        {
            if (pageViewModel.SharesImportsFileId > 0)
            {
                ErrorMessage = await BackEndClass.Edit(pageViewModel);
                ShowOrHideEditButton = true;
            }
            else
            {
                ErrorMessage = await BackEndClass.Add(pageViewModel);
                ShowOrHideAddNewButton = true;
            }

            if (!string.IsNullOrEmpty(ErrorMessage))
            {
                ShowOrHideAddOrEditForm = true;
                ShowOrHideErrorMessage = true;
                return;
            }
            else
            {
                pageViewModel = new();
                await RefreshPage();
            }
        }
        catch (Exception ex)
        {
            ShowErrorMessage($"Ett fel uppstod 1: {ex.Message}");
        }
    }

    private void Info(SharesImportsFileViewModel vm)
    {
        ShowOrHideAddOrEditForm = !ShowOrHideAddOrEditForm;
        ShowOrHideCreateButton = false;
        ShowOrHideEditButton = false;
        ShowOrHideAddNewButton = false;
        DisabledForm = true;
        pageViewModel = vm;
    }

    private void Edit(SharesImportsFileViewModel vm)
    {
        if (vm.SharesImportsFileId == 0)
        {
            ShowErrorMessage($"Går inte att ändra gårdsarbetet. ID = {vm.SharesImportsFileId}!");
            return;
        }

        DisabledForm = false;
        ShowOrHideEditButton = true;
        ShowOrHideAddNewButton = false;
        ShowOrHideCreateButton = false;
        ShowOrHideAddOrEditForm = true;
        pageViewModel = vm;
    }

    private async Task Delete()
    {
        if (!db.SharesImportsFiles.Any())
        {
            ShowErrorMessage("Det finns inga importer att ta bort!");
            return;
        }

        try
        {
            SharesImportsFile? model = await db.SharesImportsFiles.FirstOrDefaultAsync(a => a.SharesImportsFileId == TemporaryId);
            if (model == null)
            {
                ShowErrorMessage("Hittar ingen import att ta bort!");
                return;
            }

            ErrorMessage = await BackEndClass.Delete(model);

            if (!string.IsNullOrEmpty(ErrorMessage))
                ShowOrHideErrorMessage = true;
            else
            {
                pageViewModel = new();
                await RefreshPage();
            }
        }
        catch (Exception ex)
        {
            ShowErrorMessage($"Ett fel uppstod 2: {ex.Message}");
        }
    }

    private void ToggleModal(ref string modalDisplay, ref string modalClass, ref bool showBackdrop, bool isOpen)
    {
        modalDisplay = isOpen ? "block;" : "none";
        modalClass = isOpen ? "Show" : "";
        showBackdrop = isOpen;
        StateHasChanged();
    }

    private void OpenDeleteWindow(SharesImportsFileViewModel vm)
    {
        TemporaryId = vm.SharesImportsFileId;
        ToggleModal(ref ModalDisplay, ref ModalClass, ref ShowBackdrop, true);
    }

    private void CloseDeleteWindow() => ToggleModal(ref ModalDisplay, ref ModalClass, ref ShowBackdrop, false);

    private void ImportFile(SharesImportsFileViewModel vm)
    {
        ShowOrHideAddOrEditForm = !ShowOrHideAddOrEditForm;
        ShowOrHideAddNewButton = true;
        DisabledForm = true;
        UnDisabledFileField = false;
        pageViewModel = vm;
    }

    private async Task ImportExcelFile(InputFileChangeEventArgs e)
    {
        int rowCount = 0;
        int transactionCounter = 0;
        string fileName = string.Empty;

        try
        {
            await RefreshPage();
            LoadingDataFromFil = true;

            foreach (IBrowserFile file in e.GetMultipleFiles(1))
            {
                fileName = file.Name;

                using (MemoryStream ms = new MemoryStream())
                {
                    await file.OpenReadStream().CopyToAsync(ms);
                    ms.Position = 0;

                    ExcelPackage.LicenseContext = LicenseContext.NonCommercial;
                    using (ExcelPackage package = new ExcelPackage(ms))
                    {
                        ExcelWorksheet? ws = package.Workbook.Worksheets.FirstOrDefault();

                        if (ws == null)
                        {
                            ShowErrorMessage("ExcelWorksheet == null!");
                            return;
                        }

                        rowCount = ws.Dimension.End.Row;
                        List<SharesImports> importList = ExtractImportsFromWorksheet(ws, rowCount);

                        string errorMessage = string.Empty; 

                        foreach (var import in importList)
                        {
                            errorMessage = await ProcessImport(import);

                            if(!string.IsNullOrEmpty(errorMessage))
                            {
                                await HandleImportError(errorMessage + $". ISIN: {import.ISIN}", fileName, transactionCounter, rowCount);
                                break;
                            }

                            transactionCounter++;
                        }
                    }
                }
                await UpdateImportModel(fileName, rowCount, transactionCounter);
            }
            await RefreshPage();
        }
        catch (Exception exc)
        {
            await HandleImportError(exc.Message, fileName, transactionCounter, rowCount);
        }
    }

    private List<SharesImports> ExtractImportsFromWorksheet(ExcelWorksheet ws, int rowCount)
    {
        List<SharesImports> importList = new();
        for (int i = 2; i <= rowCount; i++)
        {
            importList.Add(new SharesImports
                {
                    Date = ws.Cells[i, 1].Value?.ToString() ?? string.Empty,
                    AccountNumber = ws.Cells[i, 2].Value?.ToString(),
                    TypeOfTransaction = ws.Cells[i, 3].Value?.ToString(),
                    CompanyOrInformation = ws.Cells[i, 4].Value?.ToString() ?? string.Empty,
                    NumberOfSharesString = ws.Cells[i, 5].Value?.ToString() ?? string.Empty,
                    PricePerShareString = ws.Cells[i, 6].Value?.ToString() ?? string.Empty,
                    AmountString = ws.Cells[i, 7].Value?.ToString() ?? string.Empty,
                    BrokerageString = ws.Cells[i, 8].Value?.ToString() ?? string.Empty,
                    Currency = ws.Cells[i, 9].Value?.ToString(),
                    ISIN = ws.Cells[i, 10].Value?.ToString() ?? string.Empty
                });
        }
        return importList;
    }

    private async Task<string> ProcessImport(SharesImports import)
    {
        string errorMessage = string.Empty;

        switch (import.TypeOfTransaction)
        {
            case "Köp":
                await AddSharesImport(import);
                break;
            case "Sälj":
                await SoldShareImport(import);
                break;
            case "FondKöp":
                errorMessage = await AddFundImport(import);
                break;
            case "FondSälj":
                errorMessage = await SoldFundImport(import);
                break;
            case "Utdelning":
                await DividendImport(import);
                break;
            case "Insättning":
            case "Uttag":
                await DepositMoneyImport(import);
                break;
            case "Ränta":
                await InterestRatesImport(import);
                break;
            case "Avgift":
            case "Courtage":
            case "Skatt":
                await AddFeeImport(import);
                break;
            default:
                await OtherImports(import);
                break;
        }

        return errorMessage;
    }

    private async Task UpdateImportModel(string fileName, int rowCount, int transactionCounter)
    {
        try
        {
            SharesImportsFile importModel = db.SharesImportsFiles.FirstOrDefault(r => r.SharesImportsFileId == pageViewModel.SharesImportsFileId)
                              ?? throw new Exception("Importen hittades inte i databasen!");

            string? notesBefore = importModel.Note;

            importModel.FileName = fileName;
            importModel.NumbersOfTransaction = rowCount - 1;
            importModel.Note = string.IsNullOrEmpty(notesBefore)
                ? $"Färdiga transaktion: {transactionCounter} av {rowCount - 1}."
                : $"Färdiga transaktion: {transactionCounter} av {rowCount - 1}. \n\n {notesBefore}";

            await db.SaveChangesAsync();
        }
        catch (Exception ex)
        {
            await LogError($"Import felmeddelande: {ex.Message}", "Kan inte ändra importen!");
        }
    }

    private async Task<bool> SharesExistAsync(string isin) => await db.SharesPurchaseds.AnyAsync(r => r.ISIN == isin);

    private async Task AddOrUpdateShares(SharesPurchasedViewModel vm, bool sharesExist)
    {
        if (sharesExist)
            await SharesPurchasedClass.AddMore(vm, true);
        else
            await SharesPurchasedClass.Add(vm, true);
    }

    private async Task AddSharesImport(SharesImports import)
    {
        var vm = SharesPurchasedClass.ChangeFromImportAddToViewModel(import);
        bool sharesExist = await SharesExistAsync(import.ISIN);
        await AddOrUpdateShares(vm, sharesExist);
    }

    private async Task SoldShareImport(SharesImports import)
    {
        var vm = SharesPurchasedClass.ChangeFromImportSellToViewModel(import);
        bool sharesExist = await SharesExistAsync(import.ISIN);

        if (sharesExist)
            await SharesPurchasedClass.Sell(vm, true, SharesFeeClass);
        else
        {
            await LogError(
                $"Felmeddelande: Aktien jag försöker sälja finns inte i databasen!",
                $"Säljdatum: {vm.DateOfPurchase} \r\nImport: Ja \r\nAktien: {vm.CompanyName} \r\nISIN: {vm.ISIN}."
            );
        }
    }

    private async Task<string> AddFundImport(SharesImports import) // Felhantering klar! Testa...!
    {
        string errorMessage = string.Empty;

        SharesPurchasedFundViewModel vm = SharesPurchasedFundsClass.ChangeFromImportAddToViewModel(import);
        bool sharesExist = await db.SharesPurchasedFunds.AnyAsync(r => r.ISIN == import.ISIN);

        if (sharesExist)
            errorMessage = await SharesPurchasedFundsClass.AddMore(vm, true);
        else
            errorMessage = await SharesPurchasedFundsClass.Add(vm, true);

        return errorMessage;
    } 

    private async Task<string> SoldFundImport(SharesImports import)
    {
        string errorMessage = string.Empty;

        SharesPurchasedFundViewModel vm = SharesPurchasedFundsClass.ChangeFromImportSellToViewModel(import);
        bool sharesExist = await db.SharesPurchasedFunds.AnyAsync(r => r.ISIN == import.ISIN);

        if (sharesExist)
            errorMessage = await SharesPurchasedFundsClass.Sell(vm, true, SharesFeeClass);
        else
        {
            await LogError(
                $"Felmeddelande: Fonden jag försöker sälja finns inte i databasen!",
                $"Säljdatum: {vm.DateOfPurchase} \r\nImport: Ja \r\nISIN: {vm.ISIN}."
            );

            errorMessage = "Felmeddelande: Fonden jag försöker sälja finns inte i databasen!";
        }

        return errorMessage;
    } // Felhantering klar! Testa...!

    private async Task DividendImport(SharesImports import)
    {
        var vm = SharesDividendClass.ChangeFromImportToViewModel(import);
        await SharesDividendClass.Add(vm, true);
    }

    private async Task DepositMoneyImport(SharesImports import)
    {
        var vm = SharesDepositMoneyClass.ChangeFromImportToViewModel(import);
        await SharesDepositMoneyClass.Add(vm, true);
    }

    private async Task InterestRatesImport(SharesImports import)
    {
        SharesInterestRatesViewModel vm = SharesInterestRatesClass.ChangeFromImportToViewModel(import);
        await SharesInterestRatesClass.Add(vm, true);
    }

    private async Task AddFeeImport(SharesImports import)
    {
        SharesFeeViewModel vm = SharesFeeClass.ChangeFromImportToViewModel(import);
        await SharesFeeClass.Add(vm, true, string.Empty);
    }

    private async Task OtherImports(SharesImports import)
    {
        SharesOtherShareImportViewModel vm = SharesOtherImports.ChangeFromImportToViewModel(import);
        await SharesOtherImports.Add(vm, true);
    }

    private async Task HandleImportError(string errorMessage, string fileName, int transactionCounter, int rowCount)
    {
        SharesImportsFile? model = db.SharesImportsFiles.FirstOrDefault(r => r.SharesImportsFileId == pageViewModel.SharesImportsFileId);

        if (model == null)
            await LogError($"Övergripande import felmeddelande: {errorMessage}", "Importen hittades inte i databasen!");
        else
        {
            model.Errors += $"Fel vid inmatning av import. Fel på rad {transactionCounter + 1}. Felmeddelande: {errorMessage}";
            model.FileName = fileName;
            model.NumbersOfTransaction = transactionCounter;
            //model.Note = $"Färdiga transaktion: {transactionCounter} av {rowCount - 1}.";
            await db.SaveChangesAsync();
        }

        await RefreshPage();
    }

    private async Task LogError(string errorMessage, string note)
    {
        DateTime date = DateTime.Now;
        SharesErrorHandlings sharesErrorHandling = new()
            {
                Date = $"{date.Year}-{date.Month}-{date.Day}",
                ErrorMessage = errorMessage,
                Note = note
            };

        db.SharesErrorHandlings.Add(sharesErrorHandling);
        await db.SaveChangesAsync();
    }

    // Kolla om importen funkar innan ta bort denna kod!! // Magnus

    // private async Task ImportExcelFile(InputFileChangeEventArgs e)
    // {
    //     int rowCount = 0;
    //     int transactionCounter = 0;
    //     string fileName = string.Empty;

    //     try
    //     {
    //         RefreshPage();

    //         LoadingDataFromFil = true;

    //         foreach (IBrowserFile file in e.GetMultipleFiles(1))
    //         {
    //             fileName = file.Name;

    //             using (MemoryStream ms = new MemoryStream())
    //             {
    //                 // copy data from file to memory stream
    //                 await file.OpenReadStream().CopyToAsync(ms);
    //                 // positions the cursor at the beginning of the memory stream
    //                 ms.Position = 0;

    //                 // create ExcelPackage from memory stream
    //                 ExcelPackage.LicenseContext = LicenseContext.NonCommercial;
    //                 using (ExcelPackage package = new ExcelPackage(ms))
    //                 {
    //                     ExcelWorksheet ws = package.Workbook.Worksheets.FirstOrDefault();
    //                     int colCount = ws.Dimension.End.Column;
    //                     rowCount = ws.Dimension.End.Row;

    //                     List<SharesImports> importList = new();
    //                     SharesImports setImport;

    //                     for (int i = 2; i < rowCount + 1; i++)
    //                     {
    //                         setImport = new()
    //                             {
    //                                 Date = ws.Cells[i, 1].Value == null ? string.Empty : ws.Cells[i, 1].Value.ToString(),
    //                                 AccountNumber = ws.Cells[i, 2].Value == null ? string.Empty : ws.Cells[i, 2].Value.ToString(),
    //                                 TypeOfTransaction = ws.Cells[i, 3].Value == null ? string.Empty : ws.Cells[i, 3].Value.ToString(),
    //                                 CompanyOrInformation = ws.Cells[i, 4].Value == null ? string.Empty : ws.Cells[i, 4].Value.ToString(),
    //                                 NumberOfSharesString = ws.Cells[i, 5].Value == null ? string.Empty : ws.Cells[i, 5].Value.ToString(),
    //                                 PricePerShareString = ws.Cells[i, 6].Value == null ? string.Empty : ws.Cells[i, 6].Value.ToString(),
    //                                 AmountString = ws.Cells[i, 7].Value == null ? string.Empty : ws.Cells[i, 7].Value.ToString(),
    //                                 BrokerageString = ws.Cells[i, 8].Value == null ? string.Empty : ws.Cells[i, 8].Value.ToString(),
    //                                 Currency = ws.Cells[i, 9].Value == null ? string.Empty : ws.Cells[i, 9].Value.ToString(),
    //                                 ISIN = ws.Cells[i, 10].Value == null ? string.Empty : ws.Cells[i, 10].Value.ToString()
    //                             };

    //                         importList.Add(setImport);
    //                     }

    //                     foreach (var import in importList)
    //                     {
    //                         transactionCounter++;

    //                         switch (import.TypeOfTransaction)
    //                         {
    //                             case "Köp":
    //                                 AddSharesImport(import);
    //                                 break;
    //                             case "Sälj":
    //                                 SoldShareImport(import);
    //                                 break;
    //                             case "FondKöp":
    //                                 AddFundImport(import);
    //                                 break;
    //                             case "FondSälj":
    //                                 SoldFundImport(import);
    //                                 break;
    //                             case "Utdelning":
    //                                 DividendImport(import);
    //                                 break;
    //                             case "Insättning":
    //                                 DepositMoneyImport(import);
    //                                 break;
    //                             case "Uttag":
    //                                 DepositMoneyImport(import);
    //                                 break;
    //                             case "Ränta":
    //                                 InterestRatesImport(import);
    //                                 break;
    //                             case "Avgift":
    //                                 AddFeeImport(import);
    //                                 break;
    //                             case "Skatt":
    //                                 AddFeeImport(import);
    //                                 break;
    //                             default:
    //                                 OtherImports(import);
    //                                 break;
    //                         }

    //                         Thread.Sleep(2000);
    //                     }
    //                 }
    //             }

    //             try
    //             {
    //                 SharesImportsFile? importModel = db.SharesImportsFiles.Any() ?
    //                                 db.SharesImportsFiles.FirstOrDefault(r => r.SharesImportsFileId == pageModel.SharesImportsFileId) :
    //                                     throw new Exception("Importen hittades inte i databasen!");

    //                 string notsBefore = importModel.Note;

    //                 importModel.FileName = fileName;
    //                 importModel.NumbersOfTransaction = rowCount - 1;

    //                 if (string.IsNullOrEmpty(notsBefore))
    //                     importModel.Note = $"Färdiga transaktion: {transactionCounter} av {rowCount - 1}.";
    //                 else
    //                     importModel.Note = $"Färdiga transaktion: {transactionCounter} av {rowCount - 1}. \n\n {notsBefore}";

    //                 db.SaveChanges();
    //             }
    //             catch (Exception ex)
    //             {
    //                 DateTime date = DateTime.Now;

    //                 SharesErrorHandlings sharesErrorHandling = new()
    //                     {
    //                         Date = $"{date.Year}-{date.Month}-{date.Day}",
    //                         ErrorMessage = $"Import felmeddelande: {ex.Message}",
    //                         Note = $"Kan inte ändra importen!"
    //                     };

    //                 db.SharesErrorHandlings.Add(sharesErrorHandling);
    //                 db.SaveChanges();

    //                 RefreshPage();
    //             }
    //         }

    //         RefreshPage();
    //     }
    //     catch (Exception exc)
    //     {
    //         SharesImportsFile? importModel = db.SharesImportsFiles.Any() ?
    //                                 db.SharesImportsFiles.FirstOrDefault(r => r.SharesImportsFileId == pageModel.SharesImportsFileId) :
    //                                     throw new Exception("Importen hittades inte i databasen!");

    //         if (importModel == null)
    //         {
    //             DateTime date = DateTime.Now;

    //             SharesErrorHandlings sharesErrorHandling = new()
    //                 {
    //                     Date = $"{date.Year}-{date.Month}-{date.Day}",
    //                     ErrorMessage = $"Övergripande import felmeddelande: {exc.Message}",
    //                     Note = $"Importen hittades inte i databasen!"
    //                 };

    //             db.SharesErrorHandlings.Add(sharesErrorHandling);
    //         }
    //         else
    //         {
    //             importModel.Errors += $"Spara till databasen: Fel på rad {transactionCounter + 1}. Felmeddelande: {exc.Message}";
    //             importModel.FileName = fileName;
    //             importModel.NumbersOfTransaction = transactionCounter;
    //             importModel.Note = $"Färdiga transaktion: {transactionCounter} av {rowCount - 1}.";
    //         }

    //         db.SaveChanges();

    //         RefreshPage();
    //     }
    // }
}