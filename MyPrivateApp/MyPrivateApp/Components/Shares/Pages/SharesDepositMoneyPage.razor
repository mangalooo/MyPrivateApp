
@page "/SharesDepositMoneyPage"

@using Microsoft.AspNetCore.Components.QuickGrid
@using MyPrivateApp.Client.ViewModels
@using MyPrivateApp.Components.Enum
@using MyPrivateApp.Components.Shares.Classes
@using MyPrivateApp.Components.Shares.Classes.Interface
@using MyPrivateApp.Components.ViewModels.SharesViewModels
@using MyPrivateApp.Data
@using MyPrivateApp.Data.Models
@using MyPrivateApp.Data.Models.SharesModels
@using static Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions

@rendermode @(new InteractiveServerRenderMode(prerender:false))

@inject ApplicationDbContext db
@inject NavigationManager Navigation
@inject ISharesDepositMoneyClass BackEndClass

<PageTitle> Aktier </PageTitle>

<br />

@* Header *@
<div>

    @* Navigation *@

    @* Desktop *@
    <div class="navigation">
        <div id="desktop" class="text-center">
            <div class="btn-group">
                @foreach (var item in NavigationItems)
                {
                    <NavLink href="@item.Href" type="button" class="btn btn-outline-dark btn-sm"> @item.Text </NavLink>
                }
            </div>
        </div>

        @* Mobile *@
        <div id="mobile">
            <div class="btn-group" role="group">
                <button title="Info" id="btnGroupDrop1" type="button" class="btn btn-outline-secondary btn-sm dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">
                    Alla aktier sidor
                </button>
                <ul class="dropdown-menu" aria-labelledby="btnGroupDrop1">
                    @foreach (var item in NavigationItems)
                    {
                        <li class="dropdown-item">
                            <NavLink href="@item.Href" type="button" class="btn btn-outline-dark btn-sm"> @item.Text </NavLink>
                        </li>
                    }
                </ul>
            </div>
        </div>
    </div>

    <br /> <br />

    <h1 align="center"> Banköverföringar </h1>

    <br />

    @if (ShowOrHideCreateButton)
    {
        <br />

        <div align="center">
            <button class="btn btn-outline-success btn-sm" @onclick="@ShowAddForm"> Ny banköverföring </button>
        </div>
    }

    @if (ShowOrHideErrorMessage)
    {
        <br />

        <div align="center">
            <Alert Color="AlertColor.Danger">
                <Icon Name="IconName.ExclamationTriangleFill" class="me-2"></Icon>
                <b>@ErrorMessage</b>
            </Alert>
        </div>
    }

    @if (ShowOrHideInfoMessage)
    {
        <br />

        <div align="center">
            <Alert Color="AlertColor.Info">
                <b>@InfoMessage</b>
            </Alert>
        </div>
    }

    <br />

</div>

@* Form and views *@
<div class="container">
    <div class="col-md-12">
        <div class="card">

            @* Form *@
            <div>
                @if (ShowOrHideAddOrEditForm)
                {
                    <div class="card-header">
                        <EditForm Model="pageViewModel" OnSubmit="AddOrEdit" Enhance>

                            <div class="row">

                                <div id="mobile" class="col-4" />

                                <div class="col-4">
                                    <div class="form-floating">
                                        <InputDate @bind-Value="pageViewModel.Date" class="form-control" disabled="@DisabledForm" />
                                        <label for="Date"> Datum </label>
                                    </div>
                                </div>

                                <div class="col-4">
                                    <div class="form-floating">
                                        <InputSelect @bind-Value="pageViewModel.SubmitOrWithdraw" class="form-control" placeholder="" disabled="@DisabledForm">
                                            @foreach (object submitOrWithdraw in Enum.GetValues(typeof(SubmitOrWithdraw)))
                                            {
                                                <option value="@submitOrWithdraw">@submitOrWithdraw</option>
                                            }
                                        </InputSelect>
                                        <label for="wildAnimal"> In- eller utbetalning </label>
                                    </div>
                                </div>

                                <div class="col-4">
                                    <div class="form-floating">
                                        <InputText @bind-Value="pageViewModel.DepositMoney" class="form-control" disabled="@DisabledForm" />
                                        <label for="DepositMoney"> Belopp </label>
                                    </div>
                                </div>

                            </div>

                            <br />

                            <div class="row">

                                <div id="mobile" class="col-3" />

                                <div class="col-3">
                                    <div class="form-floating">
                                        <InputText @bind-Value="pageViewModel.TypeOfTransaction" class="form-control" disabled="@DisabledForm" />
                                        <label for="TypeOfTransaction"> Transaktion </label>
                                    </div>
                                </div>

                                <div class="col-3">
                                    <div class="form-floating">
                                        <InputText @bind-Value="pageViewModel.TransferOptions" class="form-control" disabled="@DisabledForm" />
                                        <label for="TransferOptions"> Från </label>
                                    </div>
                                </div>

                                <div class="col-3">
                                    <div class="form-floating">
                                        <InputText @bind-Value="pageViewModel.Account" class="form-control" disabled="@DisabledForm" />
                                        <label for="Account"> Konto </label>
                                    </div>
                                </div>

                                <div class="col-3">
                                    <div class="form-floating">
                                        <InputText @bind-Value="pageViewModel.Currency" class="form-control" disabled="@DisabledForm" />
                                        <label for="Currency"> Valuta </label>
                                    </div>
                                </div>

                            </div>

                            <br />

                            <div class="row">

                                <div class="col-12">
                                    <div class="form-floating">
                                        <InputTextArea @bind-Value="pageViewModel.Note" class="form-control" disabled="@DisabledForm" />
                                        <label for="Note"> Anteckningar </label>
                                    </div>
                                </div>
                            </div>

                            <br />

                            @if (ShowOrHideAddNewButton)
                            {
                                <div align="center">
                                    <button type="submit" align="center" class="btn btn-outline-success btn-sm"> Ny banköverföring </button>
                                </div>
                            }

                            @if (ShowOrHideEditButton)
                            {
                                <div align="center">
                                    <button type="submit" align="center" class="btn btn-outline-warning btn-sm"> Ändra </button>
                                </div>
                            }

                            <br />

                            <div align="center">
                                <button @onclick="RefreshPage" type="button" align="center" class="btn btn-outline-secondary btn-sm"> Tillbaka </button>
                            </div>

                            <br /><br />

                        </EditForm>
                    </div>
                }
            </div>

            @* View - Desktop *@
            <div id="desktop">
                <div class="card-body">
                    <QuickGrid Items="@queryable" Pagination="pagination">

                        <PropertyColumn Title="Datum" Property="@(c => c.Date)" Format="yyyy-MM-dd" Sortable="true" />
                        <PropertyColumn Title="Från" Property="@(c => c.TransferOptions)" Sortable="true" />
                        <PropertyColumn Title="Typ" Property="@(c => c.SubmitOrWithdraw)" Sortable="true" />
                        <PropertyColumn Title="Belopp" Property="@(c => c.DepositMoney)" Sortable="true" />

                        <TemplateColumn Title="Info">

                            <div class="btn-group" role="group">
                                <button title="Info" id="btnGroupDrop1" type="button" class="btn btn-outline-secondary btn-sm dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">
                                    Info
                                </button>
                                <ul class="dropdown-menu" aria-labelledby="btnGroupDrop1">
                                    <li class="dropdown-item"><button class="btn btn-outline-info btn-sm" @onclick="@(() => Info(context))"> All info </button></li>
                                    <li class="dropdown-item"><button class="btn btn-outline-warning btn-sm" @onclick="@(() => Edit(context))"> Ändra </button></li>
                                    <li class="dropdown-item"><button class="btn btn-outline-danger btn-sm" @onclick="@(() => OpenDeleteWindow(context))"> Ta bort </button></li>
                                </ul>
                            </div>

                            <div class="modal @ModalClass" tabindex="-1" role="dialog" style="display:@ModalDisplay">
                                <div class="modal-dialog" role="document">
                                    <div class="modal-content">
                                        <div class="modal-header">
                                            <h5 class="modal-title"> Vill du ta bort banköverförningen? </h5>
                                        </div>
                                        <div class="modal-footer">
                                            <button type="button" class="btn btn-outline-danger" @onclick="@(() => Delete())"> Ta bort banköverförningen </button>
                                            <button type="button" class="btn btn-outline-secondary" data-dismiss="modal" @onclick="() => CloseDeleteWindow()"> Ångra </button>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            @if (ShowBackdrop)
                            {
                                <div class="modal-backdrop fade show"></div>
                            }

                        </TemplateColumn>
                    </QuickGrid>

                    <div class="card-footer"><Paginator State="@pagination" /></div>

                    <br />
                    <br />

                </div>
            </div>

            @* View - Mobile *@
            <div id="mobile">
                <div class="card-body">
                    <QuickGrid Items="@queryable" Pagination="pagination">

                        <PropertyColumn Title="Datum" Property="@(c => c.Date)" Sortable="true" />
                        <PropertyColumn Title="Belopp" Property="@(c => c.DepositMoney)" Sortable="true" />

                        <TemplateColumn Title="Info">

                            <div class="btn-group" role="group">
                                <button title="Info" id="btnGroupDrop1" type="button" class="btn btn-outline-secondary btn-sm dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">
                                    Info
                                </button>
                                <ul class="dropdown-menu" aria-labelledby="btnGroupDrop1">
                                    <li class="dropdown-item"><button class="btn btn-outline-info btn-sm" @onclick="@(() => Info(context))"> All info </button></li>
                                    <li class="dropdown-item"><button class="btn btn-outline-warning btn-sm" @onclick="@(() => Edit(context))"> Ändra </button></li>
                                    <li class="dropdown-item"><button class="btn btn-outline-danger btn-sm" @onclick="@(() => OpenDeleteWindow(context))"> Ta bort </button></li>
                                </ul>
                            </div>

                            <div class="modal @ModalClass" tabindex="-1" role="dialog" style="display:@ModalDisplay">
                                <div class="modal-dialog" role="document">
                                    <div class="modal-content">
                                        <div class="modal-header">
                                            <h5 class="modal-title"> Vill du ta bort banköverförningen? </h5>
                                        </div>
                                        <div class="modal-footer">
                                            <button type="button" class="btn btn-outline-danger" @onclick="@(() => Delete())"> Ta bort banköverförningen </button>
                                            <button type="button" class="btn btn-outline-secondary" data-dismiss="modal" @onclick="() => CloseDeleteWindow()"> Ångra </button>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            @if (ShowBackdrop)
                            {
                                <div class="modal-backdrop fade show"></div>
                            }

                        </TemplateColumn>
                    </QuickGrid>

                    <br />
                    <br />

                </div>
            </div>

        </div>
    </div>
</div>

@* Footer *@
<div>

    <br /> <br />

    <div class="footer" align="center">
        <p> Copyright 2023 - @DateTime.Now.Year</p>
    </div>

    <br /> <br />

</div>

@* Back-End *@
@code
{
    [SupplyParameterFromForm]
    private SharesDepositMoneyViewModel pageViewModel { get; set; } = new();

    PaginationState pagination = new PaginationState { ItemsPerPage = 30 };
    private IQueryable<SharesDepositMoneyViewModel> queryable = Enumerable.Empty<SharesDepositMoneyViewModel>().AsQueryable();

    // Holds temporary id to delete items
    private int TemporaryId { get; set; } = 0;

    // Modol window settings
    private Guid Guid = Guid.NewGuid();
    private string ModalDisplay = "none;";
    private string ModalClass = "";
    private bool ShowBackdrop = false;

    // Hide button and fields
    private bool ShowOrHideAddOrEditForm { get; set; } = false;
    private bool ShowOrHideCreateButton { get; set; } = true;
    private bool ShowOrHideEditButton { get; set; } = false;
    private bool ShowOrHideAddNewButton { get; set; } = false;
    private bool DisabledForm { get; set; } = false;

    // Text messeges
    private string ErrorMessage { get; set; } = string.Empty;
    private bool ShowOrHideErrorMessage { get; set; } = false;
    private string InfoMessage { get; set; } = string.Empty;
    private bool ShowOrHideInfoMessage { get; set; } = false;

    private void ShowErrorMessage(string errorMessage)
    {
        ErrorMessage = errorMessage;
        ShowOrHideErrorMessage = true;
    }

    // Navigation items
    private List<NavigationItem> NavigationItems = new()
    {
        new NavigationItem("SharesIndexYearsPage", "Start"),
        new NavigationItem("SharesImportsPage", "Importera"),
        new NavigationItem("SharesPurchasedPage", "Köpta aktier"),
        new NavigationItem("SharesSoldPage", "Sålda aktier"),
        new NavigationItem("SharesPurchasedFundsPage", "Köpta fonder"),
        new NavigationItem("SharesSoldFundsPage", "Sålda fonder"),
        new NavigationItem("SharesDividendPage", "Utdelningar"),
        new NavigationItem("SharesFeePage", "Avgifter"),
        new NavigationItem("SharesDepositMoneyPage", "Banköverföringar"),
        new NavigationItem("SharesInterestRatesPage", "Räntor"),
        new NavigationItem("SharesOtherImportsPage", "Manuell hantering"),
        new NavigationItem("SharesErrorHandlingPage", "Felhantering")
    };

    private class NavigationItem
    {
        public string Href { get; }
        public string Text { get; }

        public NavigationItem(string href, string text)
        {
            Href = href;
            Text = text;
        }
    }

    // Load data from database to the Queryable container
    private async Task ConvertListToQueryableAsync()
    {
        List<SharesDepositMoney> items = await db.SharesDepositMoney.OrderBy(c => c.DepositMoneyId).ToListAsync();

        if (!items.Any())
        {
            InfoMessage = "Finns ingen data att visa!";
            ShowOrHideInfoMessage = true;
            return;
        }

        queryable = items
            .Select(model => BackEndClass.ChangeFromModelToViewModel(model))
            .AsQueryable();

        pagination.TotalItemCountChanged += (sender, EventArgs) => StateHasChanged();
    }

    protected override async Task OnInitializedAsync() => await ConvertListToQueryableAsync();

    private async Task RefreshPage() => await Task.Run(() => Navigation.Refresh(true));

    private void ShowAddForm()
    {
        ShowOrHideAddOrEditForm = true;
        ShowOrHideAddNewButton = true;
    }

    private async Task AddOrEdit()
    {
        DisabledForm = false;

        try
        {
            if (pageViewModel.DepositMoneyId > 0)
            {
                ErrorMessage = await BackEndClass.Edit(pageViewModel);
                ShowOrHideEditButton = true;
            }
            else
            {
                ErrorMessage = await BackEndClass.Add(pageViewModel, false);
                ShowOrHideAddNewButton = true;
            }

            if (!string.IsNullOrEmpty(ErrorMessage))
            {
                ShowOrHideAddOrEditForm = true;
                ShowOrHideErrorMessage = true;
                return;
            }
            else
            {
                pageViewModel = new();
                await RefreshPage();
            }
        }
        catch (Exception ex)
        {
            ShowErrorMessage($"Ett fel uppstod 1: {ex.Message}");
        }
    }

    private void Info(SharesDepositMoneyViewModel vm)
    {
        ShowOrHideAddOrEditForm = !ShowOrHideAddOrEditForm;
        ShowOrHideCreateButton = false;
        ShowOrHideEditButton = false;
        ShowOrHideAddNewButton = false;
        DisabledForm = true;
        pageViewModel = vm;
    }

    private void Edit(SharesDepositMoneyViewModel vm)
    {
        if (vm.DepositMoneyId == 0)
        {
            ShowErrorMessage($"Går inte att ändra gårdsarbetet. ID = {vm.DepositMoneyId}!");
            return;
        }

        DisabledForm = false;
        ShowOrHideEditButton = true;
        ShowOrHideAddNewButton = false;
        ShowOrHideCreateButton = false;
        ShowOrHideAddOrEditForm = true;
        pageViewModel = vm;
    }

    private async Task Delete()
    {
        if (!db.FarmWorks.Any())
        {
            ShowErrorMessage("Gick inte att ta bort överföringen, databasen är tom!");
            return;
        }

        try
        {
            SharesDepositMoney? model = await db.SharesDepositMoney.FirstOrDefaultAsync(a => a.DepositMoneyId == TemporaryId);
            
            if (model == null)
            {
                ShowErrorMessage($"Går inte att ta bort överföringen. (TemporaryId = {TemporaryId})!");
                return;
            }

            ErrorMessage = await BackEndClass.Delete(model);

            if (!string.IsNullOrEmpty(ErrorMessage))
                ShowOrHideErrorMessage = true;
            else
            {
                pageViewModel = new();
                await RefreshPage();
            }
        }
        catch (Exception ex)
        {
            ShowErrorMessage($"Ett fel uppstod 2: {ex.Message}");
        }
    }

    private void ToggleModal(ref string modalDisplay, ref string modalClass, ref bool showBackdrop, bool isOpen)
    {
        modalDisplay = isOpen ? "block;" : "none";
        modalClass = isOpen ? "Show" : "";
        showBackdrop = isOpen;
        StateHasChanged();
    }

    private void OpenDeleteWindow(SharesDepositMoneyViewModel vm)
    {
        TemporaryId = vm.DepositMoneyId;
        ToggleModal(ref ModalDisplay, ref ModalClass, ref ShowBackdrop, true);
    }

    private void CloseDeleteWindow() => ToggleModal(ref ModalDisplay, ref ModalClass, ref ShowBackdrop, false);

    private async Task<double> GetTotalAmount()
    {
        SharesTotalAmounts? sharesTotalAmounts = await BackEndClass.GetTotalAmount(2);

        if (sharesTotalAmounts == null)
            return 0;

        return sharesTotalAmounts.TotalAmount;
    }
}