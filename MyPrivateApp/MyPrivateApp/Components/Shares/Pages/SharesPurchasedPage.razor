@page "/SharesPurchasedPage"

@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using MyPrivateApp.Components.Enum
@using MyPrivateApp.Components.Shares.Classes
@using MyPrivateApp.Components.Shares.Classes.Interface
@using MyPrivateApp.Components.ViewModels.SharesViewModels
@using MyPrivateApp.Data
@using MyPrivateApp.Data.Models
@using MyPrivateApp.Data.Models.SharesModels
@using static Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions

@rendermode @(new InteractiveServerRenderMode(prerender:false))

@inject NavigationManager Navigation
@inject ISharesPurchasedClass BackEndClass
@inject ISharesFeeClass ISharesFeeClass
@inject IDbContextFactory<ApplicationDbContext> IDbContextFactory

<PageTitle> Aktier </PageTitle>

<br />

@try
{
    @* Header *@
    <div>

        @* Navigation *@
        <div class="navigation">

            <div id="desktop" class="text-center">
                <div class="btn-group">
                    @foreach (var item in NavigationItems)
                    {
                        <NavLink href="@item.Href" type="button" class="btn btn-outline-dark btn-sm"> @item.Text </NavLink>
                    }
                </div>
            </div>

            <div id="mobile">
                <div class="btn-group" role="group">
                    <button title="Info" id="btnGroupDrop1" type="button" class="btn btn-outline-secondary btn-sm dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">
                        Alla aktier sidor
                    </button>
                    <ul class="dropdown-menu" aria-labelledby="btnGroupDrop1">
                        @foreach (var item in NavigationItems)
                        {
                            <li class="dropdown-item">
                                <NavLink href="@item.Href" type="button" class="btn btn-outline-dark btn-sm"> @item.Text </NavLink>
                            </li>
                        }
                    </ul>
                </div>
            </div>
        </div>

        <br /> <br />

        <h1 align="center"> Köpta aktier </h1>

        @if (ShowOrHideCreateButton)
        {
            <br />

            <div align="center">
                <button class="btn btn-outline-success btn-sm" @onclick="@ShowAddForm"> Ny aktie </button>
            </div>
        }

        @if (ShowOrHideErrorMessage)
        {
            <br />

            <div align="center">
                <Alert Color="AlertColor.Danger">
                    <Icon Name="IconName.ExclamationTriangleFill" class="me-2"></Icon>
                    <b>@ErrorMessage</b>
                </Alert>
            </div>
        }

        @if (ShowOrHideInfoMessage)
        {
            <br />

            <div align="center">
                <Alert Color="AlertColor.Info">
                    <b>@InfoMessage</b>
                </Alert>
            </div>
        }


        <br /> <br />

    </div>

    @* Form and views *@
    <div class="container">
        <div class="col-md-12">
            <div class="card">

                @* Form *@
                <div>
                    @if (ShowOrHideAddOrEditForm)
                    {
                        <div class="card-header">
                            <EditForm Model="pageViewModel" OnSubmit="AddOrEdit" Enhance>

                                <br />

                                <div class="row">

                                    <div id="mobile" class="col-4" />

                                    <div class="col-4">
                                        <div class="form-floating">
                                            <InputText @bind-Value="pageViewModel.CompanyName" class="form-control" disabled="@DisabledForm" />
                                            <label for="CompanyName"> Företag </label>
                                        </div>
                                    </div>

                                    <div class="col-4">
                                        <div class="form-floating">
                                            <InputText @bind-Value="pageViewModel.TypeOfShares" class="form-control" disabled="@DisabledForm" />
                                            <label for="TypeOfShares"> Typ av aktie </label>
                                        </div>
                                    </div>

                                    <div class="col-4">
                                        <div class="form-floating">
                                            <InputText @bind-Value="pageViewModel.ISIN" class="form-control" disabled="@DisabledForm" />
                                            <label for="ISIN"> ISIN </label>
                                        </div>
                                    </div>

                                </div>

                                <br />

                                <div class="row">

                                    <div id="mobile" class="col-4" />

                                    <div class="col-4">
                                        <div class="form-floating">
                                            <InputDate @bind-Value="pageViewModel.DateOfPurchase" class="form-control" disabled="@DisabledForm" />
                                            <label for="DateOfPurchase"> Datum </label>
                                        </div>
                                    </div>

                                    <div class="col-4">
                                        <div class="form-floating">
                                            <InputText @bind-Value="pageViewModel.Account" class="form-control" disabled="@DisabledForm" />
                                            <label for="Account"> Konto </label>
                                        </div>
                                    </div>

                                    <div class="col-4">
                                        <div class="form-floating">
                                            <InputText @bind-Value="pageViewModel.Currency" class="form-control" disabled="@DisabledForm" />
                                            <label for="Currency"> Valuta </label>
                                        </div>
                                    </div>

                                </div>

                                <br />

                                <div class="row">

                                    <div id="mobile" class="col-3" />

                                    <div class="col-3">
                                        <div class="form-floating">
                                            <InputNumber @bind-Value="pageViewModel.HowMany" class="form-control" disabled="@DisabledForm" />
                                            <label for="HowMany"> Antal </label>
                                        </div>
                                    </div>

                                    <div class="col-3">
                                        <div class="form-floating">
                                            <InputText @bind-Value="pageViewModel.PricePerShares" class="form-control" disabled="@DisabledForm" />
                                            <label for="PricePerShares"> Pris per aktie (snitt vid köp av fler) </label>
                                        </div>
                                    </div>

                                    <div class="col-3">
                                        <div class="form-floating">
                                            <InputText @bind-Value="pageViewModel.Amount" class="form-control" disabled="true" />
                                            <label for="Amount"> Inköpsvärdet </label>
                                        </div>
                                    </div>

                                    <div class="col-3">
                                        <div class="form-floating">
                                            <InputNumber @bind-Value="pageViewModel.Brokerage" class="form-control" disabled="@DisabledForm" />
                                            <label for="Brokerage"> Courtage </label>
                                        </div>
                                    </div>

                                </div>

                                <br />

                                <div class="row">

                                    <div class="col-12">
                                        <div class="form-floating">
                                            <InputTextArea rows="10" style="height:100%;" @bind-Value="pageViewModel.Note" class="form-control" disabled="@DisabledForm" />
                                            <label for="Note"> Anteckningar </label>
                                        </div>
                                    </div>

                                </div>

                                <br />

                                @if (BuyMore)
                                {
                                    <div class="row">

                                        <div id="mobile" class="col-3" />

                                        <div class="col-3">
                                            <div class="form-floating">
                                                <InputDate @bind-Value="pageViewModel.MoreDateOfPurchase" class="form-control" />
                                                <label for="MoreDateOfPurchase"> Köp mer: Datum </label>
                                            </div>
                                        </div>

                                        <div class="col-3">
                                            <div class="form-floating">
                                                <InputNumber @bind-Value="pageViewModel.MoreHowMany" class="form-control" />
                                                <label for="MoreHowMany"> Köp mer: Antal </label>
                                            </div>
                                        </div>

                                        <div class="col-3">
                                            <div class="form-floating">
                                                <InputNumber @bind-Value="pageViewModel.MorePricePerShares" class="form-control" />
                                                <label for="MorePricePerShares"> Köp mer: Pris per aktie </label>
                                            </div>
                                        </div>

                                        <div class="col-3">
                                            <div class="form-floating">
                                                <InputNumber @bind-Value="pageViewModel.MoreBrokerage" class="form-control" />
                                                <label for="MoreBrokerage"> Köp mer: Courtage </label>
                                            </div>
                                        </div>

                                    </div>
                                }

                                @if (Sale)
                                {
                                    <div class="row">

                                        <div id="mobile" class="col-3" />

                                        <div class="col-3">
                                            <div class="form-floating">
                                                <InputDate @bind-Value="pageViewModel.SaleDateOfPurchase" class="form-control" />
                                                <label for="SaleDateOfPurchase"> Sälj: Datum </label>
                                            </div>
                                        </div>

                                        <div class="col-3">
                                            <div class="form-floating">
                                                <InputNumber @bind-Value="pageViewModel.SaleHowMany" class="form-control" />
                                                <label for="SaleHowMany"> Sälj: Antal </label>
                                            </div>
                                        </div>

                                        <div class="col-3">
                                            <div class="form-floating">
                                                <InputNumber @bind-Value="pageViewModel.SalePricePerShares" class="form-control" />
                                                <label for="SalePricePerShares"> Sälj: Pris per aktie </label>
                                            </div>
                                        </div>

                                        <div class="col-3">
                                            <div class="form-floating">
                                                <InputNumber @bind-Value="pageViewModel.SaleBrokerage" class="form-control" />
                                                <label for="SaleBrokerage"> Sälj: Courtage </label>
                                            </div>
                                        </div>

                                    </div>
                                }

                                <br />

                                @if (ShowOrHideAddNewButton)
                                {
                                    <div align="center">
                                        <button type="submit" align="center" class="btn btn-outline-success btn-sm"> Lägg till köpt aktie </button>
                                    </div>

                                    <br />
                                }

                                @if (ShowOrHideEditButton)
                                {
                                    <div align="center">
                                        <button type="submit" align="center" class="btn btn-outline-warning btn-sm"> Ändra </button>
                                    </div>

                                    <br />
                                }

                                @if (ShowOrHideButtonAddMoreShares)
                                {
                                    <div align="center">
                                        <button @onclick="AddMoreButton" type="button" align="center" class="btn btn-outline-success btn-sm"> Köp mer </button>
                                    </div>

                                    <br />
                                }

                                @if (ShowOrHideSaleButton)
                                {
                                    <div align="center">
                                        <button @onclick="@(() => OpenSaleWindow())" type="button" align="center" class="btn btn-outline-danger btn-sm"> Sälja </button>

                                        <div class="modal @ModalClassSale" tabindex="-1" role="dialog" style="display:@ModalDisplaySale">
                                            <div class="modal-dialog" role="document" style="width:400px">
                                                <div class="modal-content">

                                                    <br />
                                                    <h5> Vill du sälja aktien: <strong> @pageViewModel.CompanyName? </strong> </h5>
                                                    <br />
                                                    <h5> Antal aktier: <strong> @pageViewModel.SaleHowMany av @pageViewModel.HowMany </strong> </h5>
                                                    <br />

                                                    <div class="modal-footer">
                                                        <button type="button" class="btn btn-outline-danger" @onclick="@(() => SellButton())"> Sälja </button>
                                                        <button type="button" class="btn btn-outline-secondary" data-dismiss="modal" @onclick="() => CloseSaleWindow()"> Ångra </button>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>

                                        @if (ShowBackdropSale)
                                        {
                                            <div class="modal-backdrop fade show"></div>
                                        }

                                        <br /><br />

                                    </div>
                                }

                                <div align="center">
                                    <button @onclick="RefreshPage" type="button" align="center" class="btn btn-outline-secondary btn-sm"> Tillbaka </button>
                                </div>

                                <br /> <br />

                            </EditForm>
                        </div>
                    }
                </div>

                @* View - Desktop *@
                <div id="desktop">
                    <div class="card-body">
                        <QuickGrid Items="@queryable" Pagination="pagination">

                            <PropertyColumn Title="Datum" Property="@(c => c.DateOfPurchase)" Format="yyyy-MM-dd" Sortable="true" />
                            <PropertyColumn Title="Företag" Property="@(c => c.CompanyName)" Sortable="true" />
                            <PropertyColumn Title="Typ" Property="@(c => c.TypeOfShares)" Sortable="true" />
                            <PropertyColumn Title="Antal" Property="@(c => c.HowMany)" Sortable="true" />
                            <PropertyColumn Title="Pris per aktie (snitt vid köp av fler)" Property="@(c => c.PricePerShares)" Sortable="true" />
                            <PropertyColumn Title="Inköpsvärdet" Property="@(c => c.Amount)" Sortable="true" />
                            <PropertyColumn Title="Valuta" Property="@(c => c.Currency)" Sortable="true" />

                            <TemplateColumn Title="Info">

                                <div class="btn-group" role="group">
                                    <button title="Info" id="btnGroupDrop1" type="button" class="btn btn-outline-secondary btn-sm dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">
                                        Info
                                    </button>
                                    <ul class="dropdown-menu" aria-labelledby="btnGroupDrop1">
                                        <li class="dropdown-item"><button class="btn btn-outline-info btn-sm" @onclick="@(() => Info(context))"> All info </button></li>
                                        <li class="dropdown-item"><button class="btn btn-outline-warning btn-sm" @onclick="@(() => Edit(context))"> Ändra </button></li>
                                        <li class="dropdown-item"><button class="btn btn-outline-success btn-sm" @onclick="@(() => AddMore(context))"> Köp mera </button></li>
                                        <li class="dropdown-item"><button class="btn btn-outline-dark btn-sm" @onclick="@(() => Sell(context))"> Sälj </button></li>
                                        <li class="dropdown-item"><button class="btn btn-outline-danger btn-sm" @onclick="@(() => OpenDeleteWindow())"> Ta bort </button></li>
                                    </ul>
                                </div>

                                <div class="modal @ModalClass" tabindex="-1" role="dialog" style="display:@ModalDisplay">
                                    <div class="modal-dialog" role="document">
                                        <div class="modal-content">
                                            <div class="modal-header">
                                                <br />
                                                <h5 class="modal-title"> Vill du ta bort aktien? </h5>
                                                <br />
                                            </div>
                                            <div class="modal-footer">
                                                <button type="button" class="btn btn-outline-danger" @onclick="@(() => Delete())"> Ta bort aktie </button>
                                                <button type="button" class="btn btn-outline-secondary" data-dismiss="modal" @onclick="() => CloseDeleteWindow()"> Ångra </button>
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                @if (ShowBackdrop)
                                {
                                    <div class="modal-backdrop fade show"></div>
                                }

                            </TemplateColumn>
                        </QuickGrid>

                        <div class="card-footer"><Paginator State="@pagination" /></div>

                        <br /> <br />

                    </div>
                </div>

                @* View - Mobile *@
                <div id="mobile">
                    <div class="card-body">
                        <QuickGrid Items="@queryable" Pagination="pagination">

                            <PropertyColumn Title="Företag" Property="@(c => c.CompanyName)" Sortable="true" />

                            <TemplateColumn Title="Info">

                                <div class="btn-group" role="group">
                                    <button title="Info" id="btnGroupDrop1" type="button" class="btn btn-outline-secondary btn-sm dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">
                                        Info
                                    </button>
                                    <ul class="dropdown-menu" aria-labelledby="btnGroupDrop1">
                                        <li class="dropdown-item"><button class="btn btn-outline-info btn-sm" @onclick="@(() => Info(context))"> All info </button></li>
                                        <li class="dropdown-item"><button class="btn btn-outline-warning btn-sm" @onclick="@(() => Edit(context))"> Ändra </button></li>
                                        <li class="dropdown-item"><button class="btn btn-outline-success btn-sm" @onclick="@(() => AddMore(context))"> Köp mera </button></li>
                                        <li class="dropdown-item"><button class="btn btn-outline-dark btn-sm" @onclick="@(() => Sell(context))"> Sälj </button></li>
                                        <li class="dropdown-item"><button class="btn btn-outline-danger btn-sm" @onclick="@(() => OpenDeleteWindow())"> Ta bort </button></li>
                                    </ul>
                                </div>

                                <div class="modal @ModalClass" tabindex="-1" role="dialog" style="display:@ModalDisplay">
                                    <div class="modal-dialog" role="document">
                                        <div class="modal-content">
                                            <div class="modal-header">
                                                <br />
                                                <h5 class="modal-title"> Vill du ta bort aktien? </h5>
                                                <br />
                                            </div>
                                            <div class="modal-footer">
                                                <button type="button" class="btn btn-outline-danger" @onclick="@(() => Delete())"> Ta bort aktie </button>
                                                <button type="button" class="btn btn-outline-secondary" data-dismiss="modal" @onclick="() => CloseDeleteWindow()"> Ångra </button>
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                @if (ShowBackdrop)
                                {
                                    <div class="modal-backdrop fade show"></div>
                                }

                            </TemplateColumn>
                        </QuickGrid>

                        <br /> <br />

                    </div>
                </div>

            </div>
        </div>
    </div>

    @* Footer *@
    <div>

        <br /> <br />

        <div class="footer" align="center">
            <p> Copyright 2023 - @DateTime.Now.Year</p>
        </div>

        <br /> <br />

    </div>
}
catch (Exception ex)
{
    ShowErrorMessage($"Övergripande felmeddelande: {ex.Message}");
}

@* Back-End *@
@code
{
    [SupplyParameterFromForm]
    private SharesPurchasedViewModel pageViewModel { get; set; } = new();
    PaginationState pagination = new PaginationState { ItemsPerPage = 30 };
    private IQueryable<SharesPurchasedViewModel> queryable = Enumerable.Empty<SharesPurchasedViewModel>().AsQueryable();

    // Modol window settings
    public Guid Guid = Guid.NewGuid();
    public string ModalDisplay = "none;";
    public string ModalClass = "";
    public bool ShowBackdrop = false;

    public Guid GuidSale = Guid.NewGuid();
    public string ModalDisplaySale = "none;";
    public string ModalClassSale = "";
    public bool ShowBackdropSale = false;

    // Hide button and fields
    private bool HideNewOrChangesFields { get; set; } = false;
    private bool ShowOrHideCreateButton { get; set; } = true;
    private bool ShowOrHideEditButton { get; set; } = false;
    private bool ShowOrHideAddNewButton { get; set; } = false;
    private bool DisabledForm { get; set; } = false;
    private bool BuyMore { get; set; } = false;
    private bool ShowOrHideButtonAddMoreShares { get; set; } = false;
    private bool Sale { get; set; } = false;
    private bool ShowOrHideSaleButton { get; set; } = false;
    private bool ShowOrHideAddOrEditForm { get; set; } = false;

    // Text messeges
    private string ErrorMessage { get; set; } = string.Empty;
    private bool ShowOrHideErrorMessage { get; set; } = false;
    private string InfoMessage { get; set; } = string.Empty;
    private bool ShowOrHideInfoMessage { get; set; } = false;

    private void ShowErrorMessage(string errorMessage)
    {
        ErrorMessage = errorMessage;
        ShowOrHideErrorMessage = true;
    }

    // Navigation items
    private List<NavigationItem> NavigationItems = new()
    {
        new NavigationItem("SharesIndexYearsPage", "Start"),
        new NavigationItem("SharesImportsPage", "Importera"),
        new NavigationItem("SharesPurchasedPage", "Köpta aktier"),
        new NavigationItem("SharesSoldPage", "Sålda aktier"),
        new NavigationItem("SharesPurchasedFundsPage", "Köpta fonder"),
        new NavigationItem("SharesSoldFundsPage", "Sålda fonder"),
        new NavigationItem("SharesDividendPage", "Utdelningar"),
        new NavigationItem("SharesFeePage", "Avgifter"),
        new NavigationItem("SharesDepositMoneyPage", "Banköverföringar"),
        new NavigationItem("SharesInterestRatesPage", "Räntor"),
        new NavigationItem("SharesOtherImportsPage", "Manuell hantering"),
        new NavigationItem("SharesErrorHandlingPage", "Felhantering")
    };

    private class NavigationItem
    {
        public string Href { get; }
        public string Text { get; }

        public NavigationItem(string href, string text)
        {
            Href = href;
            Text = text;
        }
    }

    // Load data from database to the Queryable container
    private async Task ConvertListToQueryableAsync()
    {
        try
        {
            using ApplicationDbContext db = await IDbContextFactory.CreateDbContextAsync() ?? throw new Exception("ConvertListToQueryableAsync: db == null!");

            List<SharesPurchaseds> items = await db.SharesPurchaseds.OrderBy(c => c.SharesPurchasedId).ToListAsync();

            if (!items.Any())
            {
                InfoMessage = "Finns ingen data att visa!";
                ShowOrHideInfoMessage = true;
                return;
            }

            queryable = items
                .Select(model => BackEndClass.ChangeFromModelToViewModel(model))
                .AsQueryable();

            pagination.TotalItemCountChanged += (sender, EventArgs) => StateHasChanged();
        }
        catch (Exception ex)
        {
            ShowErrorMessage($"ConvertListToQueryableAsync. Felmeddelande: {ex.Message}");
        }
    }

    protected override async Task OnInitializedAsync() => await ConvertListToQueryableAsync();

    private async Task RefreshPage() => await Task.Run(() => Navigation.Refresh(true));

    private void ShowAddForm()
    {
        ShowOrHideAddOrEditForm = true;
        ShowOrHideAddNewButton = true;
    }

    private async Task AddOrEdit()
    {
        DisabledForm = false;

        try
        {
            if (pageViewModel.SharesPurchasedId > 0)
            {
                ErrorMessage = await BackEndClass.Edit(pageViewModel);
                ShowOrHideEditButton = true;
            }
            else
            {
                ErrorMessage = await BackEndClass.Add(pageViewModel, false);
                ShowOrHideAddNewButton = true;
            }

            if (!string.IsNullOrEmpty(ErrorMessage))
            {
                ShowOrHideAddOrEditForm = true;
                ShowOrHideErrorMessage = true;
                return;
            }
            else
            {
                pageViewModel = new();
                await RefreshPage();
            }
        }
        catch (Exception ex)
        {
            ShowErrorMessage($"Lägg till eller ändra. Felmeddelande: {ex.Message}");
        }
    }

    private void AddMore(SharesPurchasedViewModel vm)
    {
        if (vm == null) return;

        ShowOrHideAddOrEditForm = !ShowOrHideAddOrEditForm;
        BuyMore = true;
        DisabledForm = true;
        ShowOrHideButtonAddMoreShares = true;
        ShowOrHideAddNewButton = false;
        pageViewModel = vm;
    }

    private async Task AddMoreButton()
    {
        ErrorMessage = await BackEndClass.AddMore(pageViewModel, false);

        if (!string.IsNullOrEmpty(ErrorMessage))
        {
            ShowOrHideErrorMessage = false;
            HideNewOrChangesFields = true;
            ShowOrHideEditButton = false;
            return;
        }
        else
        {
            pageViewModel = new();
            await RefreshPage();
        }
    }

    private void Info(SharesPurchasedViewModel vm)
    {
        ShowOrHideAddOrEditForm = !ShowOrHideAddOrEditForm;
        ShowOrHideCreateButton = false;
        ShowOrHideEditButton = false;
        ShowOrHideAddNewButton = false;
        DisabledForm = true;
        pageViewModel = vm;
    }

    private void Edit(SharesPurchasedViewModel vm)
    {
        if (vm.SharesPurchasedId <= 0)
        {
            ShowErrorMessage($"Går inte att ändra den köpta aktien. ID = {vm.SharesPurchasedId}!");
            return;
        }

        DisabledForm = false;
        ShowOrHideEditButton = true;
        ShowOrHideAddNewButton = false;
        ShowOrHideCreateButton = false;
        ShowOrHideAddOrEditForm = true;
        pageViewModel = vm;
    }

    private void Sell(SharesPurchasedViewModel vm)
    {
        if (vm == null)
        {
            ShowErrorMessage("Går inte att sälja den köpta aktien. Ingen data från formuläret!");
            return;
        }

        ShowOrHideAddOrEditForm = !ShowOrHideAddOrEditForm;
        Sale = true;
        DisabledForm = true;
        ShowOrHideSaleButton = true;
        ShowOrHideAddNewButton = false;
        pageViewModel = vm;
    }

    private async Task SellButton()
    {
        ErrorMessage = await BackEndClass.Sell(pageViewModel, false, ISharesFeeClass);

        if (!string.IsNullOrEmpty(ErrorMessage))
        {
            ShowOrHideErrorMessage = false;
            HideNewOrChangesFields = true;
            ShowOrHideEditButton = false;
        }
        else
        {
            pageViewModel = new();
            await RefreshPage();
        }
    }

    private async Task Delete()
    {
        try
        {
            using ApplicationDbContext db = await IDbContextFactory.CreateDbContextAsync() ?? throw new Exception("Delete: db == null!");

            if (!db.SharesPurchaseds.Any())
            {
                ShowErrorMessage("Det finns inga köpa aktie att ta bort!");
                return;
            }

            SharesPurchaseds? model = await db.SharesPurchaseds.FirstOrDefaultAsync(a => a.SharesPurchasedId == pageViewModel.SharesPurchasedId);
            if (model == null)
            {
                ShowErrorMessage("Hittar ingen köpt aktie att ta bort!");
                return;
            }

            ErrorMessage = await BackEndClass.Delete(model, pageViewModel, false); // Bara modellen ska skickas in i metoden, inte ViewModel!!

            if (!string.IsNullOrEmpty(ErrorMessage))
                ShowOrHideErrorMessage = true;
            else
            {
                pageViewModel = new();
                await RefreshPage();
            }
        }
        catch (Exception ex)
        {
            ShowErrorMessage($"Ta bort. Felmeddelande: {ex.Message}");
        }
    }

    private void ToggleModal(ref string modalDisplay, ref string modalClass, ref bool showBackdrop, bool isOpen)
    {
        modalDisplay = isOpen ? "block;" : "none";
        modalClass = isOpen ? "Show" : "";
        showBackdrop = isOpen;
        StateHasChanged();
    }

    private void OpenSaleWindow() => ToggleModal(ref ModalDisplaySale, ref ModalClassSale, ref ShowBackdropSale, true);

    private void CloseSaleWindow() => ToggleModal(ref ModalDisplaySale, ref ModalClassSale, ref ShowBackdropSale, false);

    private void OpenDeleteWindow() => ToggleModal(ref ModalDisplay, ref ModalClass, ref ShowBackdrop, true);

    private void CloseDeleteWindow() => ToggleModal(ref ModalDisplay, ref ModalClass, ref ShowBackdrop, false);
}