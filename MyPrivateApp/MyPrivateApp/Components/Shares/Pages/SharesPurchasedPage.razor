
@page "/SharesPurchasedPage"

@using Microsoft.AspNetCore.Components.QuickGrid
@using MyPrivateApp.Components.Enum
@using MyPrivateApp.Components.Shares.Classes
@using MyPrivateApp.Components.Shares.Classes.Interface
@using MyPrivateApp.Components.ViewModels.SharesViewModels
@using MyPrivateApp.Data
@using MyPrivateApp.Data.Models
@using MyPrivateApp.Data.Models.SharesModels
@using static Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions

@rendermode InteractiveServer

@inject ApplicationDbContext db
@inject NavigationManager Navigation
@inject ISharesPurchasedClass BackEndClass
@inject ISharesFeeClass ISharesFeeClass

<PageTitle> Aktier </PageTitle>

<br />

@* Header *@
<div>

    @* Navigation *@
    <div class="navigation">

        <div id="desktop" class="text-center">
            <div class="btn-group">
                @foreach (var item in NavigationItems)
                {
                    <NavLink href="@item.Href" type="button" class="btn btn-outline-dark btn-sm"> @item.Text </NavLink>
                }
            </div>
        </div>

        <div id="mobile">
            <div class="btn-group" role="group">
                <button title="Info" id="btnGroupDrop1" type="button" class="btn btn-outline-secondary btn-sm dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">
                    Alla aktier sidor
                </button>
                <ul class="dropdown-menu" aria-labelledby="btnGroupDrop1">
                    @foreach (var item in NavigationItems)
                    {
                        <li class="dropdown-item">
                            <NavLink href="@item.Href" type="button" class="btn btn-outline-dark btn-sm"> @item.Text </NavLink>
                        </li>
                    }
                </ul>
            </div>
        </div>
    </div>

    <br /> <br />

    <h1 style="text-align:center"> Köpta aktier </h1>

    <div style="text-align:center" hidden="@ShowOrHideCreateButton">

        <br />

        <button class="btn btn-outline-success btn-sm" @onclick="@HideNewOrChangesForm"> Ny köpt aktie </button>

    </div>

    @if (ShowOrHideErrorMessage)
    {
        <div style="text-align:center">
            <Alert Color="AlertColor.Danger">
                <Icon Name="IconName.ExclamationTriangleFill" class="me-2"></Icon>
                <b>@ErrorMessage</b>
            </Alert>
        </div>
    }

    <br /> <br />

</div>

@* Form and views *@
<div class="container">
    <div class="col-md-12">
        <div class="card">

            @* Form *@
            <div class="card-header">
                <EditForm Model="pageViewModel" OnSubmit="AddOrEdit" FormName="AddOrEdit" Enhance hidden="@(!HideNewOrChangesFields)">

                    <DataAnnotationsValidator />

                    <ValidationSummary class="text-danger" role="alert" />

                    <br />

                    <div class="row">

                        <div id="mobile" class="col-4" />

                        <div class="col-4">
                            <div class="form-floating">
                                <InputText @bind-Value="pageViewModel.CompanyName" class="form-control" disabled="@DisabledForm" />
                                <label for="CompanyName"> Företag </label>
                                <ValidationMessage For="() => pageViewModel.CompanyName" class="text-danger" />
                            </div>
                        </div>

                        <div class="col-4">
                            <div class="form-floating">
                                <InputText @bind-Value="pageViewModel.TypeOfShares" class="form-control" disabled="@DisabledForm" />
                                <label for="TypeOfShares"> Typ av aktie </label>
                                <ValidationMessage For="() => pageViewModel.TypeOfShares" class="text-danger" />
                            </div>
                        </div>

                        <div class="col-4">
                            <div class="form-floating">
                                <InputText @bind-Value="pageViewModel.ISIN" class="form-control" disabled="@DisabledForm" />
                                <label for="ISIN"> ISIN </label>
                                <ValidationMessage For="() => pageViewModel.ISIN" class="text-danger" />
                            </div>
                        </div>

                    </div>

                    <br />

                    <div class="row">

                        <div id="mobile" class="col-4" />

                        <div class="col-4">
                            <div class="form-floating">
                                <InputDate @bind-Value="pageViewModel.DateOfPurchase" class="form-control" disabled="@DisabledForm" />
                                <label for="DateOfPurchase"> Datum </label>
                                <ValidationMessage For="() => pageViewModel.DateOfPurchase" class="text-danger" />
                            </div>
                        </div>

                        <div class="col-4">
                            <div class="form-floating">
                                <InputText @bind-Value="pageViewModel.Account" class="form-control" disabled="@DisabledForm" />
                                <label for="Account"> Konto </label>
                                <ValidationMessage For="() => pageViewModel.Account" class="text-danger" />
                            </div>
                        </div>

                        <div class="col-4">
                            <div class="form-floating">
                                <InputText @bind-Value="pageViewModel.Currency" class="form-control" disabled="@DisabledForm" />
                                <label for="Currency"> Valuta </label>
                                <ValidationMessage For="() => pageViewModel.Currency" class="text-danger" />
                            </div>
                        </div>

                    </div>

                    <br />

                    <div class="row">

                        <div id="mobile" class="col-3" />

                        <div class="col-3">
                            <div class="form-floating">
                                <InputNumber @bind-Value="pageViewModel.HowMany" class="form-control" disabled="@DisabledForm" />
                                <label for="HowMany"> Antal </label>
                                <ValidationMessage For="() => pageViewModel.HowMany" class="text-danger" />
                            </div>
                        </div>

                        <div class="col-3">
                            <div class="form-floating">
                                <InputText @bind-Value="pageViewModel.PricePerShares" class="form-control" disabled="@DisabledForm" />
                                <label for="PricePerShares"> Pris per aktie (snitt vid köp av fler) </label>
                                <ValidationMessage For="() => pageViewModel.PricePerShares" class="text-danger" />
                            </div>
                        </div>

                        <div class="col-3">
                            <div class="form-floating">
                                <InputText @bind-Value="pageViewModel.Amount" class="form-control" disabled="true" />
                                <label for="Amount"> Inköpsvärdet </label>
                                <ValidationMessage For="() => pageViewModel.Amount" class="text-danger" />
                            </div>
                        </div>

                        <div class="col-3">
                            <div class="form-floating">
                                <InputNumber @bind-Value="pageViewModel.Brokerage" class="form-control" disabled="@DisabledForm" />
                                <label for="Brokerage"> Courtage </label>
                                <ValidationMessage For="() => pageViewModel.Brokerage" class="text-danger" />
                            </div>
                        </div>

                    </div>

                    <br />

                    <div class="row">

                        <div class="col-12">
                            <div class="form-floating">
                                <InputTextArea rows="10" style="height:100%;" @bind-Value="pageViewModel.Note" class="form-control" disabled="@DisabledForm" />
                                <label for="Note"> Anteckningar </label>
                                <ValidationMessage For="() => pageViewModel.Note" class="text-danger" />
                            </div>
                        </div>

                    </div>

                    <br />

                    <div class="row" hidden="@BuyMore">

                        <div id="mobile" class="col-3" />

                        <div class="col-3">
                            <div class="form-floating">
                                <InputDate @bind-Value="pageViewModel.MoreDateOfPurchase" class="form-control" />
                                <label for="MoreDateOfPurchase"> Köp mer: Datum </label>
                                <ValidationMessage For="() => pageViewModel.MoreDateOfPurchase" class="text-danger" />
                            </div>
                        </div>

                        <div class="col-3">
                            <div class="form-floating">
                                <InputNumber @bind-Value="pageViewModel.MoreHowMany" class="form-control" />
                                <label for="MoreHowMany"> Köp mer: Antal </label>
                                <ValidationMessage For="() => pageViewModel.MoreHowMany" class="text-danger" />
                            </div>
                        </div>

                        <div class="col-3">
                            <div class="form-floating">
                                <InputNumber @bind-Value="pageViewModel.MorePricePerShares" class="form-control" />
                                <label for="MorePricePerShares"> Köp mer: Pris per aktie </label>
                                <ValidationMessage For="() => pageViewModel.MorePricePerShares" class="text-danger" />
                            </div>
                        </div>

                        <div class="col-3">
                            <div class="form-floating">
                                <InputNumber @bind-Value="pageViewModel.MoreBrokerage" class="form-control" />
                                <label for="MoreBrokerage"> Köp mer: Courtage </label>
                                <ValidationMessage For="() => pageViewModel.MoreBrokerage" class="text-danger" />
                            </div>
                        </div>

                    </div>

                    <div class="row" hidden="@Sale">

                        <div id="mobile" class="col-3" />

                        <div class="col-3">
                            <div class="form-floating">
                                <InputDate @bind-Value="pageViewModel.SaleDateOfPurchase" class="form-control" />
                                <label for="SaleDateOfPurchase"> Sälj: Datum </label>
                                <ValidationMessage For="() => pageViewModel.SaleDateOfPurchase" class="text-danger" />
                            </div>
                        </div>

                        <div class="col-3">
                            <div class="form-floating">
                                <InputNumber @bind-Value="pageViewModel.SaleHowMany" class="form-control" />
                                <label for="SaleHowMany"> Sälj: Antal </label>
                                <ValidationMessage For="() => pageViewModel.SaleHowMany" class="text-danger" />
                            </div>
                        </div>

                        <div class="col-3">
                            <div class="form-floating">
                                <InputNumber @bind-Value="pageViewModel.SalePricePerShares" class="form-control" />
                                <label for="SalePricePerShares"> Sälj: Pris per aktie </label>
                                <ValidationMessage For="() => pageViewModel.SalePricePerShares" class="text-danger" />
                            </div>
                        </div>

                        <div class="col-3">
                            <div class="form-floating">
                                <InputNumber @bind-Value="pageViewModel.SaleBrokerage" class="form-control" />
                                <label for="SaleBrokerage"> Sälj: Courtage </label>
                                <ValidationMessage For="() => pageViewModel.SaleBrokerage" class="text-danger" />
                            </div>
                        </div>

                    </div>

                    <br />

                    <div style="text-align:center" hidden="@ShowOrHideAddNewButton">
                        <button @onclick="HideNewOrChangesForm" type="submit" style="text-align:center" class="btn btn-outline-success btn-sm"> Lägg till köpt aktie </button>

                        <br /> <br />

                    </div>

                    <div style="text-align:center" hidden="@ShowOrHideEditButton">
                        <button @onclick="HideNewOrChangesForm" type="submit" style="text-align:center" class="btn btn-outline-warning btn-sm"> Ändra </button>

                        <br /> <br />

                    </div>

                    <div style="text-align:center" hidden="@ShowOrHideButtonAddMoreShares">
                        <button @onclick="AddMoreButton" type="button" style="text-align:center" class="btn btn-outline-success btn-sm"> Köp mer </button>

                        <br /> <br />

                    </div>

                    <div style="text-align:center" hidden="@ShowOrHideSaleButton">
                        <button @onclick="@(() => OpenDeleteWindow())" type="button" style="text-align:center" class="btn btn-outline-danger btn-sm"> Sälja </button>

                        <div class="modal @ModalClassSale" tabindex="-1" role="dialog" style="display:@ModalDisplaySale">
                            <div class="modal-dialog" role="document" style="width:400px">
                                <div class="modal-content">
                                    
                                    <br />
                                    <h5> Vill du sälja aktien: <strong> @pageViewModel.CompanyName? </strong> </h5>
                                    <br />
                                    <h5> Antal aktier: <strong> @pageViewModel.SaleHowMany av @pageViewModel.HowMany </strong> </h5>
                                    <br />

                                    <div class="modal-footer">
                                        <button type="button" class="btn btn-outline-danger" @onclick="@(() => SellButton())"> Sälja </button>
                                        <button type="button" class="btn btn-outline-secondary" data-dismiss="modal" @onclick="() => CloseSaleWindow()"> Ångra </button>
                                    </div>
                                </div>
                            </div>
                        </div>

                        @if (ShowBackdropSale)
                        {
                            <div class="modal-backdrop fade show"></div>
                        }

                        <br /><br />

                    </div>

                    <div style="text-align:center">
                        <button @onclick="RefreshPage" type="button" style="text-align:center" class="btn btn-outline-secondary btn-sm"> Tillbaka </button>
                    </div>

                    <br /> <br />

                </EditForm>
            </div>

            @* View - Desktop *@
            <div id="desktop">
                <div class="card-body">
                    <QuickGrid Items="@queryable" Pagination="pagination">

                        <PropertyColumn Title="Datum" Property="@(c => c.DateOfPurchase)" Format="yyyy-MM-dd" Sortable="true" />
                        <PropertyColumn Title="Företag" Property="@(c => c.CompanyName)" Sortable="true" />
                        <PropertyColumn Title="Typ" Property="@(c => c.TypeOfShares)" Sortable="true" />
                        <PropertyColumn Title="Antal" Property="@(c => c.HowMany)" Sortable="true" />
                        <PropertyColumn Title="Pris per aktie (snitt vid köp av fler)" Property="@(c => c.PricePerShares)" Sortable="true" />
                        <PropertyColumn Title="Inköpsvärdet" Property="@(c => c.Amount)" Sortable="true" />
                        <PropertyColumn Title="Valuta" Property="@(c => c.Currency)" Sortable="true" />

                        <TemplateColumn Title="Info">

                            <div class="btn-group" role="group">
                                <button title="Info" id="btnGroupDrop1" type="button" class="btn btn-outline-secondary btn-sm dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">
                                    Info
                                </button>
                                <ul class="dropdown-menu" aria-labelledby="btnGroupDrop1">
                                    <li class="dropdown-item"><button class="btn btn-outline-info btn-sm" @onclick="@(() => Info(context))"> All info </button></li>
                                    <li class="dropdown-item"><button class="btn btn-outline-warning btn-sm" @onclick="@(() => Edit(context))"> Ändra </button></li>
                                    <li class="dropdown-item"><button class="btn btn-outline-success btn-sm" @onclick="@(() => AddMore(context))"> Köp mera </button></li>
                                    <li class="dropdown-item"><button class="btn btn-outline-dark btn-sm" @onclick="@(() => Sell(context))"> Sälj </button></li>
                                    <li class="dropdown-item"><button class="btn btn-outline-danger btn-sm" @onclick="@(() => OpenDeleteWindow())"> Ta bort </button></li>
                                </ul>
                            </div>

                            <div class="modal @ModalClass" tabindex="-1" role="dialog" style="display:@ModalDisplay">
                                <div class="modal-dialog" role="document">
                                    <div class="modal-content">
                                        <div class="modal-header">
                                            <br />
                                            <h5 class="modal-title"> Vill du ta bort aktien? </h5>
                                            <br />
                                        </div>
                                        <div class="modal-footer">
                                            <button type="button" class="btn btn-outline-danger" @onclick="@(() => Delete())"> Ta bort aktie </button>
                                            <button type="button" class="btn btn-outline-secondary" data-dismiss="modal" @onclick="() => CloseDeleteWindow()"> Ångra </button>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            @if (ShowBackdrop)
                            {
                                <div class="modal-backdrop fade show"></div>
                            }

                        </TemplateColumn>
                    </QuickGrid>

                    <div class="card-footer"><Paginator State="@pagination" /></div>

                    <br />
                    <br />

                </div>
            </div>

            @* View - Mobile *@
            <div id="mobile">
                <div class="card-body">
                    <QuickGrid Items="@queryable" Pagination="pagination">

                        <PropertyColumn Title="Företag" Property="@(c => c.CompanyName)" Sortable="true" />

                        <TemplateColumn Title="Info">

                            <div class="btn-group" role="group">
                                <button title="Info" id="btnGroupDrop1" type="button" class="btn btn-outline-secondary btn-sm dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">
                                    Info
                                </button>
                                <ul class="dropdown-menu" aria-labelledby="btnGroupDrop1">
                                    <li class="dropdown-item"><button class="btn btn-outline-info btn-sm" @onclick="@(() => Info(context))"> All info </button></li>
                                    <li class="dropdown-item"><button class="btn btn-outline-warning btn-sm" @onclick="@(() => Edit(context))"> Ändra </button></li>
                                    <li class="dropdown-item"><button class="btn btn-outline-success btn-sm" @onclick="@(() => AddMore(context))"> Köp mera </button></li>
                                    <li class="dropdown-item"><button class="btn btn-outline-dark btn-sm" @onclick="@(() => Sell(context))"> Sälj </button></li>
                                    <li class="dropdown-item"><button class="btn btn-outline-danger btn-sm" @onclick="@(() => OpenDeleteWindow())"> Ta bort </button></li>
                                </ul>
                            </div>

                            <div class="modal @ModalClass" tabindex="-1" role="dialog" style="display:@ModalDisplay">
                                <div class="modal-dialog" role="document">
                                    <div class="modal-content">
                                        <div class="modal-header">
                                            <br />
                                            <h5 class="modal-title"> Vill du ta bort aktien? </h5>
                                            <br />
                                        </div>
                                        <div class="modal-footer">
                                            <button type="button" class="btn btn-outline-danger" @onclick="@(() => Delete())"> Ta bort aktie </button>
                                            <button type="button" class="btn btn-outline-secondary" data-dismiss="modal" @onclick="() => CloseDeleteWindow()"> Ångra </button>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            @if (ShowBackdrop)
                            {
                                <div class="modal-backdrop fade show"></div>
                            }

                        </TemplateColumn>
                    </QuickGrid>

                    <br />
                    <br />

                </div>
            </div>

        </div>
    </div>
</div>

@* Footer *@
<div>

    <br /> <br />

    <div class="footer" align="center">
        <p> Copyright 2023 - @DateTime.Now.Year</p>
    </div>

    <br /> <br />

</div>

@* Back-End *@
@code
{
    [SupplyParameterFromForm]
    private SharesPurchasedViewModel pageViewModel { get; set; } = new();
    PaginationState pagination = new PaginationState { ItemsPerPage = 30 };
    private IQueryable<SharesPurchasedViewModel> queryable = Enumerable.Empty<SharesPurchasedViewModel>().AsQueryable();

    // Modol window settings
    public Guid Guid = Guid.NewGuid();
    public string ModalDisplay = "none;";
    public string ModalClass = "";
    public bool ShowBackdrop = false;

    public Guid GuidSale = Guid.NewGuid();
    public string ModalDisplaySale = "none;";
    public string ModalClassSale = "";
    public bool ShowBackdropSale = false;

    // Hide button and fields
    private bool HideNewOrChangesFields { get; set; } = false;
    private bool ShowOrHideCreateButton { get; set; } = false;
    private bool ShowOrHideEditButton { get; set; } = false;
    private bool ShowOrHideAddNewButton { get; set; } = false;
    private bool DisabledForm { get; set; } = false;
    private bool BuyMore { get; set; } = true;
    private bool ShowOrHideButtonAddMoreShares { get; set; } = true;
    private bool Sale { get; set; } = true;
    private bool ShowOrHideSaleButton { get; set; } = true;
    private bool ShowOrHideErrorMessage { get; set; } = false;

    // Text messeges
    private string ErrorMessage { get; set; } = string.Empty;

    // Navigation items
    private List<NavigationItem> NavigationItems = new()
    {
        new NavigationItem("SharesIndexYearsPage", "Start"),
        new NavigationItem("SharesImportsPage", "Importera"),
        new NavigationItem("SharesPurchasedPage", "Köpta aktier"),
        new NavigationItem("SharesSoldPage", "Sålda aktier"),
        new NavigationItem("SharesPurchasedFundsPage", "Köpta fonder"),
        new NavigationItem("SharesSoldFundsPage", "Sålda fonder"),
        new NavigationItem("SharesDividendPage", "Utdelningar"),
        new NavigationItem("SharesFeePage", "Avgifter"),
        new NavigationItem("SharesDepositMoneyPage", "Banköverföringar"),
        new NavigationItem("SharesInterestRatesPage", "Räntor"),
        new NavigationItem("SharesOtherImportsPage", "Manuell hantering"),
        new NavigationItem("SharesErrorHandlingPage", "Felhantering")
    };

    private class NavigationItem
    {
        public string Href { get; }
        public string Text { get; }

        public NavigationItem(string href, string text)
        {
            Href = href;
            Text = text;
        }
    }

    // Load data from database to the Queryable container
    private async Task ConvertListToQueryableAsync()
    {
        List<SharesPurchaseds> items = await db.SharesPurchaseds.OrderBy(c => c.SharesPurchasedId).ToListAsync();

        if (!items.Any()) return;

        queryable = items
            .Select(model => BackEndClass.ChangeFromModelToViewModel(model))
            .AsQueryable();

        pagination.TotalItemCountChanged += (sender, EventArgs) => StateHasChanged();
    }

    protected override async Task OnInitializedAsync() => await ConvertListToQueryableAsync();

    private async Task RefreshPage() => await Task.Run(() => Navigation.Refresh(true));

    private void HideNewOrChangesForm()
    {
        HideNewOrChangesFields = !HideNewOrChangesFields;
        ShowOrHideCreateButton = true;
        ShowOrHideEditButton = true;
    }

    private async Task AddOrEdit()
    {
        DisabledForm = false;

        try
        {
            if (pageViewModel.SharesPurchasedId > 0)
                ErrorMessage = await BackEndClass.Edit(pageViewModel);
            else
                ErrorMessage = await BackEndClass.Add(pageViewModel, false);

            if (!string.IsNullOrEmpty(ErrorMessage))
            {
                HideNewOrChangesForm();
                ShowOrHideErrorMessage = true;
                ShowOrHideEditButton = pageViewModel.SharesPurchasedId > 0;
                ShowOrHideAddNewButton = pageViewModel.SharesPurchasedId == 0;
            }
            else
            {
                pageViewModel = new();
                await RefreshPage();
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Ett fel uppstod! Felmeddelande: {ex.Message}";
            ShowOrHideErrorMessage = true;
        }
    }

    private void AddMore(SharesPurchasedViewModel vm)
    {
        if (vm == null) return;

        HideNewOrChangesForm();
        BuyMore = false;
        DisabledForm = true;
        ShowOrHideButtonAddMoreShares = false;
        ShowOrHideAddNewButton = true;
        pageViewModel = vm;
    }

    private async Task AddMoreButton()
    {
        ErrorMessage = await BackEndClass.AddMore(pageViewModel, false);

        if (!string.IsNullOrEmpty(ErrorMessage))
        {
            ShowOrHideErrorMessage = false;
            HideNewOrChangesFields = true;
            ShowOrHideEditButton = false;
            return;
        }
        else
        {
            pageViewModel = new();
            await RefreshPage();
        }
    }

    private void Info(SharesPurchasedViewModel vm)
    {
        if (vm == null) return;

        HideNewOrChangesForm();
        ShowOrHideAddNewButton = true;
        DisabledForm = true;
        pageViewModel = vm;
    }

    private void Edit(SharesPurchasedViewModel vm)
    {
        if (vm == null) return;

        DisabledForm = false;
        ShowOrHideEditButton = false;
        ShowOrHideAddNewButton = true;
        HideNewOrChangesFields = true;
        pageViewModel = vm;
    }

    private void Sell(SharesPurchasedViewModel vm)
    {
        if (vm == null) return;

        HideNewOrChangesForm();
        Sale = false;
        DisabledForm = true;
        ShowOrHideSaleButton = false;
        ShowOrHideAddNewButton = true;
        pageViewModel = vm;
    }

    private async Task SellButton()
    {
        ErrorMessage = await BackEndClass.Sell(pageViewModel, false, ISharesFeeClass);

        if (!string.IsNullOrEmpty(ErrorMessage))
        {
            ShowOrHideErrorMessage = false;
            HideNewOrChangesFields = true;
            ShowOrHideEditButton = false;
        }
        else
        {
            pageViewModel = new();
            await RefreshPage();
        }
    }

    private async Task Delete()
    {
        if (!db.SharesPurchaseds.Any())
        {
            ErrorMessage = "Det finns inga köpa aktie att ta bort!";
            ShowOrHideErrorMessage = true;
            return;
        }

        try
        {
            SharesPurchaseds? model = await db.SharesPurchaseds.FirstOrDefaultAsync(a => a.SharesPurchasedId == pageViewModel.SharesPurchasedId);
            if (model == null)
            {
                ErrorMessage = "Hittar ingen köpt aktie att ta bort!";
                ShowOrHideErrorMessage = true;
                return;
            }

            ErrorMessage = await BackEndClass.Delete(model, pageViewModel, false);

            if (!string.IsNullOrEmpty(ErrorMessage))
                ShowOrHideErrorMessage = true;
            else
            {
                pageViewModel = new();
                await RefreshPage();
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Ett fel uppstod! Felmeddelande: {ex.Message}";
            ShowOrHideErrorMessage = true;
        }
    }

    private void ToggleModal(ref string modalDisplay, ref string modalClass, ref bool showBackdrop, bool isOpen)
    {
        modalDisplay = isOpen ? "block;" : "none";
        modalClass = isOpen ? "Show" : "";
        showBackdrop = isOpen;
        StateHasChanged();
    }

    private void OpenSaleWindow() => ToggleModal(ref ModalDisplay, ref ModalClass, ref ShowBackdrop, true);

    private void CloseSaleWindow() => ToggleModal(ref ModalDisplay, ref ModalClass, ref ShowBackdrop, false);

    private void OpenDeleteWindow() => ToggleModal(ref ModalDisplay, ref ModalClass, ref ShowBackdrop, true);

    private void CloseDeleteWindow() => ToggleModal(ref ModalDisplay, ref ModalClass, ref ShowBackdrop, false);
}