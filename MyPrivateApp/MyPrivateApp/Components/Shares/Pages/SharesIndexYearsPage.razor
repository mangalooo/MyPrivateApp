
@page "/SharesIndexYearsPage"

@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using MyPrivateApp.Client.ViewModels
@using MyPrivateApp.Components.Enum
@using MyPrivateApp.Components.Shares.Classes
@using MyPrivateApp.Components.Shares.Classes.Interface
@using MyPrivateApp.Components.ViewModels.SharesViewModels
@using MyPrivateApp.Data
@using MyPrivateApp.Data.Models
@using MyPrivateApp.Data.Models.SharesModels
@using static Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions

@rendermode @(new InteractiveServerRenderMode(prerender:false))

@inject IDbContextFactory<ApplicationDbContext> IDbContextFactory
@inject NavigationManager Navigation
@inject ISharesIndexYearsClass BackEndClass

<PageTitle> Aktier </PageTitle>

<br />

@* Header *@
<div>

    @* Navigation *@
    <div class="navigation">

        <div id="desktop" class="text-center">
            <div class="btn-group">
                @foreach (var item in NavigationItems)
                {
                    <NavLink href="@item.Href" type="button" class="btn btn-outline-dark btn-sm"> @item.Text </NavLink>
                }
            </div>
        </div>

        <div id="mobile">
            <div class="btn-group" role="group">
                <button title="Info" id="btnGroupDrop1" type="button" class="btn btn-outline-secondary btn-sm dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">
                    Alla aktier sidor
                </button>
                <ul class="dropdown-menu" aria-labelledby="btnGroupDrop1">
                    @foreach (var item in NavigationItems)
                    {
                        <li class="dropdown-item">
                            <NavLink href="@item.Href" type="button" class="btn btn-outline-dark btn-sm"> @item.Text </NavLink>
                        </li>
                    }
                </ul>
            </div>
        </div>
    </div>

    <br /> <br />

    <h1 align="center"> Resultat </h1>

    <br />

    <h3 align="center">Total vinst: @TotalProfitsOrLosses</h3>

    <br />

    <div align="center">
        <button class="btn btn-outline-success btn-sm" @onclick="@CalculateLastYearsResults"> Beräkna förra årets resultat </button>
    </div>

    @if (ShowOrHideErrorMessage)
    {
        <br />

        <div style="text-align:center">
            <Alert Color="AlertColor.Danger">
                <Icon Name="IconName.ExclamationTriangleFill" class="me-2"></Icon>
                <b>@ErrorMessage</b>
            </Alert>
        </div>
    }

    @if (ShowOrHideInfoMessage)
        {
            <br />

            <div align="center">
                <Alert Color="AlertColor.Info">
                    <b>@InfoMessage</b>
                </Alert>
            </div>
        }

    <br />

</div>

@* Views *@
<div class="container">
    <div class="col-md-16">
        <div class="card">

            @* View - Desktop *@
            <div id="desktop">
                <div id="desktop" class="card-body">
                    <QuickGrid Items="@queryable" Pagination="pagination">

                        <PropertyColumn Title="År" Property="@(c => c.Year)" Sortable="true">
                            <ColumnOptions>
                                <div class="search-box">
                                    <input type="search" autofocus @onchange="SearchYear" />
                                </div>
                            </ColumnOptions>
                        </PropertyColumn>

                        <PropertyColumn Title="Vinst/förlust" Property="@(c => c.MoneyProfitOrLossYear)" Sortable="true" />
                        <PropertyColumn Title="Vinst/förlust i %" Property="@(c => c.PercentProfitOrLossYear)" Sortable="true" />
                        <PropertyColumn Title="Aktier" Property="@(c => c.SharesYear)" Sortable="true" />
                        <PropertyColumn Title="Fonder" Property="@(c => c.FundsYear)" Sortable="true" />
                        <PropertyColumn Title="Ränta" Property="@(c => c.InterestRatesYear)" Sortable="true" />
                        <PropertyColumn Title="Utdelning" Property="@(c => c.DividendYear)" Sortable="true" />
                        <PropertyColumn Title="Avgifter" Property="@(c => "-" + c.FeeYear)" Sortable="true" />
                        <PropertyColumn Title="Skatt" Property="@(c => "-" + c.TaxYear)" Sortable="true" />
                        <PropertyColumn Title="Courtage" Property="@(c => "-" + c.BrokerageYear)" Sortable="true" />
                        <TemplateColumn Title="Info">

                            <div class="btn-group" role="group">
                                <button title="Info" id="btnGroupDrop1" type="button" class="btn btn-outline-secondary btn-sm dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">
                                    Info
                                </button>
                                <ul class="dropdown-menu" aria-labelledby="btnGroupDrop1">
                                    <li class="dropdown-item"><button class="btn btn-outline-info btn-sm" @onclick="@(() => Info(context))"> All info </button></li>
                                    <li class="dropdown-item"><button class="btn btn-outline-danger btn-sm" @onclick="@(() => OpenDeleteWindow(context))"> Ta bort </button></li>
                                </ul>
                            </div>

                            <div class="modal @ModalClass" tabindex="-1" role="dialog" style="display:@ModalDisplay">
                                <div class="modal-dialog" role="document">
                                    <div class="modal-content">
                                        <div class="modal-header">
                                            <h5 class="modal-title"> Vill du ta bort @pageViewModel.Year resultat? </h5>
                                        </div>
                                        <div class="modal-footer">
                                            <button type="button" class="btn btn-outline-danger" @onclick="@(() => Delete())"> Ta bort </button>
                                            <button type="button" class="btn btn-outline-secondary" data-dismiss="modal" @onclick="() => CloseDeleteWindow()"> Ångra </button>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            @if (ShowBackdrop)
                            {
                                <div class="modal-backdrop fade show"></div>
                            }

                        </TemplateColumn>
                    </QuickGrid>

                    <div class="card-footer"><Paginator State="@pagination" /></div>

                    <br /> <br />

                </div>
            </div>

            @* View - Mobile *@
            <div id="mobile">
                <div class="card-body">
                    <QuickGrid Items="@queryable" Pagination="pagination">

                        <PropertyColumn Title="År" Property="@(c => c.Year)" Sortable="true">
                            <ColumnOptions>
                                <div class="search-box">
                                    <input type="search" autofocus @onchange="SearchYear" />
                                </div>
                            </ColumnOptions>
                        </PropertyColumn>

                        <PropertyColumn Title="%" Property="@(c => c.PercentProfitOrLossYear)" Sortable="true" />
                        <TemplateColumn Title="Info">

                            <div class="btn-group" role="group">
                                <button title="Info" id="btnGroupDrop1" type="button" class="btn btn-outline-secondary btn-sm dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">
                                    Info
                                </button>
                                <ul class="dropdown-menu" aria-labelledby="btnGroupDrop1">
                                    <li class="dropdown-item"><button class="btn btn-outline-info btn-sm" @onclick="@(() => Info(context))"> All info </button></li>
                                    <li class="dropdown-item"><button class="btn btn-outline-danger btn-sm" @onclick="@(() => OpenDeleteWindow(context))"> Ta bort </button></li>
                                </ul>
                            </div>

                            <div class="modal @ModalClass" tabindex="-1" role="dialog" style="display:@ModalDisplay">
                                <div class="modal-dialog" role="document">
                                    <div class="modal-content">
                                        <div class="modal-header">
                                            <h5 class="modal-title"> Vill du ta bort @pageViewModel.Year resultat? </h5>
                                        </div>
                                        <div class="modal-footer">
                                            <button type="button" class="btn btn-outline-danger" @onclick="@(() => Delete())"> Ta bort </button>
                                            <button type="button" class="btn btn-outline-secondary" data-dismiss="modal" @onclick="() => CloseDeleteWindow()"> Ångra </button>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            @if (ShowBackdrop)
                            {
                                <div class="modal-backdrop fade show"></div>
                            }

                        </TemplateColumn>
                    </QuickGrid>

                    <br /> <br />

                </div>
            </div>
        </div>
    </div>
</div>

@* Footer *@
<div>

    <br /> <br />

    <div class="footer" align="center">
        <p> Copyright 2023 - @DateTime.Now.Year</p>
    </div>

    <br /> <br />

</div>

@* Back-End *@
@code
{
    [SupplyParameterFromForm]
    private SharesProfitOrLossYearViewModel pageViewModel { get; set; } = new();
    PaginationState pagination = new PaginationState { ItemsPerPage = 30 };
    private IQueryable<SharesProfitOrLossYearViewModel> queryable = Enumerable.Empty<SharesProfitOrLossYearViewModel>().AsQueryable();

    // Holds temporary id to delete items
    private int TemporaryId { get; set; } = 0;

    // Modol window settings
    public Guid Guid = Guid.NewGuid();
    public string ModalDisplay = "none;";
    public string ModalClass = "";
    public bool ShowBackdrop = false;

    // Hide button and fields
    private bool HideNewOrChangesFields { get; set; } = false;
    private bool DisabledForm { get; set; } = false;
    private string TotalProfitsOrLosses = string.Empty;

    // Text messeges
    private string ErrorMessage { get; set; } = string.Empty;
    private bool ShowOrHideErrorMessage { get; set; } = false;
    private string InfoMessage { get; set; } = string.Empty;
    private bool ShowOrHideInfoMessage { get; set; } = false;

    private void ShowErrorMessage(string errorMessage)
    {
        ErrorMessage = errorMessage;
        ShowOrHideErrorMessage = true;
    }

    // Navigation items
    private List<NavigationItem> NavigationItems = new()
    {
        new NavigationItem("SharesIndexYearsPage", "Start"),
        new NavigationItem("SharesImportsPage", "Importera"),
        new NavigationItem("SharesPurchasedPage", "Köpta aktier"),
        new NavigationItem("SharesSoldPage", "Sålda aktier"),
        new NavigationItem("SharesPurchasedFundsPage", "Köpta fonder"),
        new NavigationItem("SharesSoldFundsPage", "Sålda fonder"),
        new NavigationItem("SharesDividendPage", "Utdelningar"),
        new NavigationItem("SharesFeePage", "Avgifter"),
        new NavigationItem("SharesDepositMoneyPage", "Banköverföringar"),
        new NavigationItem("SharesInterestRatesPage", "Räntor"),
        new NavigationItem("SharesOtherImportsPage", "Manuell hantering"),
        new NavigationItem("SharesErrorHandlingPage", "Felhantering")
    };

    private class NavigationItem
    {
        public string Href { get; }
        public string Text { get; }

        public NavigationItem(string href, string text)
        {
            Href = href;
            Text = text;
        }
    }

    // Load data from database to the Queryable container
    private async Task ConvertListToQueryableAsync()
    {
        try
        {
            using ApplicationDbContext db = await IDbContextFactory.CreateDbContextAsync() ?? throw new Exception("ConvertListToQueryableAsync: db == null!");

            List<SharesProfitOrLossYears> items = await db.SharesProfitOrLossYears.OrderBy(c => c.SharesProfitOrLossYearsId).ToListAsync();

            if (!items.Any())
            {
                InfoMessage = "Finns ingen data att visa!";
                ShowOrHideInfoMessage = true;
                return;
            }

            queryable = items
                .Select(model => BackEndClass.ChangeFromModelToViewModel(model))
                .AsQueryable();

            pagination.TotalItemCountChanged += (sender, EventArgs) => StateHasChanged();
        }
        catch (Exception ex)
        {
            ShowErrorMessage($"ConvertListToQueryableAsync. Felmeddelande: {ex.Message}");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        TotalProfitsOrLosses = await GetTotalProfitsOrLosses();
        await ConvertListToQueryableAsync();
    }

    private async Task RefreshPage() => await Task.Run(() => Navigation.Refresh(true));

    private void Info(SharesProfitOrLossYearViewModel vm)
    {
        HideNewOrChangesFields = !HideNewOrChangesFields;
        DisabledForm = true;
        pageViewModel = vm;
    }

    private async Task Delete()
    {
        try
        {
            using ApplicationDbContext db = await IDbContextFactory.CreateDbContextAsync() ?? throw new Exception("Delete: db == null!");

            if (!db.SharesFees.Any())
            {
                ShowErrorMessage("Det finns inga årsredovisning att ta bort!");
                return;
            }

            SharesProfitOrLossYears? model = await db.SharesProfitOrLossYears.FirstOrDefaultAsync(a => a.SharesProfitOrLossYearsId == TemporaryId);

            if (model == null)
            {
                ShowErrorMessage("Hittar ingen årsredovisning att ta bort!");
                return;
            }

            ErrorMessage = await BackEndClass.Delete(model);

            if (!string.IsNullOrEmpty(ErrorMessage))
                ShowOrHideErrorMessage = true;
            else
            {
                pageViewModel = new();
                await RefreshPage();
            }
        }
        catch (Exception ex)
        {
            ShowErrorMessage($"Ta bort. Felmeddelande: {ex.Message}");
        }
    }

    private void ToggleModal(ref string modalDisplay, ref string modalClass, ref bool showBackdrop, bool isOpen)
    {
        modalDisplay = isOpen ? "block;" : "none";
        modalClass = isOpen ? "Show" : "";
        showBackdrop = isOpen;
        StateHasChanged();
    }

    private void OpenDeleteWindow(SharesProfitOrLossYearViewModel vm)
    {
        TemporaryId = vm.SharesProfitOrLossYearsId;
        ToggleModal(ref ModalDisplay, ref ModalClass, ref ShowBackdrop, true);
    }

    private void CloseDeleteWindow() => ToggleModal(ref ModalDisplay, ref ModalClass, ref ShowBackdrop, false);

    private async Task CalculateLastYearsResults()
    {
        ErrorMessage = await BackEndClass.CalculateLastYearsResults();

        if (!string.IsNullOrEmpty(ErrorMessage))
            ShowOrHideErrorMessage = true;
        else
        {
            pageViewModel = new();
            await RefreshPage();
        }
    }

    private async Task<string> GetTotalProfitsOrLosses()
    {
        try
        {
            SharesTotalProfitsOrLosses sharesTotalProfitsOrLosses = await BackEndClass.GetTotalProfitsOrLosses(1);

            if (sharesTotalProfitsOrLosses == null)
            {
                ShowOrHideErrorMessage = true;
                return ErrorMessage = "Hittade inget totalt resultat!";
            }

            return sharesTotalProfitsOrLosses.TotalProfitOrLoss.ToString("#,##0.00");
        }
        catch (Exception ex)
        {
            ShowOrHideErrorMessage = true;
            return ErrorMessage = $"Fel vid hämtning av totala vinster eller förluster. Felmeddelande: {ex.Message}";
        }
    }

    private void SetQuery(IEnumerable<SharesProfitOrLossYears> result)
    {
        queryable = result
            .OrderBy(c => c.SharesProfitOrLossYearsId)
            .Select(model => BackEndClass.ChangeFromModelToViewModel(model))
            .AsQueryable();
    }

    private async Task SearchYear(ChangeEventArgs e)
    {
        try
        {
            using ApplicationDbContext db = await IDbContextFactory.CreateDbContextAsync() ?? throw new Exception("Delete: db == null!");

            string searchTerm = e.Value?.ToString();

            if (!string.IsNullOrEmpty(searchTerm))
            {
                var result = db.SharesProfitOrLossYears
                    .Where(c => c.Year != null && c.Year.Contains(searchTerm, StringComparison.OrdinalIgnoreCase));
                SetQuery(result);
            }
            else
                await RefreshPage();
        }
        catch (Exception ex)
        {
            ShowErrorMessage($"Sök år. Felmeddelande: {ex.Message}");
        }     
    }
}