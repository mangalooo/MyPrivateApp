@page "/SharesSold"

@using MyPrivateApp.Client.ViewModels
@using MyPrivateApp.Components.Enum
@using MyPrivateApp.Components.ViewModels.SharesViewModels
@using MyPrivateApp.Data
@using MyPrivateApp.Data.Models
@using Microsoft.AspNetCore.Components.QuickGrid
@using MyPrivateApp.Data.Models.SharesModels

@rendermode InteractiveServer

@inject ApplicationDbContext db;
@inject NavigationManager Navigation

<PageTitle> Aktier </PageTitle>

<br />

<div class="btn-group" role="group">
    <button title="Info" id="btnGroupDrop1" type="button" class="btn btn-outline-secondary btn-sm dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">
        Alla aktier sidor
    </button>
    <ul class="dropdown-menu" aria-labelledby="btnGroupDrop1">
        <li class="dropdown-item"><NavLink href="Shares" type="button" class="btn btn-outline-dark btn-sm"> Start </NavLink></li>
        <li class="dropdown-item"><NavLink href="SharesPurchased" type="button" class="btn btn-outline-dark btn-sm"> Köpta aktier </NavLink></li>
        <li class="dropdown-item"><NavLink href="SharesSold" type="button" class="btn btn-outline-dark btn-sm">Sålda aktier</NavLink></li>
        <li class="dropdown-item"><NavLink href="SharesDividend" type="button" class="btn btn-outline-dark btn-sm">Utdelningar</NavLink></li>
        <li class="dropdown-item"><NavLink href="SharesTaxAndBrokerage" type="button" class="btn btn-outline-dark btn-sm">Skatter</NavLink></li>
        <li class="dropdown-item"><NavLink href="SharesImports" type="button" class="btn btn-outline-dark btn-sm"> Importera </NavLink></li>
        <li class="dropdown-item"><NavLink href="SharesDepositMoney" type="button" class="btn btn-outline-dark btn-sm"> Ta ut eller sätt in pengar </NavLink></li>
        <li class="dropdown-item"><NavLink href="SharesInterestRates" type="button" class="btn btn-outline-dark btn-sm"> Räntor </NavLink></li>
        <li class="dropdown-item"><NavLink href="SharesOtherImports" type="button" class="btn btn-outline-dark btn-sm"> Manuell hantering </NavLink></li>
        <li class="dropdown-item"><NavLink href="SharesErrorHandling" type="button" class="btn btn-outline-dark btn-sm">Felhantering</NavLink></li>
    </ul>
</div>

<br />
<br />

<h1 style="text-align:center"> Sålda aktier </h1>

<br />

<div style="text-align:center">
    <button class="btn btn-outline-success btn-sm" @onclick="@HideNewOrChangesSharesSoldForm" hidden="@ShowOrHideCreateButton"> Sälj aktie</button>
</div>

<br />
<br />

<div class="container">
    <div class="col-md-12">
        <div class="card">
            <div class="card-header">
                <EditForm Model="sharesSolds" OnSubmit="CreateOrUpdatePurchasedShares" FormName="CreateOrUpdatePurchasedShares" Enhance hidden="@(!HideNewOrChangesPurchasedSharesFields)">

                     <DataAnnotationsValidator />

                     <ValidationSummary class="text-danger" role="alert" />

                     <div class="row">

                         <div id="mobile" class="col-3" />

                         <div class="col-3">
                             <div class="form-floating">
                                 <InputText @bind-Value="sharesSolds.CompanyName" class="form-control" disabled="@DisabledForm" />
                                 <label for="CompanyName"> Företag </label>
                                 <ValidationMessage For="() => sharesSolds.CompanyName" class="text-danger" />
                             </div>
                         </div>

                         <div class="col-3">
                             <div class="form-floating">
                                 <InputText @bind-Value="sharesSolds.TypeOfShares" class="form-control" disabled="@DisabledForm" />
                                 <label for="TypeOfShares"> Typ av aktie </label>
                                 <ValidationMessage For="() => sharesSolds.TypeOfShares" class="text-danger" />
                             </div>
                         </div>

                         <div class="col-3">
                             <div class="form-floating">
                                 <InputNumber @bind-Value="sharesSolds.HowMany" class="form-control" disabled="@DisabledForm" />
                                 <label for="HowMany"> Antal </label>
                                 <ValidationMessage For="() => sharesSolds.HowMany" class="text-danger" />
                             </div>
                         </div>

                         <div class="col-3">
                             <div class="form-floating">
                                 <InputNumber @bind-Value="sharesSolds.Brokerage" class="form-control" disabled="@DisabledForm" />
                                 <label for="Brokerage"> Courtage </label>
                                 <ValidationMessage For="() => sharesSolds.Brokerage" class="text-danger" />
                             </div>
                         </div>

                     </div>

                     <br />

                     <div class="row">

                         <div id="mobile" class="col-3" />

                         <div class="col-3">
                             <div class="form-floating">
                                 <InputDate @bind-Value="sharesSolds.DateOfPurchase" class="form-control" disabled="@DisabledForm" />
                                 <label for="DateOfPurchase"> Inköpsdatum </label>
                                 <ValidationMessage For="() => sharesSolds.DateOfPurchase" class="text-danger" />
                             </div>
                         </div>

                         <div class="col-3">
                             <div class="form-floating">
                                 <InputNumber @bind-Value="sharesSolds.Amount" class="form-control" disabled="true" />
                                 <label for="Amount"> Inköpsvärdet </label>
                                 <ValidationMessage For="() => sharesSolds.Amount" class="text-danger" />
                             </div>
                         </div>

                         <div class="col-3">
                             <div class="form-floating">
                                 <InputDate @bind-Value="sharesSolds.DateOfSold" class="form-control" disabled="@DisabledForm" />
                                 <label for="DateOfSold"> Säljsdatum </label>
                                 <ValidationMessage For="() => sharesSolds.DateOfSold" class="text-danger" />
                             </div>
                         </div>

                         <div class="col-3">
                             <div class="form-floating">
                                 <InputNumber @bind-Value="sharesSolds.AmountSold" class="form-control" disabled="true" />
                                 <label for="AmountSold"> Säljvärdet </label>
                                 <ValidationMessage For="() => sharesSolds.AmountSold" class="text-danger" />
                             </div>
                         </div>
                     </div>

                     <br />

                     <div class="row">

                         <div id="mobile" class="col-3" />

                         <div class="col-3">
                             <div class="form-floating">
                                 <InputNumber @bind-Value="sharesSolds.PricePerShares" class="form-control" disabled="@DisabledForm" />
                                 <label for="PricePerShares"> Pris per aktie </label>
                                 <ValidationMessage For="() => sharesSolds.PricePerShares" class="text-danger" />
                             </div>
                         </div>

                         <div class="col-3">
                             <div class="form-floating">
                                 <InputNumber @bind-Value="sharesSolds.PricePerSharesSold" class="form-control" disabled="@DisabledForm" />
                                 <label for="PricePerSharesSold"> Pris per såld aktie </label>
                                 <ValidationMessage For="() => sharesSolds.PricePerSharesSold" class="text-danger" />
                             </div>
                         </div>

                         <div class="col-3">
                             <div class="form-floating">
                                 <InputNumber @bind-Value="sharesSolds.MoneyProfitOrLoss" class="form-control" disabled="true" />
                                 <label for="MoneyProfitOrLoss"> Vinst/förlust </label>
                                 <ValidationMessage For="() => sharesSolds.MoneyProfitOrLoss" class="text-danger" />
                             </div>
                         </div>

                         <div class="col-3">
                             <div class="form-floating">
                                 <InputText @bind-Value="sharesSolds.PercentProfitOrLoss" class="form-control" disabled="true" />
                                 <label for="PercentProfitOrLoss"> Vinst/förlust i % </label>
                                 <ValidationMessage For="() => sharesSolds.PercentProfitOrLoss" class="text-danger" />
                             </div>
                         </div>
                     </div>

                     <br />

                     <div class="row">

                         <div class="col-12">
                             <div class="form-floating">
                                 <InputTextArea @bind-Value="sharesSolds.Note" class="form-control" disabled="@DisabledForm" />
                                 <label for="Note"> Anteckningar </label>
                                 <ValidationMessage For="() => sharesSolds.Note" class="text-danger" />
                             </div>
                         </div>
                     </div>

                     <br />

                     <div style="text-align:center">
                         <button hidden="@ShowOrHideAddNewPurchasedSharesButton" @onclick="HideNewOrChangesSharesSoldForm" type="submit" style="text-align:center" class="btn btn-outline-success btn-sm"> Lägg till såld aktie </button>
                     </div>

                     <div style="text-align:center">
                         <button @onclick="HideNewOrChangesSharesSoldForm" hidden="@ShowOrHideEditButton" type="submit" style="text-align:center" class="btn btn-outline-warning btn-sm"> Ändra </button>
                     </div>

                     <br />

                     <div style="text-align:center">
                         <button @onclick="RefreshPage" type="button" style="text-align:center" class="btn btn-outline-secondary btn-sm"> Tillbaka </button>
                     </div>

                     <br />
                     <br />
                 </EditForm>
             </div>

             @* Desktop screen *@
             <div id="desktop">
                 <div class="card-body">
                     <QuickGrid Items="@PurchasedSharesQueryable" Pagination="pagination" align="center">

                        <PropertyColumn Title="Företag" Property="@(c => c.CompanyName)" Sortable="true" />
                        <PropertyColumn Title="Inköpsdatum" Property="@(c => c.DateOfPurchase)" Format="yyyy-MM-dd" Sortable="true" />
                        <PropertyColumn Title="Inköpsvärdet" Property="@(c => c.Amount)" Sortable="true" />
                        <PropertyColumn Title="Säljsdatum" Property="@(c => c.DateOfSold)" Format="yyyy-MM-dd" Sortable="true" />
                        <PropertyColumn Title="Säljvärdet" Property="@(c => c.AmountSold)" Sortable="true" />
                        <PropertyColumn Title="Antal" Property="@(c => c.HowMany)" Sortable="true" />
                        <PropertyColumn Title="Vinst/förlust" Property="@(c => c.MoneyProfitOrLoss)" Sortable="true" />
                        <PropertyColumn Title="Vinst/förlust i %" Property="@(c => c.PercentProfitOrLoss)" Sortable="true" />

                        <TemplateColumn Title="Info">

                            <div class="btn-group" role="group">
                                <button title="Info" id="btnGroupDrop1" type="button" class="btn btn-outline-secondary btn-sm dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">
                                    Info
                                </button>
                                <ul class="dropdown-menu" aria-labelledby="btnGroupDrop1">
                                    <li class="dropdown-item"><button class="btn btn-outline-info btn-sm" @onclick="@(() => InfoSharesPurchased(context))"> All info </button></li>
                                    <li class="dropdown-item"><button class="btn btn-outline-warning btn-sm" @onclick="@(() => EditSharesPurchased(context))"> Ändra </button></li>
                                    <li class="dropdown-item"><button class="btn btn-outline-danger btn-sm" @onclick="@(() => OpenDeleteWindow())"> Ta bort </button></li>
                                </ul>
                            </div>

                            <div class="modal @ModalClass" tabindex="-1" role="dialog" style="display:@ModalDisplay">
                                <div class="modal-dialog" role="document">
                                    <div class="modal-content">
                                        <div class="modal-header">
                                            <h5 class="modal-title"> Vill du ta bort sålda aktien? </h5>
                                        </div>
                                        <div class="modal-footer">
                                            <button type="button" class="btn btn-outline-danger" @onclick="@(() => DeleteSharesPurchased(context))"> Ta bort kontakt </button>
                                            <button type="button" class="btn btn-outline-secondary" data-dismiss="modal" @onclick="() => CloseWindow()"> Ångra </button>
                                        </div>
                                    </div>
                                </div>
                            </div>

                             @if (ShowBackdrop)
                            {
                                <div class="modal-backdrop fade show"></div>
                            }

                        </TemplateColumn>
                    </QuickGrid>

                    <div class="card-footer"><Paginator State="@pagination" /></div>

                    <br />
                    <br />

                </div>
            </div>

            @* Mobile streen *@
            <div id="mobile">
                <div class="card-body">
                    <QuickGrid Items="@PurchasedSharesQueryable" Pagination="pagination" align="center">

                        <PropertyColumn Title="Företag" Property="@(c => c.CompanyName)" Sortable="true" />

                        <TemplateColumn Title="Info">

                            <div class="btn-group" role="group">
                                <button title="Info" id="btnGroupDrop1" type="button" class="btn btn-outline-secondary btn-sm dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">
                                    Info
                                </button>
                                <ul class="dropdown-menu" aria-labelledby="btnGroupDrop1">
                                    <li class="dropdown-item"><button class="btn btn-outline-info btn-sm" @onclick="@(() => InfoSharesPurchased(context))"> All info </button></li>
                                    <li class="dropdown-item"><button class="btn btn-outline-warning btn-sm" @onclick="@(() => EditSharesPurchased(context))"> Ändra </button></li>
                                    <li class="dropdown-item"><button class="btn btn-outline-danger btn-sm" @onclick="@(() => OpenDeleteWindow())"> Ta bort </button></li>
                                </ul>
                            </div>

                            <div class="modal @ModalClass" tabindex="-1" role="dialog" style="display:@ModalDisplay">
                                <div class="modal-dialog" role="document">
                                    <div class="modal-content">
                                        <div class="modal-header">
                                            <h5 class="modal-title"> Vill du ta bort sålda aktien? </h5>
                                        </div>
                                        <div class="modal-footer">
                                            <button type="button" class="btn btn-outline-danger" @onclick="@(() => DeleteSharesPurchased(context))"> Ta bort kontakt </button>
                                            <button type="button" class="btn btn-outline-secondary" data-dismiss="modal" @onclick="() => CloseWindow()"> Ångra </button>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            @if (ShowBackdrop)
                            {
                                <div class="modal-backdrop fade show"></div>
                            }

                        </TemplateColumn>
                    </QuickGrid>

                    <div class="card-footer"><Paginator State="@pagination" /></div>

                    <br />
                    <br />

                </div>
            </div>

        </div>
    </div>
</div>

<br />
<br />

@code
{
    // Modol window settings
    public Guid Guid = Guid.NewGuid();
    public string ModalDisplay = "none;";
    public string ModalClass = "";
    public bool ShowBackdrop = false;

    // Hide button and fields
    private bool HideNewOrChangesPurchasedSharesFields { get; set; } = false;
    private bool ShowOrHideCreateButton { get; set; } = false;
    private bool ShowOrHideEditButton { get; set; } = false;
    private bool ShowOrHideAddNewPurchasedSharesButton { get; set; } = false;
    private bool DisabledForm { get; set; } = false;

    PaginationState pagination = new PaginationState { ItemsPerPage = 10 };
    private IQueryable<SharesSoldViewModel> PurchasedSharesQueryable = Enumerable.Empty<SharesSoldViewModel>().AsQueryable();

    [SupplyParameterFromForm]
    private SharesSoldViewModel sharesSolds { get; set; } = new();

    protected override void OnInitialized() => ConvertListToQueryable();

    private bool CheckProfit(double check)
    {
        string CheckPlusOrMinute = check.ToString().Substring(0, 1);

        if (CheckPlusOrMinute == "-") return false;

        return true;
    }

    private SharesSolds GetSharesSolds(int? id) => db.SharesSolds.FirstOrDefault(r => r.SharesSoldId == id);

    private void CreateOrUpdatePurchasedShares()
    {
        DisabledForm = false;

        SharesSolds getDbSharesSoldModel;
        SharesSolds changesToModel;

        // Update sold shares
        if (sharesSolds.SharesSoldId > 0)
        {
            ShowOrHideCreateButton = true;

            SharesSolds c = db.SharesSolds.FirstOrDefault(p => p.SharesSoldId == sharesSolds.SharesSoldId);

            if (c is null) return;

            getDbSharesSoldModel = GetSharesSolds(sharesSolds.SharesSoldId);

            changesToModel = changesSharesSoldToModel(sharesSolds);

            getDbSharesSoldModel.DateOfPurchase = changesToModel.DateOfPurchase;
            getDbSharesSoldModel.Amount = changesToModel.HowMany * changesToModel.PricePerShares;
            getDbSharesSoldModel.DateOfSold = changesToModel.DateOfSold;
            getDbSharesSoldModel.AmountSold = changesToModel.AmountSold;
            getDbSharesSoldModel.CompanyName = changesToModel.CompanyName;
            getDbSharesSoldModel.HowMany = changesToModel.HowMany;
            getDbSharesSoldModel.PricePerShares = changesToModel.PricePerShares;
            getDbSharesSoldModel.PricePerSharesSold = changesToModel.PricePerSharesSold;
            getDbSharesSoldModel.Brokerage = changesToModel.Brokerage;
            getDbSharesSoldModel.TypeOfShares = changesToModel.TypeOfShares;
            getDbSharesSoldModel.MoneyProfitOrLoss = changesToModel.MoneyProfitOrLoss;
            getDbSharesSoldModel.PercentProfitOrLoss = changesToModel.PercentProfitOrLoss;
            getDbSharesSoldModel.Note = changesToModel.Note;

            try
            {
                db.SaveChanges();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"EditSold {DateTime.Now}: Company: {changesToModel.CompanyName} Date: {changesToModel.DateOfPurchase} Error: {ex.Message}");

                DateTime date = DateTime.Now;

                SharesErrorHandlings sharesErrorHandling = new()
                    {
                        Date = $"{date.Year}-{date.Month}-{date.Day}",
                        ErrorMessage = $"Ändra såld aktie: {DateTime.Now}: Företag: {changesToModel.CompanyName} Datum: {changesToModel.DateOfPurchase} \n Felmeddelande: {ex.Message}"
                    };

                db.SharesErrorHandlings.Add(sharesErrorHandling);
                db.SaveChanges();
            }

            sharesSolds = new();
            Navigation.Refresh(true);

            return;
        }

        if (sharesSolds.DateOfPurchase == DateTime.MinValue) return;

        // Add new sold shares
        changesToModel = changesSharesSoldToModel(sharesSolds);

        try
        {
            db.SharesSolds.Add(changesToModel);
            db.SaveChanges();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"SoldSharesAdd {DateTime.Now}: Company: {changesToModel.CompanyName} Date: {changesToModel.DateOfPurchase} Error: {ex.Message}");

            DateTime date = DateTime.Now;

            SharesErrorHandlings sharesErrorHandling = new()
                {
                    Date = $"{date.Year}-{date.Month}-{date.Day}",
                    ErrorMessage = $"Såld lägg till: {DateTime.Now}: Företag: {changesToModel.CompanyName} Datum: {changesToModel.DateOfPurchase} \n Felmeddelande: {ex.Message}"
                };

            db.SharesErrorHandlings.Add(sharesErrorHandling);
            db.SaveChanges();
        }

        sharesSolds = new();
        Navigation.Refresh(true);

        return;
    }

    // Load data from database to the Queryable container
    private void ConvertListToQueryable()
    {
        if (db.SharesSolds.Count() == 0) return;

        PurchasedSharesQueryable = Enumerable.Empty<SharesSoldViewModel>().AsQueryable();

        foreach (SharesSolds model in db.SharesSolds.OrderBy(c => c.SharesSoldId))
        {
            SharesSoldViewModel sharesPurchased = ChangeFromModelToViewModel(model);
            PurchasedSharesQueryable = PurchasedSharesQueryable.Concat(new[] { sharesPurchased }.AsQueryable());
        }

        pagination.TotalItemCountChanged += (sender, EventArgs) => StateHasChanged();
    }

    private SharesSoldViewModel ChangeFromModelToViewModel(SharesSolds model)
    {
        DateTime dateOfPurchase = DateTime.Parse(model.DateOfPurchase);
        DateTime dateOfSold = DateTime.Parse(model.DateOfSold);

        SharesSoldViewModel vm = new()
            {
                SharesSoldId = model.SharesSoldId,
                DateOfPurchase = dateOfPurchase,
                DateOfSold = dateOfSold,
                Amount = model.Amount,
                AmountSold = model.AmountSold,
                CompanyName = model.CompanyName,
                HowMany = model.HowMany,
                PricePerShares = model.PricePerShares,
                PricePerSharesSold = model.PricePerSharesSold,
                Brokerage = model.Brokerage,
                TypeOfShares = model.TypeOfShares,
                MoneyProfitOrLoss = model.MoneyProfitOrLoss,
                PercentProfitOrLoss = model.PercentProfitOrLoss,
                Note = model.Note
            };

        return vm;
    }

    private SharesSolds changesSharesSoldToModel(SharesSoldViewModel vm)
    {
        SharesSolds sharesSolds = new()
            {
                SharesSoldId = vm.SharesSoldId,
                DateOfPurchase = vm.DateOfPurchase.ToString("yyyy-MM-dd"),
                DateOfSold = vm.DateOfSold.ToString("yyyy-MM-dd"),
                Amount = vm.HowMany * vm.PricePerShares,
                AmountSold = vm.HowMany * vm.PricePerSharesSold,
                CompanyName = vm.CompanyName,
                HowMany = vm.HowMany,
                PricePerShares = vm.PricePerShares,
                PricePerSharesSold = vm.PricePerSharesSold,
                Brokerage = vm.Brokerage,
                TypeOfShares = vm.TypeOfShares,
                Note = "Köper " + vm.CompanyName + " aktier: " + "Datum: " + vm.DateOfPurchase.ToString().Substring(0, 10) + ", Hur många: " + vm.HowMany +
                            ", Pris per st: " + vm.PricePerShares + ", Summan: " + vm.HowMany * vm.PricePerShares + ", Courtage: " + vm.Brokerage + ". "
            };

        sharesSolds.MoneyProfitOrLoss = (sharesSolds.AmountSold - sharesSolds.Amount) - vm.Brokerage;

        double calculateMoneyProfitOrLoss = (sharesSolds.AmountSold / sharesSolds.Amount) - 1;

        sharesSolds.PercentProfitOrLoss = ConvertToPercentage(calculateMoneyProfitOrLoss);

        return sharesSolds;
    }

    private string ConvertToPercentage(double decimalValue) => $"{decimalValue * 100:F2}%";

    private void InfoSharesPurchased(SharesSoldViewModel incomingModel)
    {
        HideNewOrChangesSharesSoldForm();
        ShowOrHideAddNewPurchasedSharesButton = true;
        DisabledForm = true;
        sharesSolds = incomingModel;
    }

    private void EditSharesPurchased(SharesSoldViewModel incomingModel)
    {
        DisabledForm = false;
        ShowOrHideEditButton = false;
        ShowOrHideAddNewPurchasedSharesButton = true;
        HideNewOrChangesPurchasedSharesFields = true;
        sharesSolds = incomingModel;
    }

    private void DeleteSharesPurchased(SharesSoldViewModel incomingModel)
    {
        if (db.SharesSolds.Count() == 0) return;

        SharesSolds SharesSold = changesSharesSoldToModel(incomingModel);

        db.ChangeTracker.Clear();
        db.SharesSolds.Remove(SharesSold);
        db.SaveChanges();

        Navigation.Refresh(true);
    }

    // private void SearchPlace(ChangeEventArgs e)
    // {
    //     PurchasedSharesQueryable = Enumerable.Empty<SharesSoldViewModel>().AsQueryable();

    //     if (!string.IsNullOrEmpty(e.Value!.ToString()))
    //     {
    //         string getName = string.Empty;

    //         foreach (int huntingPlaces in Enum.GetValues(typeof(HuntingPlaces)))
    //         {
    //             getName = Enum.GetName(typeof(HuntingPlaces), huntingPlaces).ToLower();

    //             if (getName == e.Value.ToString().ToLower())
    //                 break;
    //         }

    //         if (getName != string.Empty)
    //         {
    //             IEnumerable<Huntings> result = null;

    //             switch (getName.ToLower())
    //             {
    //                 case "Välj":
    //                     break;

    //                 case "habäck":
    //                     result = db.Huntings.Where(c => c.HuntingPlaces == HuntingPlaces.Habäck);
    //                     break;

    //                 case "dalsjöfors":
    //                     result = db.Huntings.Where(c => c.HuntingPlaces == HuntingPlaces.Dalsjöfors);
    //                     break;

    //                 case "karlabo":
    //                     result = db.Huntings.Where(c => c.HuntingPlaces == HuntingPlaces.Karlabo);
    //                     break;

    //                 case "skog":
    //                     result = db.Huntings.Where(c => c.HuntingPlaces == HuntingPlaces.Skog);
    //                     break;

    //                 case "smältryd":
    //                     result = db.Huntings.Where(c => c.HuntingPlaces == HuntingPlaces.Smältryd);
    //                     break;

    //                 case "övrigt":
    //                     result = db.Huntings.Where(c => c.HuntingPlaces == HuntingPlaces.Övrigt);
    //                     break;
    //             }

    //             if (result == null || result.Count() == 0) return;

    //             if (result.Any())
    //                 foreach (Huntings model in result.OrderBy(c => c.HuntingsId))
    //                 {
    //                     SharesSoldViewModel hunting = ChangeFromModelToViewModel(model);
    //                     PurchasedSharesQueryable = PurchasedSharesQueryable.Concat(new[] { hunting }.AsQueryable());
    //                 }
    //         }

    //         return;
    //     }

    //     Navigation.Refresh(true);
    // }

    // private void SearchWildAnimal(ChangeEventArgs e)
    // {
    //     PurchasedSharesQueryable = Enumerable.Empty<HuntPurchasedViewModelingViewModels>().AsQueryable();

    //     if (!string.IsNullOrEmpty(e.Value!.ToString()))
    //     {
    //         string getName = string.Empty;

    //         foreach (int wildAnimal in Enum.GetValues(typeof(WildAnimal)))
    //         {
    //             getName = Enum.GetName(typeof(WildAnimal), wildAnimal).ToLower();

    //             if (getName == e.Value.ToString().ToLower())
    //                 break;
    //         }

    //         if (getName != string.Empty)
    //         {
    //             IEnumerable<Huntings> result = null;

    //             switch (getName.ToLower())
    //             {
    //                 case "Välj":
    //                     break;

    //                 case "hare":
    //                     result = db.Huntings.Where(c => c.WildAnimal == WildAnimal.Hare);
    //                     break;

    //                 case "lo":
    //                     result = db.Huntings.Where(c => c.WildAnimal == WildAnimal.Lo);
    //                     break;

    //                 case "rådjur":
    //                     result = db.Huntings.Where(c => c.WildAnimal == WildAnimal.Rådjur);
    //                     break;

    //                 case "räv":
    //                     result = db.Huntings.Where(c => c.WildAnimal == WildAnimal.Räv);
    //                     break;

    //                 case "vildsvin":
    //                     result = db.Huntings.Where(c => c.WildAnimal == WildAnimal.Vildsvin);
    //                     break;

    //                 case "älg":
    //                     result = db.Huntings.Where(c => c.WildAnimal == WildAnimal.Älg);
    //                     break;

    //                 case "övrigt":
    //                     result = db.Huntings.Where(c => c.WildAnimal == WildAnimal.Övrigt);
    //                     break;
    //             }

    //             if (result == null || result.Count() == 0) return;

    //             if (result.Any())
    //                 foreach (Huntings model in result.OrderBy(c => c.HuntingsId))
    //                 {
    //                     SharesSoldViewModel hunting = ChangeFromModelToViewModel(model);
    //                     PurchasedSharesQueryable = PurchasedSharesQueryable.Concat(new[] { hunting }.AsQueryable());
    //                 }
    //         }

    //         return;
    //     }

    //     Navigation.Refresh(true);
    // }

    private void HideNewOrChangesSharesSoldForm()
    {
        HideNewOrChangesPurchasedSharesFields = !HideNewOrChangesPurchasedSharesFields;
        ShowOrHideCreateButton = true;
        ShowOrHideEditButton = true;
    }

    private void RefreshPage() => Navigation.Refresh(true);

    private void OpenDeleteWindow()
    {
        ModalDisplay = "block;";
        ModalClass = "Show";
        ShowBackdrop = true;
        StateHasChanged();
    }

    private void CloseWindow()
    {
        ModalDisplay = "none";
        ModalClass = "";
        ShowBackdrop = false;
        StateHasChanged();
    }
}