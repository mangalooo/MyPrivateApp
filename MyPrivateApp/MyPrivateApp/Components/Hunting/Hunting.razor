@page "/Hunting"

@using MyPrivateApp.Client.ViewModels
@using MyPrivateApp.Components.Enum
@using MyPrivateApp.Data
@using MyPrivateApp.Data.Models
@using Microsoft.AspNetCore.Components.QuickGrid

@rendermode InteractiveServer

@inject ApplicationDbContext db;
@inject NavigationManager Navigation

<PageTitle> Jakt </PageTitle>

<h1 style="text-align:center"> Jakt </h1>

<br />

<div style="text-align:center">
    <button class="btn btn-outline-success btn-sm" @onclick="@HideNewOrChangesHuntingForm" hidden="@ShowOrHideCreateButton">Skapa nytt jakt</button>
</div>

<br />
<br />

<div class="container">
    <div class="col-md-12">
        <div class="card">
            <div class="card-header">
                <EditForm Model="hunting" OnSubmit="CreateOrUpdateHunting" FormName="CreateOrUpdateHunting" Enhance hidden="@(!HideNewOrChangesHuntingFields)">

                     <DataAnnotationsValidator />

                     <ValidationSummary class="text-danger" role="alert" />

                     <div class="row">
                         <div class="col-md-6">
                             <div class="form-floating">
                                 <InputDate @bind-Value="hunting.Date" class="form-control" disabled="@DisabledForm" />
                                 <label for="Date"> Datum </label>
                                 <ValidationMessage For="() => hunting.Date" class="text-danger" />
                             </div>
                         </div>
                     </div>

                    <br />

                     <div class="row">
                         <div class="col">
                             <div class="form-floating">
                                 <InputSelect @bind-Value="hunting.WildAnimal" class="form-control" placeholder="" disabled="@DisabledForm">
                                     @foreach (object wildAnimal in Enum.GetValues(typeof(WildAnimal)))
                                    {
                                        <option value="@wildAnimal">@wildAnimal</option>
                                    }
                                </InputSelect>
                                <label for="wildAnimal"> Vilt </label>
                                <ValidationMessage For="() => hunting.WildAnimal" class="text-danger" />
                            </div>
                        </div>
                         <div class="col">
                             <div class="form-floating">
                                 <InputText @bind-Value="hunting.Type" class="form-control" placeholder="" disabled="@DisabledForm" />
                                 <label for="Type"> Typ </label>
                                 <ValidationMessage For="() => hunting.Type" class="text-danger" />
                             </div>
                         </div>
                    </div>

                    <br />

                    <div class="row">
                        <div class="col">
                            <div class="form-floating">
                                <InputText @bind-Value="hunting.Dog" class="form-control" placeholder="" disabled="@DisabledForm" />
                                <label for="Dog"> Hund </label>
                                <ValidationMessage For="() => hunting.Dog" class="text-danger" />
                            </div>
                        </div>
                        <div class="col">
                            <div class="form-floating">
                                <InputSelect @bind-Value="hunting.HuntingPlaces" class="form-control" placeholder="" disabled="@DisabledForm">
                                    @foreach (object huntingPlaces in Enum.GetValues(typeof(HuntingPlaces)))
                                    {
                                        <option value="@huntingPlaces">@huntingPlaces</option>
                                    }
                                </InputSelect>
                                <label for="huntingPlaces"> Vilket vilt </label>
                                <ValidationMessage For="() => hunting.HuntingPlaces" class="text-danger" />
                            </div>
                        </div>
                    </div>

                    <br />

                    <div class="row">
                        <div class="col">
                            <div class="form-floating">
                                <InputTextArea @bind-Value="hunting.Description" class="form-control" disabled="@DisabledForm" />
                                <label for="Description"> Beskrivning </label>
                                <ValidationMessage For="() => hunting.Description" class="text-danger" />
                            </div>
                        </div>
                    </div>

                    <br />

                    <div style="text-align:center">
                        <button hidden="@ShowOrHideAddNewHuntingButton" @onclick="HideNewOrChangesHuntingForm" type="submit" style="text-align:center" class="btn btn-outline-success btn-sm"> Lägg till ny jakt </button>
                    </div>

                    <div style="text-align:center">
                        <button @onclick="HideNewOrChangesHuntingForm" hidden="@ShowOrHideEditButton" type="submit" style="text-align:center" class="btn btn-outline-warning btn-sm"> Ändra </button>
                    </div>

                    <br />

                    <div style="text-align:center">
                        <button @onclick="RefreshPage" type="submit" style="text-align:center" class="btn btn-outline-secondary btn-sm"> Tillbaka </button>
                    </div>

                    <br />
                    <br />
                </EditForm>
            </div>

            <div class="card-body">
                <QuickGrid Items="@huntingQueryable" Pagination="pagination" align="center">

                    <PropertyColumn Title="Vilt" Property="@(c => c.WildAnimal)" Sortable="true">
                        <ColumnOptions>
                            <div class="search-box">
                                <input type="search" autofocus @onchange="SearchWildAnimal" />
                            </div>
                        </ColumnOptions>
                    </PropertyColumn>
                    <PropertyColumn Title="År" Property="@(c => HowManyYears(c.Date))" Sortable="true" />
                    <PropertyColumn Title="Plats" Property="@(c => c.HuntingPlaces)" Sortable="true">
                        <ColumnOptions>
                            <div class="search-box">
                                <input type="search" autofocus @onchange="SearchPlace" />
                            </div>
                        </ColumnOptions>
                    </PropertyColumn>
                    <TemplateColumn Title="Ändringar">

                        <button class="btn btn-outline-info btn-sm" @onclick="@(() => InfoHunting(context))"> All info </button>
                        <button class="btn btn-outline-warning btn-sm" @onclick="@(() => EditHunting(context))"> Ändra </button>
                        <button class="btn btn-outline-danger btn-sm" @onclick="@(() => OpenDeleteWindow())"> Ta bort </button>

                        <div class="modal @ModalClass" tabindex="-1" role="dialog" style="display:@ModalDisplay">
                            <div class="modal-dialog" role="document">
                                <div class="modal-content">
                                    <div class="modal-header">
                                        <h5 class="modal-title"> Vill du ta bort jakten? </h5>
                                    </div>
                                    <div class="modal-footer">
                                        <button type="button" class="btn btn-outline-danger" @onclick="@(() => DeleteHunting(context))"> Ta bort kontakt </button>
                                        <button type="button" class="btn btn-outline-secondary" data-dismiss="modal" @onclick="() => CloseWindow()"> Ångra </button>
                                    </div>
                                </div>
                            </div>
                        </div>

                        @if (ShowBackdrop)
                        {
                            <div class="modal-backdrop fade show"></div>
                        }

                    </TemplateColumn>
                </QuickGrid>

                <div class="card-footer"><Paginator State="@pagination" /></div>

                <br />
                <br />

            </div>
        </div>
    </div>
</div>

<br />
<br />

@code
{
    // Modol window settings
    public Guid Guid = Guid.NewGuid();
    public string ModalDisplay = "none;";
    public string ModalClass = "";
    public bool ShowBackdrop = false;

    // Hide button and fields
    private bool HideNewOrChangesHuntingFields { get; set; } = false;
    private bool ShowOrHideCreateButton { get; set; } = false;
    private bool ShowOrHideEditButton { get; set; } = false;
    private bool ShowOrHideAddNewHuntingButton { get; set; } = false;
    private bool DisabledForm { get; set; } = false;

    PaginationState pagination = new PaginationState { ItemsPerPage = 10 };
    private IQueryable<HuntingViewModels> huntingQueryable = Enumerable.Empty<HuntingViewModels>().AsQueryable();

    [SupplyParameterFromForm]
    private HuntingViewModels hunting { get; set; } = new();

    protected override void OnInitialized() => ConvertListToQueryable();

    private Huntings GetHunting(int? id) => db.Huntings.FirstOrDefault(r => r.HuntingsId == hunting.HuntingsId);

    private void CreateOrUpdateHunting()
    {
        DisabledForm = false;

        Huntings getDbHuntingModel;
        Huntings changesToModel;

        // Update hunting
        if (hunting.HuntingsId > 0)
        {
            ShowOrHideCreateButton = true;

            Huntings c = db.Huntings.FirstOrDefault(p => p.HuntingsId == hunting.HuntingsId);

            if (c is null) return;

            getDbHuntingModel = GetHunting(hunting.HuntingsId);

            changesToModel = changesHuntingToModel(hunting);

            getDbHuntingModel.Date = changesToModel.Date;
            getDbHuntingModel.WildAnimal = changesToModel.WildAnimal;
            getDbHuntingModel.Type = changesToModel.Type;
            getDbHuntingModel.Dog = changesToModel.Dog;
            getDbHuntingModel.HuntingPlaces = changesToModel.HuntingPlaces;
            getDbHuntingModel.Description = changesToModel.Description;

            db.SaveChanges();

            hunting = new();
            Navigation.Refresh(true);

            return;
        }

        if (hunting.Date != DateTime.MinValue) return;

        // Add new hunting
        getDbHuntingModel = GetHunting(hunting.HuntingsId);
        changesToModel = changesHuntingToModel(hunting);
        db.Huntings.Add(changesToModel);
        db.SaveChanges();
        hunting = new();
        Navigation.Refresh(true);

        return;
    }

    // Load data from database to the Queryable container
    private void ConvertListToQueryable()
    {
        if (db.Huntings.Count() == 0) return;

        huntingQueryable = Enumerable.Empty<HuntingViewModels>().AsQueryable();

        foreach (Huntings model in db.Huntings.OrderBy(c => c.HuntingsId))
        {
            HuntingViewModels hunting = ChangeFromModelToViewModel(model);
            huntingQueryable = huntingQueryable.Concat(new[] { hunting }.AsQueryable());
        }

        pagination.TotalItemCountChanged += (sender, EventArgs) => StateHasChanged();
    }

    public HuntingViewModels ChangeFromModelToViewModel(Huntings model)
    {
        DateTime date = DateTime.Parse(model.Date);

        HuntingViewModels vm = new()
            {
                HuntingsId = model.HuntingsId,
                Date = date,
                WildAnimal = model.WildAnimal,
                Type = model.Type,
                Dog = model.Dog,
                HuntingPlaces = model.HuntingPlaces,
                Description = model.Description
            };

        return vm;
    }

    private Huntings changesHuntingToModel(HuntingViewModels vm)
    {
        Huntings hunting = new()
            {
                HuntingsId = vm.HuntingsId,
                Date = vm.Date.ToString("yyyy-MM-dd"),
                WildAnimal = vm.WildAnimal,
                Type = vm.Type,
                Dog = vm.Dog,
                HuntingPlaces = vm.HuntingPlaces,
                Description = vm.Description
            };

        return hunting;
    }

    private void InfoHunting(HuntingViewModels incomingModel)
    {
        HideNewOrChangesHuntingForm();
        ShowOrHideAddNewHuntingButton = true;
        DisabledForm = true;
        hunting = incomingModel;
    }

    private void EditHunting(HuntingViewModels incomingModel)
    {
        DisabledForm = false;
        ShowOrHideEditButton = false;
        ShowOrHideAddNewHuntingButton = true;
        HideNewOrChangesHuntingFields = true;
        hunting = incomingModel;
    }

    private void DeleteHunting(HuntingViewModels incomingModel)
    {
        if (db.Huntings.Count() == 0) return;

        Huntings hunting = changesHuntingToModel(incomingModel);

        db.ChangeTracker.Clear();
        db.Huntings.Remove(hunting);
        db.SaveChanges();

        Navigation.Refresh(true);
    }

    private void SearchPlace(ChangeEventArgs e)
    {
        huntingQueryable = Enumerable.Empty<HuntingViewModels>().AsQueryable();

        if (!string.IsNullOrEmpty(e.Value!.ToString()))
        {
            string getName = string.Empty;

            foreach (int huntingPlaces in Enum.GetValues(typeof(HuntingPlaces)))
            {
                getName = Enum.GetName(typeof(HuntingPlaces), huntingPlaces).ToLower();

                if (getName == e.Value.ToString().ToLower())
                    break;
            }

            if (getName != string.Empty)
            {
                IEnumerable<Huntings> result = null;

                switch (getName.ToLower())
                {
                    case "Välj":
                        break;

                    case "habäck":
                        result = db.Huntings.Where(c => c.HuntingPlaces == HuntingPlaces.Habäck);
                        break;

                    case "dalsjöfors":
                        result = db.Huntings.Where(c => c.HuntingPlaces == HuntingPlaces.Dalsjöfors);
                        break;

                    case "karlabo":
                        result = db.Huntings.Where(c => c.HuntingPlaces == HuntingPlaces.Karlabo);
                        break;

                    case "skog":
                        result = db.Huntings.Where(c => c.HuntingPlaces == HuntingPlaces.Skog);
                        break;
                        
                    case "smältryd":
                        result = db.Huntings.Where(c => c.HuntingPlaces == HuntingPlaces.Smältryd);
                        break;

                    case "övrigt":
                        result = db.Huntings.Where(c => c.HuntingPlaces == HuntingPlaces.Övrigt);
                        break;
                }

                if (result == null || result.Count() == 0) return;

                if (result.Any())
                    foreach (Huntings model in result.OrderBy(c => c.HuntingsId))
                    {
                        HuntingViewModels hunting = ChangeFromModelToViewModel(model);
                        huntingQueryable = huntingQueryable.Concat(new[] { hunting }.AsQueryable());
                    }
            }

            return;
        }

        Navigation.Refresh(true);
    }

    private void SearchWildAnimal(ChangeEventArgs e)
    {
        huntingQueryable = Enumerable.Empty<HuntingViewModels>().AsQueryable();

        if (!string.IsNullOrEmpty(e.Value!.ToString()))
        {
            string getName = string.Empty;

            foreach (int wildAnimal in Enum.GetValues(typeof(WildAnimal)))
            {
                getName = Enum.GetName(typeof(WildAnimal), wildAnimal).ToLower();

                if (getName == e.Value.ToString().ToLower())
                    break;
            }

            if (getName != string.Empty)
            {
                IEnumerable<Huntings> result = null;

                switch (getName.ToLower())
                {
                    case "Välj":
                        break;

                    case "hare":
                        result = db.Huntings.Where(c => c.WildAnimal == WildAnimal.Hare);
                        break;

                    case "lo":
                        result = db.Huntings.Where(c => c.WildAnimal == WildAnimal.Lo);
                        break;

                    case "rådjur":
                        result = db.Huntings.Where(c => c.WildAnimal == WildAnimal.Rådjur);
                        break;

                    case "räv":
                        result = db.Huntings.Where(c => c.WildAnimal == WildAnimal.Räv);
                        break;

                    case "vildsvin":
                        result = db.Huntings.Where(c => c.WildAnimal == WildAnimal.Vildsvin);
                        break;

                    case "älg":
                        result = db.Huntings.Where(c => c.WildAnimal == WildAnimal.Älg);
                        break;

                    case "övrigt":
                        result = db.Huntings.Where(c => c.WildAnimal == WildAnimal.Övrigt);
                        break;
                }

                if (result == null || result.Count() == 0) return;

                if (result.Any())
                    foreach (Huntings model in result.OrderBy(c => c.HuntingsId))
                    {
                        HuntingViewModels hunting = ChangeFromModelToViewModel(model);
                        huntingQueryable = huntingQueryable.Concat(new[] { hunting }.AsQueryable());
                    }
            }

            return;
        }

        Navigation.Refresh(true);
    }

    private int HowManyYears(DateTime date) => DateTime.Now.Year - date.Year;

    private void HideNewOrChangesHuntingForm()
    {
        HideNewOrChangesHuntingFields = !HideNewOrChangesHuntingFields;
        ShowOrHideCreateButton = true;
        ShowOrHideEditButton = true;
    }

    private void RefreshPage() => Navigation.Refresh(true);

    private void OpenDeleteWindow()
    {
        ModalDisplay = "block;";
        ModalClass = "Show";
        ShowBackdrop = true;
        StateHasChanged();
    }

    private void CloseWindow()
    {
        ModalDisplay = "none";
        ModalClass = "";
        ShowBackdrop = false;
        StateHasChanged();
    }
}