@page "/HuntingMyListPage"

@using MyPrivateApp.Client.ViewModels
@using MyPrivateApp.Components.Enum
@using MyPrivateApp.Components.Hunting.Classes
@using MyPrivateApp.Components.ViewModels.HuntingViemModels
@using MyPrivateApp.Data
@using MyPrivateApp.Data.Models
@using Microsoft.AspNetCore.Components.QuickGrid
@using MyPrivateApp.Data.Models.Hunting
@using static Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions;
@using AutoMapper;

@rendermode InteractiveServer

@inject ApplicationDbContext db;
@inject NavigationManager Navigation
@inject IHuntingMyListClass BackEndClass

<PageTitle> Jakt </PageTitle>

@* Header *@
<div>

    <br />

    @* Navigation - Desktop *@
    <div id="desktop" style="text-align:center">
        <div class="btn-group" role="group" aria-label="Desktop Navigation">
            @foreach (var page in navList)
            {
                <NavLink href=@(page.Href) type="button" class="btn btn-outline-dark btn-sm" aria-label="@(page.Text)"> @(page.Text) </NavLink>
            }
        </div>
    </div>

    @* Navigation - Mobile *@
    <div id="mobile">
        <div class="btn-group" role="group">
            <button title="Info" id="btnGroupDrop1" type="button" class="btn btn-outline-secondary btn-sm dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false" aria-haspopup="true">
                Alla aktier sidor
            </button>
            <ul class="dropdown-menu" aria-labelledby="btnGroupDrop1">
                @foreach (var page in navList)
                {
                    <li class="dropdown-item">
                        <NavLink href=@(page.Href) type="button" class="btn btn-outline-dark btn-sm">@(page.Text)</NavLink>
                    </li>
                }
            </ul>
        </div>
    </div>

    <br /> <br />

    <h1 style="text-align:center"> Min jakt lista </h1>


    <div style="text-align:center" hidden="@ShowOrHideCreateButton">

        <br /> <br />

        <button class="btn btn-outline-success btn-sm" @onclick="@HideNewOrChangesForm"> Nytt byte </button>
    </div>

    @if (ShowOrHideErrorMessage)
    {
        <div style="text-align:center">
            <Alert Color="AlertColor.Danger">
                <Icon Name="IconName.ExclamationTriangleFill" class="me-2"></Icon>
                <b>@ErrorMessage</b>
            </Alert>
        </div>
    }

    <br /> <br />

</div>

@* Form and views *@
<div class="container">
    <div class="col-md-12">
        <div class="card">

            @* Form *@
            <div class="card-header">
                <EditForm Model="pageViewModel" OnSubmit="AddOrEdit" FormName="AddOrUpdate" Enhance hidden="@(!HideNewOrChangesFields)">

                    <DataAnnotationsValidator />

                    <ValidationSummary class="text-danger" role="alert" />


                    <div class="row">

                        <div id="mobile" class="col-4" />

                        <div class="col-4">
                            <div class="form-floating">
                                <InputDate @bind-Value="pageViewModel.Date" class="form-control" disabled="@DisabledForm" />
                                <label for="Date"> Datum </label>
                                <ValidationMessage For="() => pageViewModel.Date" class="text-danger" />
                            </div>
                        </div>

                        <div class="col-4">
                            <div class="form-floating">
                                <InputSelect @bind-Value="pageViewModel.HuntingPlaces" class="form-control" placeholder="" disabled="@DisabledForm">
                                    @foreach (object huntingPlaces in Enum.GetValues(typeof(HuntingPlaces)))
                                    {
                                        <option value="@huntingPlaces">@huntingPlaces</option>
                                    }
                                </InputSelect>
                                <label for="huntingPlaces"> Plats </label>
                                <ValidationMessage For="() => pageViewModel.HuntingPlaces" class="text-danger" />
                            </div>
                        </div>

                        <div class="col-4">
                            <div class="form-floating">
                                <InputSelect @bind-Value="pageViewModel.HuntingForm" class="form-control" placeholder="" disabled="@DisabledForm">
                                    @foreach (object huntingType in Enum.GetValues(typeof(HuntingForm)))
                                    {
                                        <option value="@huntingType">@huntingType</option>
                                    }
                                </InputSelect>
                                <label for="HuntingForm"> Jakt typ </label>
                                <ValidationMessage For="() => pageViewModel.HuntingForm" class="text-danger" />
                            </div>
                        </div>
                    </div>

                    <br />

                    <div class="row">

                        <div id="mobile" class="col-4" />

                        <div class="col-4">
                            <div class="form-floating">
                                <InputSelect @bind-Value="pageViewModel.WildAnimal" class="form-control" placeholder="" disabled="@DisabledForm">
                                    @foreach (object wildAnimal in Enum.GetValues(typeof(WildAnimal)))
                                    {
                                        <option value="@wildAnimal">@wildAnimal</option>
                                    }
                                </InputSelect>
                                <label for="wildAnimal"> Vilt </label>
                                <ValidationMessage For="() => pageViewModel.WildAnimal" class="text-danger" />
                            </div>
                        </div>

                        <div class="col-4">
                            <div class="form-floating">
                                <InputText @bind-Value="pageViewModel.Type" class="form-control" placeholder="" disabled="@DisabledForm" />
                                <label for="Type"> Typ </label>
                                <ValidationMessage For="() => pageViewModel.Type" class="text-danger" />
                            </div>
                        </div>

                        <div class="col-4">
                            <div class="form-floating">
                                <InputText @bind-Value="pageViewModel.Dog" class="form-control" placeholder="" disabled="@DisabledForm" />
                                <label for="Dog"> Hund </label>
                                <ValidationMessage For="() => pageViewModel.Dog" class="text-danger" />
                            </div>
                        </div>
                    </div>

                    <br />

                    <div class="row">
                        <div class="col-12">
                            <div class="form-floating">
                                <InputTextArea rows="10" style="height:100%;" @bind-Value="pageViewModel.Note" class="form-control" disabled="@DisabledForm" />
                                <label for="Note"> Beskrivning </label>
                                <ValidationMessage For="() => pageViewModel.Note" class="text-danger" />
                            </div>
                        </div>
                    </div>

                    <br />

                    <div style="text-align:center">
                        <button hidden="@ShowOrHideAddNewButton" @onclick="HideNewOrChangesForm" type="submit" style="text-align:center" class="btn btn-outline-success btn-sm"> Lägg till nytt byte </button>
                    </div>

                    <div style="text-align:center">
                        <button @onclick="HideNewOrChangesForm" hidden="@ShowOrHideEditButton" type="submit" style="text-align:center" class="btn btn-outline-warning btn-sm"> Ändra </button>
                    </div>

                    <br />

                    <div style="text-align:center">
                        <button @onclick="RefreshPage" type="button" style="text-align:center" class="btn btn-outline-secondary btn-sm"> Tillbaka </button>
                    </div>

                    <br />
                    <br />
                </EditForm>
            </div>

            @* View - Desktop *@
            <div id="desktop">
                <div class="card-body">
                    <QuickGrid Items="@queryable" Pagination="pagination">

                        <PropertyColumn Title="Vilt" Property="@(c => c.WildAnimal)" Sortable="true">
                            <ColumnOptions>
                                <div class="search-box">
                                    <input type="search" autofocus @onchange="SearchWildAnimal" />
                                </div>
                            </ColumnOptions>
                        </PropertyColumn>
                        <PropertyColumn Title="Typ" Property="@(c => c.Type)" Sortable="true" />
                        <PropertyColumn Title="År" Property="@(c => HowManyYears(c.Date))" Sortable="true" />
                        <PropertyColumn Title="Plats" Property="@(c => c.HuntingPlaces)" Sortable="true">
                            <ColumnOptions>
                                <div class="search-box">
                                    <input type="search" autofocus @onchange="SearchPlace" />
                                </div>
                            </ColumnOptions>
                        </PropertyColumn>

                        <PropertyColumn Title="Hund" Property="@(c => c.Dog)" Sortable="true" />

                        <TemplateColumn Title="Info">

                            <div class="btn-group" role="group">
                                <button title="Info" id="btnGroupDrop1" type="button" class="btn btn-outline-secondary btn-sm dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">
                                    Info
                                </button>
                                <ul class="dropdown-menu" aria-labelledby="btnGroupDrop1">
                                    <li class="dropdown-item"><button class="btn btn-outline-info btn-sm" @onclick="@(() => Info(context))"> All info </button></li>
                                    <li class="dropdown-item"><button class="btn btn-outline-warning btn-sm" @onclick="@(() => Edit(context))"> Ändra </button></li>
                                    <li class="dropdown-item"><button class="btn btn-outline-danger btn-sm" @onclick="@(() => OpenDeleteWindow(context))"> Ta bort </button></li>
                                </ul>
                            </div>

                            <div class="modal @ModalClass" tabindex="-1" role="dialog" style="display:@ModalDisplay">
                                <div class="modal-dialog" role="document">
                                    <div class="modal-content">
                                        <div class="modal-header">
                                            <h5 class="modal-title"> Vill du ta bort jakten? </h5>
                                        </div>
                                        <div class="modal-footer">
                                            <button type="button" class="btn btn-outline-danger" @onclick="@(() => Delete())"> Ta bort byte </button>
                                            <button type="button" class="btn btn-outline-secondary" data-dismiss="modal" @onclick="() => CloseDeleteWindow()"> Ångra </button>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            @if (ShowBackdrop)
                            {
                                <div class="modal-backdrop fade show"></div>
                            }

                        </TemplateColumn>
                    </QuickGrid>

                    <div class="card-footer"><Paginator State="@pagination" /></div>

                    <br />
                    <br />

                </div>
            </div>

            @* View - Mobile *@
            <div id="mobile">
                <div class="card-body">
                    <QuickGrid Items="@queryable" Pagination="pagination">

                        <PropertyColumn Title="Vilt" Property="@(c => c.WildAnimal)" Sortable="true">
                            <ColumnOptions>
                                <div class="search-box">
                                    <input type="search" autofocus @onchange="SearchWildAnimal" />
                                </div>
                            </ColumnOptions>
                        </PropertyColumn>
                        <PropertyColumn Title="Plats" Property="@(c => c.HuntingPlaces)" Sortable="true">
                            <ColumnOptions>
                                <div class="search-box">
                                    <input type="search" autofocus @onchange="SearchPlace" />
                                </div>
                            </ColumnOptions>
                        </PropertyColumn>
                        <TemplateColumn Title="Info">

                            <div class="btn-group" role="group">
                                <button title="Info" id="btnGroupDrop1" type="button" class="btn btn-outline-secondary btn-sm dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">
                                    Info
                                </button>
                                <ul class="dropdown-menu" aria-labelledby="btnGroupDrop1">
                                    <li class="dropdown-item"><button class="btn btn-outline-info btn-sm" @onclick="@(() => Info(context))"> All info </button></li>
                                    <li class="dropdown-item"><button class="btn btn-outline-warning btn-sm" @onclick="@(() => Edit(context))"> Ändra </button></li>
                                    <li class="dropdown-item"><button class="btn btn-outline-danger btn-sm" @onclick="@(() => OpenDeleteWindow(context))"> Ta bort </button></li>
                                </ul>
                            </div>

                            <div class="modal @ModalClass" tabindex="-1" role="dialog" style="display:@ModalDisplay">
                                <div class="modal-dialog" role="document">
                                    <div class="modal-content">
                                        <div class="modal-header">
                                            <h5 class="modal-title"> Vill du ta bort jakten? </h5>
                                        </div>
                                        <div class="modal-footer">
                                            <button type="button" class="btn btn-outline-danger" @onclick="@(() => Delete())"> Ta bort byte </button>
                                            <button type="button" class="btn btn-outline-secondary" data-dismiss="modal" @onclick="() => CloseDeleteWindow()"> Ångra </button>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            @if (ShowBackdrop)
                            {
                                <div class="modal-backdrop fade show"></div>
                            }

                        </TemplateColumn>
                    </QuickGrid>

                    <br />
                    <br />

                </div>
            </div>

        </div>
    </div>
</div>

@* Footer *@
<div>

    <br />
    <br />

    <div class="footer" align="center">
        <p> Copyright 2023 - @DateTime.Now.Year</p>
    </div>

    <br />
    <br />

</div>

@* Back-End *@
@code
{
    [SupplyParameterFromForm]
    private HuntingMyListViewModels pageViewModel { get; set; } = new();

    PaginationState pagination = new PaginationState { ItemsPerPage = 20 };
    private IQueryable<HuntingMyListViewModels> queryable = Enumerable.Empty<HuntingMyListViewModels>().AsQueryable();

    // Holds temporary id to delete items
    private int TemporaryId { get; set; } = 0;

    // Modol window settings
    public Guid Guid = Guid.NewGuid();
    public string ModalDisplay = "none;";
    public string ModalClass = "";
    public bool ShowBackdrop = false;

    // Hide button and fields
    private bool HideNewOrChangesFields { get; set; } = false;
    private bool ShowOrHideCreateButton { get; set; } = false;
    private bool ShowOrHideEditButton { get; set; } = false;
    private bool ShowOrHideAddNewButton { get; set; } = false;
    private bool DisabledForm { get; set; } = false;
    private bool ShowOrHideErrorMessage { get; set; } = false;

    // Text messeges
    private string ErrorMessage { get; set; } = string.Empty;

    // Navigation list
    private readonly (string Href, string Text)[] navList = new[]
    {
        ("HuntingPage", "Start"),
        ("HuntingMyListPage", "Mina jaktbyten"),
        ("HuntingPreyPage", "Jaktbyten"),
        ("HuntingTeamMembersPage", "Medlemmar"),
        ("HuntingTowerInspectionPage", "Torn besiktningar")
    };

    // Load data from database to the Queryable container
    private async Task ConvertListToQueryable()
    {
        List<HuntingMyList> huntingMyList = await db.HuntingMyList.OrderByDescending(c => c.Date).ToListAsync();

        if (!huntingMyList.Any()) return;

        queryable = huntingMyList
            .Select(model => BackEndClass.ChangeFromModelToViewModel(model))
            .AsQueryable();

        pagination.TotalItemCountChanged += (sender, EventArgs) => StateHasChanged();
    }

    protected override async Task OnInitializedAsync() => await ConvertListToQueryable();

    private async Task RefreshPage() => await Task.Run(() => Navigation.Refresh(true));

    private void HideNewOrChangesForm()
    {
        HideNewOrChangesFields = !HideNewOrChangesFields;
        ShowOrHideCreateButton = true;
        ShowOrHideEditButton = true;
    }

    private async Task AddOrEdit()
    {
        DisabledForm = false;

        try
        {
            if (pageViewModel.HuntingMyListId > 0)
                ErrorMessage = await BackEndClass.Edit(pageViewModel);
            else
                ErrorMessage = await BackEndClass.Add(pageViewModel);

            if (!string.IsNullOrEmpty(ErrorMessage))
            {
                HideNewOrChangesForm();
                ShowOrHideErrorMessage = false;
                ShowOrHideEditButton = true;
                ShowOrHideAddNewButton = false;
                return;
            }
            else
            {
                pageViewModel = new();
                await RefreshPage();
            }
        }
        catch (Exception ex)
        {
            ErrorMessage += $"\r\n\r\nEtt fel uppstod: {ex.Message}";
            ShowOrHideErrorMessage = true;
        }
    }

    private void Info(HuntingMyListViewModels vm)
    {
        HideNewOrChangesForm();
        ShowOrHideAddNewButton = true;
        DisabledForm = true;
        pageViewModel = vm;
    }

    private void Edit(HuntingMyListViewModels vm)
    {
        DisabledForm = false;
        ShowOrHideEditButton = false;
        ShowOrHideAddNewButton = true;
        ShowOrHideCreateButton = true;
        HideNewOrChangesFields = true;
        pageViewModel = vm;
    }

    private async Task Delete()
    {
        if (!db.HuntingMyList.Any()) return;

        HuntingMyList? model = await db.HuntingMyList.FirstOrDefaultAsync(a => a.HuntingMyListId == TemporaryId);
        if (model == null) return;

        HuntingMyListViewModels vm = BackEndClass.ChangeFromModelToViewModel(model);
        ErrorMessage = await BackEndClass.Delete(vm);

        if (!string.IsNullOrEmpty(ErrorMessage))
            ShowOrHideErrorMessage = true;
        else
        {
            pageViewModel = new();
            await RefreshPage();
        }
    }

    private void ToggleModal(ref string modalDisplay, ref string modalClass, ref bool showBackdrop, bool isOpen)
    {
        modalDisplay = isOpen ? "block;" : "none";
        modalClass = isOpen ? "Show" : "";
        showBackdrop = isOpen;
        StateHasChanged();
    }

    private void OpenDeleteWindow(HuntingMyListViewModels vm)
    {
        TemporaryId = vm.HuntingMyListId;
        ToggleModal(ref ModalDisplay, ref ModalClass, ref ShowBackdrop, true);
    }

    private void CloseDeleteWindow() => ToggleModal(ref ModalDisplay, ref ModalClass, ref ShowBackdrop, false);

    private async Task SearchPlace(ChangeEventArgs e)
    {
        queryable = Enumerable.Empty<HuntingMyListViewModels>().AsQueryable();

        if (e.Value is string searchValue && !string.IsNullOrEmpty(searchValue))
        {
            searchValue = searchValue.ToLower();
            var huntingPlaceMap = new Dictionary<string, HuntingPlaces>
            {
                { "habäck", HuntingPlaces.Habäck },
                { "dalsjöfors", HuntingPlaces.Dalsjöfors },
                { "karlabo", HuntingPlaces.Karlabo },
                { "skog", HuntingPlaces.Skog },
                { "smältryd", HuntingPlaces.Smältryd },
                { "övrigt", HuntingPlaces.Övrigt }
            };

            if (huntingPlaceMap.TryGetValue(searchValue, out var huntingPlace))
            {
                var result = db.HuntingMyList.Where(c => c.HuntingPlaces == huntingPlace);

                if (result.Any())
                {
                    queryable = result
                        .OrderBy(c => c.HuntingMyListId)
                        .Select(model => BackEndClass.ChangeFromModelToViewModel(model))
                        .AsQueryable();
                }
            }
        }
        else
            await RefreshPage();
    }

    private async Task SearchWildAnimal(ChangeEventArgs e)
    {
        queryable = Enumerable.Empty<HuntingMyListViewModels>().AsQueryable();

        if (e.Value is string searchValue && !string.IsNullOrEmpty(searchValue))
        {
            searchValue = searchValue.ToLower();
            var wildAnimalMap = new Dictionary<string, WildAnimal>
            {
                { "hare", WildAnimal.Hare },
                { "lo", WildAnimal.Lo },
                { "rådjur", WildAnimal.Rådjur },
                { "räv", WildAnimal.Räv },
                { "vildsvin", WildAnimal.Vildsvin },
                { "älg", WildAnimal.Älg },
                { "övrigt", WildAnimal.Övrigt }
            };

            if (wildAnimalMap.TryGetValue(searchValue, out var wildAnimal))
            {
                var result = db.HuntingMyList.Where(c => c.WildAnimal == wildAnimal);

                if (result.Any())
                {
                    queryable = result
                        .OrderBy(c => c.HuntingMyListId)
                        .Select(model => BackEndClass.ChangeFromModelToViewModel(model))
                        .AsQueryable();
                }
            }
        }
        else
            await RefreshPage();
    }

    private int HowManyYears(DateTime date)
    {
        DateTime now = DateTime.Now;
        int years = now.Year - date.Year;

        // Check if the date has not occurred yet this year
        if (now < date.AddYears(years))
            years--;

        return years;
    }
}