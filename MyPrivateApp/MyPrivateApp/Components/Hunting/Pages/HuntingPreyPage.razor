
@page "/HuntingPreyPage"

@using Microsoft.EntityFrameworkCore
@using MyPrivateApp.Client.ViewModels
@using MyPrivateApp.Components.Enum
@using MyPrivateApp.Components.Hunting.Classes
@using MyPrivateApp.Components.ViewModels.HuntingViemModels
@using MyPrivateApp.Data
@using MyPrivateApp.Data.Models
@using Microsoft.AspNetCore.Components.QuickGrid
@using MyPrivateApp.Data.Models.Hunting
@using static Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions;

@rendermode @(new InteractiveServerRenderMode(prerender:false))

@inject NavigationManager Navigation
@inject IHuntingPreyClass BackEndClass
@inject IDbContextFactory<ApplicationDbContext> IDbContextFactory

<PageTitle> Jakt </PageTitle>

@try
{
    @* Header *@
    <div>

        <br />

        @* Navigation - Desktop *@
        <div id="desktop" align="center">
            <div class="btn-group" role="group" aria-label="Desktop Navigation">
                @foreach (var page in navList)
                {
                    <NavLink href=@(page.Href) type="button" class="btn btn-outline-dark btn-sm" aria-label="@(page.Text)"> @(page.Text) </NavLink>
                }
            </div>
        </div>

        @* Navigation - Mobile *@
        <div id="mobile">
            <div class="btn-group" role="group">
                <button title="Info" id="btnGroupDrop1" type="button" class="btn btn-outline-secondary btn-sm dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false" aria-haspopup="true">
                    Alla jakt sidor
                </button>
                <ul class="dropdown-menu" aria-labelledby="btnGroupDrop1">
                    @foreach (var page in navList)
                    {
                        <li class="dropdown-item">
                            <NavLink href=@(page.Href) type="button" class="btn btn-outline-dark btn-sm">@(page.Text)</NavLink>
                        </li>
                    }
                </ul>
            </div>
        </div>

        <br />

        <h1 align="center"> Jaktbyten på våra marker </h1>

        <br />

        @if (ShowOrHideCreateButton)
        {
            <div style="text-align:center">
                <button class="btn btn-outline-success btn-sm" @onclick="@ShowAddForm"> Nytt byte </button>
            </div>
        }

        @if (ShowOrHideErrorMessage)
        {
            <br />

            <div style="text-align:center">
                <Alert Color="AlertColor.Danger">
                    <Icon Name="IconName.ExclamationTriangleFill" class="me-2"></Icon>
                    <b>@ErrorMessage</b>
                </Alert>
            </div>
        }

        @if (ShowOrHideInfoMessage)
        {
            <br />

            <div align="center">
                <Alert Color="AlertColor.Info">
                    <b>@InfoMessage</b>
                </Alert>
            </div>
        }

        <br />

    </div>

    @* Form and views *@
    <div class="container">
        <div class="col-md-12">
            <div class="card">

                @* Form *@
                <div>
                    @if (ShowOrHideAddOrEditForm)
                    {
                        <div class="card-header">
                            <EditForm Model="pageViewModel" OnSubmit="AddOrEdit" Enhance>

                                <div class="row">

                                    <div id="mobile" class="col-4" />

                                    <div class="col-3">
                                        <div class="form-floating">
                                            <InputDate @bind-Value="pageViewModel.Date" class="form-control" disabled="@DisabledForm" />
                                            <label for="Date"> Datum </label>
                                        </div>
                                    </div>

                                    <div class="col-3">
                                        <div class="form-floating">
                                            <InputText @bind-Value="pageViewModel.Hunter" class="form-control" disabled="@DisabledForm" />
                                            <label for="Hunter"> Jägare </label>
                                        </div>
                                    </div>

                                    <div class="col-3">
                                        <div class="form-floating">
                                            <InputSelect @bind-Value="pageViewModel.HuntingPlaces" class="form-control" placeholder="" disabled="@DisabledForm">
                                                @foreach (object huntingPlaces in Enum.GetValues(typeof(HuntingPlaces)))
                                                {
                                                    <option value="@huntingPlaces">@huntingPlaces</option>
                                                }
                                            </InputSelect>
                                            <label for="huntingPlaces"> Plats </label>
                                        </div>
                                    </div>

                                    <div class="col-3">
                                        <div class="form-floating">
                                            <InputSelect @bind-Value="pageViewModel.HuntingForm" class="form-control" placeholder="" disabled="@DisabledForm">
                                                @foreach (object huntingType in Enum.GetValues(typeof(HuntingForm)))
                                                {
                                                    <option value="@huntingType">@huntingType</option>
                                                }
                                            </InputSelect>
                                            <label for="HuntingForm"> Jakt typ </label>
                                        </div>
                                    </div>

                                </div>

                                <br />

                                <div class="row">

                                    <div id="mobile" class="col-3" />

                                    <div class="col-3">
                                        <div class="form-floating">
                                            <InputText @bind-Value="pageViewModel.HuntingPass" class="form-control" placeholder="" disabled="@DisabledForm" />
                                            <label for="HuntingPass"> Pass </label>
                                        </div>
                                    </div>

                                    <div class="col-3">
                                        <div class="form-floating">
                                            <InputSelect @bind-Value="pageViewModel.WildAnimal" class="form-control" placeholder="" disabled="@DisabledForm">
                                                @foreach (object wildAnimal in Enum.GetValues(typeof(WildAnimal)))
                                                {
                                                    <option value="@wildAnimal">@wildAnimal</option>
                                                }
                                            </InputSelect>
                                            <label for="wildAnimal"> Vilt </label>
                                        </div>
                                    </div>

                                    <div class="col-3">
                                        <div class="form-floating">
                                            <InputText @bind-Value="pageViewModel.Type" class="form-control" placeholder="" disabled="@DisabledForm" />
                                            <label for="Type"> Vilt typ </label>
                                        </div>
                                    </div>

                                    <div class="col-3">
                                        <div class="form-floating">
                                            <InputText @bind-Value="pageViewModel.Dog" class="form-control" placeholder="" disabled="@DisabledForm" />
                                            <label for="Dog"> Hund </label>
                                        </div>
                                    </div>

                                </div>

                                <br />

                                <div class="row">
                                    <div class="col-12">
                                        <div class="form-floating">
                                            <InputTextArea rows="10" style="height:100%;" @bind-Value="pageViewModel.Note" class="form-control" disabled="@DisabledForm" />
                                            <label for="Note"> Beskrivning </label>
                                        </div>
                                    </div>
                                </div>

                                <br />

                                @if (ShowOrHideAddNewButton)
                                {
                                    <div align="center">
                                        <button type="submit" align="center" class="btn btn-outline-success btn-sm"> Lägg till nytt byte </button>
                                    </div>
                                }

                                @if (ShowOrHideEditButton)
                                {
                                    <div align="center">
                                        <button type="submit" align="center" class="btn btn-outline-warning btn-sm"> Ändra </button>
                                    </div>
                                }

                                <br />

                                <div align="center">
                                    <button @onclick="RefreshPage" type="button" align="center" class="btn btn-outline-secondary btn-sm"> Tillbaka </button>
                                </div>

                                <br /> <br />

                            </EditForm>
                        </div>
                    }
                </div>

                @* View - Desktop *@
                <div id="desktop">
                    <div class="card-body">
                        <QuickGrid Items="@queryable" Pagination="pagination">

                            <PropertyColumn Title="Datum" Property="@(c => c.Date)" Format="yyyy-MM-dd" Sortable="true" />
                            <PropertyColumn Title="Jägare" Property="@(c => c.Hunter)" Sortable="true" />
                            <PropertyColumn Title="Vilt" Property="@(c => c.WildAnimal)" Sortable="true">
                                <ColumnOptions>
                                    <div class="search-box">
                                        <input type="search" autofocus @onchange="SearchWildAnimal" />
                                    </div>
                                </ColumnOptions>
                            </PropertyColumn>
                            <PropertyColumn Title="Typ" Property="@(c => c.Type)" Sortable="true" />
                            <PropertyColumn Title="Pass" Property="@(c => c.HuntingPass)" Sortable="true" />
                            <PropertyColumn Title="År" Property="@(c => HowManyYears(c.Date))" Sortable="true" />
                            <PropertyColumn Title="Plats" Property="@(c => c.HuntingPlaces)" Sortable="true">
                                <ColumnOptions>
                                    <div class="search-box">
                                        <input type="search" autofocus @onchange="SearchPlace" />
                                    </div>
                                </ColumnOptions>
                            </PropertyColumn>

                            <PropertyColumn Title="Hund" Property="@(c => c.Dog)" Sortable="true" />

                            <TemplateColumn Title="Info">

                                <div class="btn-group" role="group">
                                    <button title="Info" id="btnGroupDrop1" type="button" class="btn btn-outline-secondary btn-sm dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">
                                        Info
                                    </button>
                                    <ul class="dropdown-menu" aria-labelledby="btnGroupDrop1">
                                        <li class="dropdown-item"><button class="btn btn-outline-info btn-sm" @onclick="@(() => Info(context))"> All info </button></li>
                                        <li class="dropdown-item"><button class="btn btn-outline-warning btn-sm" @onclick="@(() => Edit(context))"> Ändra </button></li>
                                        <li class="dropdown-item"><button class="btn btn-outline-danger btn-sm" @onclick="@(() => OpenDeleteWindow(context))"> Ta bort </button></li>
                                    </ul>
                                </div>

                                <div class="modal @ModalClass" tabindex="-1" role="dialog" style="display:@ModalDisplay">
                                    <div class="modal-dialog" role="document">
                                        <div class="modal-content">
                                            <div class="modal-header">
                                                <h5 class="modal-title"> Vill du ta bort bytet? </h5>
                                            </div>
                                            <div class="modal-footer">
                                                <button type="button" class="btn btn-outline-danger" @onclick="@(() => Delete())"> Ta bort bytet </button>
                                                <button type="button" class="btn btn-outline-secondary" data-dismiss="modal" @onclick="() => CloseDeleteWindow()"> Ångra </button>
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                @if (ShowBackdrop)
                                {
                                    <div class="modal-backdrop fade show"></div>
                                }

                            </TemplateColumn>
                        </QuickGrid>

                        <div class="card-footer"><Paginator State="@pagination" /></div>

                        <br />
                        <br />

                    </div>
                </div>

                @* View - Mobile *@
                <div id="mobile">
                    <div class="card-body">
                        <QuickGrid Items="@queryable" Pagination="pagination">

                            <PropertyColumn Title="År" Property="@(c => HowManyYears(c.Date))" Sortable="true" />

                            <PropertyColumn Title="Vilt" Property="@(c => c.WildAnimal)" Sortable="true">
                                <ColumnOptions>
                                    <div class="search-box">
                                        <input type="search" autofocus @onchange="SearchWildAnimal" />
                                    </div>
                                </ColumnOptions>
                            </PropertyColumn>

                            <TemplateColumn Title="Info">

                                <div class="btn-group" role="group">
                                    <button title="Info" id="btnGroupDrop1" type="button" class="btn btn-outline-secondary btn-sm dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">
                                        Info
                                    </button>
                                    <ul class="dropdown-menu" aria-labelledby="btnGroupDrop1">
                                        <li class="dropdown-item"><button class="btn btn-outline-info btn-sm" @onclick="@(() => Info(context))"> All info </button></li>
                                        <li class="dropdown-item"><button class="btn btn-outline-warning btn-sm" @onclick="@(() => Edit(context))"> Ändra </button></li>
                                        <li class="dropdown-item"><button class="btn btn-outline-danger btn-sm" @onclick="@(() => OpenDeleteWindow(context))"> Ta bort </button></li>
                                    </ul>
                                </div>

                                <div class="modal @ModalClass" tabindex="-1" role="dialog" style="display:@ModalDisplay">
                                    <div class="modal-dialog" role="document">
                                        <div class="modal-content">
                                            <div class="modal-header">
                                                <h5 class="modal-title"> Vill du ta bort bytet? </h5>
                                            </div>
                                            <div class="modal-footer">
                                                <button type="button" class="btn btn-outline-danger" @onclick="@(() => Delete())"> Ta bort byte </button>
                                                <button type="button" class="btn btn-outline-secondary" data-dismiss="modal" @onclick="() => CloseDeleteWindow()"> Ångra </button>
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                @if (ShowBackdrop)
                                {
                                    <div class="modal-backdrop fade show"></div>
                                }

                            </TemplateColumn>
                        </QuickGrid>

                        <br />
                        <br />

                    </div>
                </div>

            </div>
        </div>
    </div>

    @* Footer *@
    <div>

        <br /> <br />

        <div class="footer" align="center">
            <p> Copyright 2023 - @DateTime.Now.Year</p>
        </div>

        <br /> <br />

    </div>
}
catch (Exception ex)
{
    ShowErrorMessage($"Övergripande felmeddelande: {ex.Message}");
}

@* Back-End *@
@code
{
    [SupplyParameterFromForm]
    private HuntingPreyViewModels pageViewModel { get; set; } = new();

    PaginationState pagination = new PaginationState { ItemsPerPage = 30 };
    private IQueryable<HuntingPreyViewModels> queryable = Enumerable.Empty<HuntingPreyViewModels>().AsQueryable();

    // Holds temporary id to delete items
    private int TemporaryId { get; set; } = 0;

    // Modol window settings
    public Guid Guid = Guid.NewGuid();
    public string ModalDisplay = "none;";
    public string ModalClass = "";
    public bool ShowBackdrop = false;

    // Hide button and fields
    private bool ShowOrHideAddOrEditForm { get; set; } = false;
    private bool ShowOrHideCreateButton { get; set; } = true;
    private bool ShowOrHideEditButton { get; set; } = false;
    private bool ShowOrHideAddNewButton { get; set; } = false;
    private bool DisabledForm { get; set; } = false;

    // Navigation list
    private readonly (string Href, string Text)[] navList = new[]
    {
        ("HuntingPage", "Start"),
        ("HuntingMyListPage", "Mina jaktbyten"),
        ("HuntingPreyPage", "Jaktbyten"),
        ("HuntingTeamMembersPage", "Medlemmar"),
        ("HuntingTowerInspectionPage", "Jakttornsinspektioner")
    };

    // Error text messeges
    private bool ShowOrHideErrorMessage { get; set; } = false;
    private string ErrorMessage { get; set; } = string.Empty;
    private string InfoMessage { get; set; } = string.Empty;
    private bool ShowOrHideInfoMessage { get; set; } = false;

    private void ShowErrorMessage(string errorMessage)
    {
        ErrorMessage = errorMessage;
        ShowOrHideErrorMessage = true;
    }

    // Load data from database to the Queryable container
    private async Task ConvertListToQueryable()
    {
        try
        {
            await using ApplicationDbContext db = await IDbContextFactory.CreateDbContextAsync() ?? throw new Exception("ConvertListToQueryableAsync: db == null!");

            List<HuntingPrey> items = await db.HuntingPrey.OrderByDescending(c => c.Date).ToListAsync();

            if (!items.Any())
            {
                InfoMessage = "Finns ingen data att visa!";
                ShowOrHideInfoMessage = true;
                return;
            }

            queryable = items
                .Select(model => BackEndClass.ChangeFromModelToViewModel(model))
                .AsQueryable();

            pagination.TotalItemCountChanged += (sender, EventArgs) => StateHasChanged();
        }
        catch (Exception ex)
        {
            ShowErrorMessage($"ConvertListToQueryableAsync. Felmeddelande: {ex.Message}");
        }
    }

    protected override async Task OnInitializedAsync() => await ConvertListToQueryable();

    private async Task RefreshPage() => await Task.Run(() => Navigation.Refresh(true));

    private void ShowAddForm()
    {
        ShowOrHideAddOrEditForm = true;
        ShowOrHideAddNewButton = true;
    }

    private async Task AddOrEdit()
    {
        DisabledForm = false;

        try
        {
            if (pageViewModel.HuntingPreyId > 0)
            {
                ErrorMessage = await BackEndClass.Edit(pageViewModel);
                ShowOrHideEditButton = true;
            }
            else
            {
                ErrorMessage = await BackEndClass.Add(pageViewModel);
                ShowOrHideAddNewButton = true;
            }

            if (!string.IsNullOrEmpty(ErrorMessage))
            {
                ShowOrHideAddOrEditForm = true;
                ShowOrHideErrorMessage = true;
                return;
            }
            else
            {
                pageViewModel = new();
                await RefreshPage();
            }
        }
        catch (Exception ex)
        {
            ShowErrorMessage($"Lägg till eller ändra. Felmeddelande: {ex.Message}");
        }
    }

    private void Info(HuntingPreyViewModels vm)
    {
        ShowOrHideAddOrEditForm = !ShowOrHideAddOrEditForm;
        ShowOrHideCreateButton = false;
        ShowOrHideEditButton = false;
        ShowOrHideAddNewButton = false;
        DisabledForm = true;
        pageViewModel = vm;
    }

    private void Edit(HuntingPreyViewModels vm)
    {
        if (vm.HuntingPreyId == 0)
        {
            ShowErrorMessage($"Går inte att ändra jakt bytet. ID = {vm.HuntingPreyId}!");
            return;
        }

        DisabledForm = false;
        ShowOrHideEditButton = true;
        ShowOrHideAddNewButton = false;
        ShowOrHideCreateButton = false;
        ShowOrHideAddOrEditForm = true;
        pageViewModel = vm;
    }

    private async Task Delete()
    {
        try
        {
            await using ApplicationDbContext db = await IDbContextFactory.CreateDbContextAsync() ?? throw new Exception("Delete: db == null!");

            if (!db.HuntingPrey.Any())
            {
                ShowErrorMessage("Gick inte att ta bort jakt bytet, databasen är tom!");
                return;
            }

            HuntingPrey? model = await db.HuntingPrey.FirstOrDefaultAsync(a => a.HuntingPreyId == TemporaryId);

            if (model == null)
            {
                ShowErrorMessage($"Gick inte att ta bort jakt bytet. Model = null! (TemporaryId = {TemporaryId})");
                return;
            }

            ErrorMessage = await BackEndClass.Delete(model);

            if (!string.IsNullOrEmpty(ErrorMessage))
                ShowOrHideErrorMessage = true;
            else
            {
                pageViewModel = new();
                await RefreshPage();
            }
        }
        catch (Exception ex)
        {
            ShowErrorMessage($"Ta bort. Felmeddelande: {ex.Message}");
        }
    }

    private void ToggleModal(ref string modalDisplay, ref string modalClass, ref bool showBackdrop, bool isOpen)
    {
        modalDisplay = isOpen ? "block;" : "none";
        modalClass = isOpen ? "Show" : "";
        showBackdrop = isOpen;
        StateHasChanged();
    }

    private void OpenDeleteWindow(HuntingPreyViewModels vm)
    {
        TemporaryId = vm.HuntingPreyId;
        ToggleModal(ref ModalDisplay, ref ModalClass, ref ShowBackdrop, true);
    }

    private void CloseDeleteWindow() => ToggleModal(ref ModalDisplay, ref ModalClass, ref ShowBackdrop, false);

    private async Task SearchPlace(ChangeEventArgs e)
    {
        try
        {
            await using ApplicationDbContext db = await IDbContextFactory.CreateDbContextAsync() ?? throw new Exception("SearchFirstName: db == null!");

            queryable = Enumerable.Empty<HuntingPreyViewModels>().AsQueryable();

            if (e.Value is string searchValue && !string.IsNullOrEmpty(searchValue))
            {
                searchValue = searchValue.ToLower();

                Dictionary<string, HuntingPlaces> huntingPlaceMap = new()
                    {
                    { "habäck", HuntingPlaces.Habäck },
                    { "dalsjöfors", HuntingPlaces.Dalsjöfors },
                    { "karlabo", HuntingPlaces.Karlabo },
                    { "skog", HuntingPlaces.Skog },
                    { "smältryd", HuntingPlaces.Smältryd },
                    { "övrigt", HuntingPlaces.Övrigt }
                };

                if (huntingPlaceMap.TryGetValue(searchValue, out var huntingPlace))
                {
                    var result = db.HuntingPrey.Where(c => c.HuntingPlaces == huntingPlace);

                    if (result.Any())
                    {
                        queryable = result
                            .OrderBy(c => c.HuntingPreyId)
                            .Select(model => BackEndClass.ChangeFromModelToViewModel(model))
                            .AsQueryable();
                    }
                }
            }
            else
                await RefreshPage();
        }
        catch (Exception ex)
        {
            ShowErrorMessage($"Sök plats. Felmeddelande: {ex.Message}");
        }
    }

    private async Task SearchWildAnimal(ChangeEventArgs e)
    {
        try
        {
            await using ApplicationDbContext db = await IDbContextFactory.CreateDbContextAsync() ?? throw new Exception("SearchWildAnimal: db == null!");

            queryable = Enumerable.Empty<HuntingPreyViewModels>().AsQueryable();

            if (e.Value is string searchValue && !string.IsNullOrEmpty(searchValue))
            {
                searchValue = searchValue.ToLower();
                var wildAnimalMap = new Dictionary<string, WildAnimal>
            {
                { "hare", WildAnimal.Hare },
                { "lo", WildAnimal.Lo },
                { "rådjur", WildAnimal.Rådjur },
                { "räv", WildAnimal.Räv },
                { "vildsvin", WildAnimal.Vildsvin },
                { "älg", WildAnimal.Älg },
                { "övrigt", WildAnimal.Övrigt }
            };

                if (wildAnimalMap.TryGetValue(searchValue, out var wildAnimal))
                {
                    var result = db.HuntingPrey.Where(c => c.WildAnimal == wildAnimal);

                    if (result.Any())
                    {
                        queryable = result
                            .OrderBy(c => c.HuntingPreyId)
                            .Select(model => BackEndClass.ChangeFromModelToViewModel(model))
                            .AsQueryable();
                    }
                }
            }
            else
                await RefreshPage();
        }
        catch (Exception ex)
        {
            ShowErrorMessage($"Sök namn. Felmeddelande: {ex.Message}");
        }
    }

    private int HowManyYears(DateTime date)
    {
        DateTime now = DateTime.Now;
        int years = now.Year - date.Year;

        // Check if the date has not occurred yet this year
        if (now < date.AddYears(years))
            years--;

        return years;
    }
}