@page "/HuntingMyList"

@using MyPrivateApp.Client.ViewModels
@using MyPrivateApp.Components.Enum
@using MyPrivateApp.Components.Hunting.Classes
@using MyPrivateApp.Components.ViewModels.HuntingViemModels
@using MyPrivateApp.Data
@using MyPrivateApp.Data.Models
@using Microsoft.AspNetCore.Components.QuickGrid

@rendermode InteractiveServer

@inject ApplicationDbContext db;
@inject NavigationManager Navigation
@inject IHuntingMyListClass HuntingMyListClass

<PageTitle> Min jakt lista </PageTitle>

@* Header *@
<div>

    <br />
    <br />

    <h1 style="text-align:center"> Min jakt lista </h1>

    <div style="text-align:center" hidden="@ShowOrHideCreateButton">

        <br />
        <br />

        <button class="btn btn-outline-success btn-sm" @onclick="@HideNewOrChangesForm"> Nytt byte </button>
    </div>

    <div style="text-align:center" hidden="@ShowOrHideErrorMessage">
        <br />
        <br />
        <Alert Color="AlertColor.Danger"> <Icon Name="IconName.ExclamationTriangleFill" class="me-2"></Icon> <b>@ErrorMessage</b> </Alert>
    </div>

    <br />
    <br />

</div>

<div class="container">
    <div class="col-md-12">
        <div class="card">

            @* Form *@
            <div class="card-header">
                <EditForm Model="hunting" OnSubmit="AddOrEdit" FormName="AddOrUpdateHunting" Enhance hidden="@(!HideNewOrChangesFields)">

                     <DataAnnotationsValidator />

                     <ValidationSummary class="text-danger" role="alert" />

                     <div class="row">

                         <div id="mobile" class="col-4" />

                         <div class="col-6">
                             <div class="form-floating">
                                 <InputDate @bind-Value="hunting.Date" class="form-control" disabled="@DisabledForm" />
                                 <label for="Date"> Datum </label>
                                 <ValidationMessage For="() => hunting.Date" class="text-danger" />
                             </div>
                         </div>
                     </div>

                     <br />

                     <div class="row">

                         <div id="mobile" class="col-4" />

                         <div class="col-6">
                             <div class="form-floating">
                                 <InputSelect @bind-Value="hunting.WildAnimal" class="form-control" placeholder="" disabled="@DisabledForm">
                                     @foreach (object wildAnimal in Enum.GetValues(typeof(WildAnimal)))
                                    {
                                        <option value="@wildAnimal">@wildAnimal</option>
                                    }
                                </InputSelect>
                                <label for="wildAnimal"> Vilt </label>
                                <ValidationMessage For="() => hunting.WildAnimal" class="text-danger" />
                            </div>
                        </div>
                        <div class="col-6">
                            <div class="form-floating">
                                <InputText @bind-Value="hunting.Type" class="form-control" placeholder="" disabled="@DisabledForm" />
                                <label for="Type"> Typ </label>
                                <ValidationMessage For="() => hunting.Type" class="text-danger" />
                            </div>
                        </div>
                    </div>

                    <br />

                    <div class="row">

                        <div id="mobile" class="col-4" />

                        <div class="col-6">
                            <div class="form-floating">
                                <InputText @bind-Value="hunting.Dog" class="form-control" placeholder="" disabled="@DisabledForm" />
                                <label for="Dog"> Hund </label>
                                <ValidationMessage For="() => hunting.Dog" class="text-danger" />
                            </div>
                        </div>
                        <div class="col-6">
                            <div class="form-floating">
                                <InputSelect @bind-Value="hunting.HuntingPlaces" class="form-control" placeholder="" disabled="@DisabledForm">
                                    @foreach (object huntingPlaces in Enum.GetValues(typeof(HuntingPlaces)))
                                    {
                                        <option value="@huntingPlaces">@huntingPlaces</option>
                                    }
                                </InputSelect>
                                <label for="huntingPlaces"> Plats </label>
                                <ValidationMessage For="() => hunting.HuntingPlaces" class="text-danger" />
                            </div>
                        </div>
                    </div>

                    <br />

                    <div class="row">
                        <div class="col-12">
                            <div class="form-floating">
                                <InputTextArea @bind-Value="hunting.Note" class="form-control" disabled="@DisabledForm" />
                                <label for="Note"> Beskrivning </label>
                                <ValidationMessage For="() => hunting.Note" class="text-danger" />
                            </div>
                        </div>
                    </div>

                    <br />

                    <div style="text-align:center">
                        <button hidden="@ShowOrHideAddNewButton" @onclick="HideNewOrChangesForm" type="submit" style="text-align:center" class="btn btn-outline-success btn-sm"> Lägg till ny jakt </button>
                    </div>

                    <div style="text-align:center">
                        <button @onclick="HideNewOrChangesForm" hidden="@ShowOrHideEditButton" type="submit" style="text-align:center" class="btn btn-outline-warning btn-sm"> Ändra </button>
                    </div>

                    <br />

                    <div style="text-align:center">
                        <button @onclick="RefreshPage" type="button" style="text-align:center" class="btn btn-outline-secondary btn-sm"> Tillbaka </button>
                    </div>

                    <br />
                    <br />
                </EditForm>
            </div>

            @* Desktop screen *@
            <div id="desktop">
                <div class="card-body">
                    <QuickGrid Items="@huntingMyListQueryable" Pagination="pagination">

                        <PropertyColumn Title="Vilt" Property="@(c => c.WildAnimal)" Sortable="true">
                            <ColumnOptions>
                                <div class="search-box">
                                    <input type="search" autofocus @onchange="SearchWildAnimal" />
                                </div>
                            </ColumnOptions>
                        </PropertyColumn>
                        <PropertyColumn Title="Typ" Property="@(c => c.Type)" Sortable="true" />
                        <PropertyColumn Title="År" Property="@(c => HowManyYears(c.Date))" Sortable="true" />
                        <PropertyColumn Title="Plats" Property="@(c => c.HuntingPlaces)" Sortable="true">
                            <ColumnOptions>
                                <div class="search-box">
                                    <input type="search" autofocus @onchange="SearchPlace" />
                                </div>
                            </ColumnOptions>
                        </PropertyColumn>

                        <PropertyColumn Title="Hund" Property="@(c => c.Dog)" Sortable="true" />

                        <TemplateColumn Title="Info">

                            <div class="btn-group" role="group">
                                <button title="Info" id="btnGroupDrop1" type="button" class="btn btn-outline-secondary btn-sm dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">
                                    Info
                                </button>
                                <ul class="dropdown-menu" aria-labelledby="btnGroupDrop1">
                                    <li class="dropdown-item"><button class="btn btn-outline-info btn-sm" @onclick="@(() => Info(context))"> All info </button></li>
                                    <li class="dropdown-item"><button class="btn btn-outline-warning btn-sm" @onclick="@(() => Edit(context))"> Ändra </button></li>
                                    <li class="dropdown-item"><button class="btn btn-outline-danger btn-sm" @onclick="@(() => OpenDeleteWindow())"> Ta bort </button></li>
                                </ul>
                            </div>

                            <div class="modal @ModalClass" tabindex="-1" role="dialog" style="display:@ModalDisplay">
                                <div class="modal-dialog" role="document">
                                    <div class="modal-content">
                                        <div class="modal-header">
                                            <h5 class="modal-title"> Vill du ta bort jakten? </h5>
                                        </div>
                                        <div class="modal-footer">
                                            <button type="button" class="btn btn-outline-danger" @onclick="@(() => Delete(context))"> Ta bort kontakt </button>
                                            <button type="button" class="btn btn-outline-secondary" data-dismiss="modal" @onclick="() => CloseWindow()"> Ångra </button>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            @if (ShowBackdrop)
                            {
                                <div class="modal-backdrop fade show"></div>
                            }

                        </TemplateColumn>
                    </QuickGrid>

                    <div class="card-footer"><Paginator State="@pagination" /></div>

                    <br />
                    <br />

                </div>
            </div>

            @* Mobile streen *@
            <div id="mobile">
                <div class="card-body">
                    <QuickGrid Items="@huntingMyListQueryable" Pagination="pagination">

                        <PropertyColumn Title="Vilt" Property="@(c => c.WildAnimal)" Sortable="true">
                            <ColumnOptions>
                                <div class="search-box">
                                    <input type="search" autofocus @onchange="SearchWildAnimal" />
                                </div>
                            </ColumnOptions>
                        </PropertyColumn>
                        <PropertyColumn Title="Plats" Property="@(c => c.HuntingPlaces)" Sortable="true">
                            <ColumnOptions>
                                <div class="search-box">
                                    <input type="search" autofocus @onchange="SearchPlace" />
                                </div>
                            </ColumnOptions>
                        </PropertyColumn>
                        <TemplateColumn Title="Info">

                            <div class="btn-group" role="group">
                                <button title="Info" id="btnGroupDrop1" type="button" class="btn btn-outline-secondary btn-sm dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">
                                    Info
                                </button>
                                <ul class="dropdown-menu" aria-labelledby="btnGroupDrop1">
                                    <li class="dropdown-item"><button class="btn btn-outline-info btn-sm" @onclick="@(() => Info(context))"> All info </button></li>
                                    <li class="dropdown-item"><button class="btn btn-outline-warning btn-sm" @onclick="@(() => Edit(context))"> Ändra </button></li>
                                    <li class="dropdown-item"><button class="btn btn-outline-danger btn-sm" @onclick="@(() => OpenDeleteWindow())"> Ta bort </button></li>
                                </ul>
                            </div>

                            <div class="modal @ModalClass" tabindex="-1" role="dialog" style="display:@ModalDisplay">
                                <div class="modal-dialog" role="document">
                                    <div class="modal-content">
                                        <div class="modal-header">
                                            <h5 class="modal-title"> Vill du ta bort jakten? </h5>
                                        </div>
                                        <div class="modal-footer">
                                            <button type="button" class="btn btn-outline-danger" @onclick="@(() => Delete(context))"> Ta bort kontakt </button>
                                            <button type="button" class="btn btn-outline-secondary" data-dismiss="modal" @onclick="() => CloseWindow()"> Ångra </button>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            @if (ShowBackdrop)
                            {
                                <div class="modal-backdrop fade show"></div>
                            }

                        </TemplateColumn>
                    </QuickGrid>

                    <br />
                    <br />

                </div>
            </div>

        </div>
    </div>
</div>

<br />
<br />

<div class="footer" align="center">
    <p> Copyright 2023 - @DateTime.Now.Year</p>
</div>

<br />
<br />

@code
{
    [SupplyParameterFromForm]
    private HuntingMyListViewModels hunting { get; set; } = new();

    // Modol window settings
    public Guid Guid = Guid.NewGuid();
    public string ModalDisplay = "none;";
    public string ModalClass = "";
    public bool ShowBackdrop = false;

    // Hide button and fields
    private bool HideNewOrChangesFields { get; set; } = false;
    private bool ShowOrHideCreateButton { get; set; } = false;
    private bool ShowOrHideEditButton { get; set; } = false;
    private bool ShowOrHideAddNewButton { get; set; } = false;
    private bool DisabledForm { get; set; } = false;
    private bool ShowOrHideErrorMessage { get; set; } = true;

    // Text messeges
    private string ErrorMessage { get; set; } = string.Empty;

    PaginationState pagination = new PaginationState { ItemsPerPage = 10 };
    private IQueryable<HuntingMyListViewModels> huntingMyListQueryable = Enumerable.Empty<HuntingMyListViewModels>().AsQueryable();

    // Load data from database to the Queryable container
    private void ConvertListToQueryable()
    {
        if (db.HuntingMyList.Count() == 0) return;

        huntingMyListQueryable = Enumerable.Empty<HuntingMyListViewModels>().AsQueryable();

        foreach (Data.Models.Hunting.HuntingMyList model in db.HuntingMyList.OrderBy(c => c.HuntingMyListId))
        {
            HuntingMyListViewModels hunting = HuntingMyListClass.ChangeFromModelToViewModel(model);
            huntingMyListQueryable = huntingMyListQueryable.Concat((new[] { hunting }).AsQueryable());
        }

        pagination.TotalItemCountChanged += (sender, EventArgs) => StateHasChanged();
    }

    protected override void OnInitialized() => ConvertListToQueryable();

    private void HideNewOrChangesForm()
    {
        HideNewOrChangesFields = !HideNewOrChangesFields;
        ShowOrHideCreateButton = true;
        ShowOrHideEditButton = true;
    }

    private void RefreshPage() => Navigation.Refresh(true);

    private void AddOrEdit()
    {
        DisabledForm = false;

        if (hunting.HuntingMyListId > 0)
        {
            // Edit
            ErrorMessage = HuntingMyListClass.Edit(db, hunting);

            if (!string.IsNullOrEmpty(ErrorMessage))
            {
                HideNewOrChangesForm();
                ShowOrHideErrorMessage = false;
                ShowOrHideEditButton = false;
                return;
            }
            else
            {
                hunting = new();
                Navigation.Refresh(true);
                return;
            }
        }
        else
        {
            // Add
            ErrorMessage = HuntingMyListClass.Add(db, hunting, false);

            if (!string.IsNullOrEmpty(ErrorMessage))
            {
                HideNewOrChangesForm();
                ShowOrHideErrorMessage = false;
                ShowOrHideEditButton = true;
                ShowOrHideAddNewButton = false;
                return;
            }
            else
            {
                hunting = new();
                Navigation.Refresh(true);
                return;
            }
        }
    }

    private void Info(HuntingMyListViewModels vm)
    {
        HideNewOrChangesForm();
        ShowOrHideAddNewButton = true;
        DisabledForm = true;
        hunting = vm;
    }

    private void Edit(HuntingMyListViewModels vm)
    {
        DisabledForm = false;
        ShowOrHideEditButton = false;
        ShowOrHideAddNewButton = true;
        ShowOrHideCreateButton = true;
        HideNewOrChangesFields = true;
        hunting = vm;
    }

    private void Delete(HuntingMyListViewModels vm)
    {
        if (db.HuntingMyList.Count() == 0) return;

        ErrorMessage = HuntingMyListClass.Delete(db, vm, false);

        if (!string.IsNullOrEmpty(ErrorMessage))
        {
            ShowOrHideErrorMessage = false;
            return;
        }
        else
        {
            hunting = new();
            Navigation.Refresh(true);
            return;
        }
    }

    private void OpenDeleteWindow()
    {
        ModalDisplay = "block;";
        ModalClass = "Show";
        ShowBackdrop = true;
        StateHasChanged();
    }

    private void CloseWindow()
    {
        ModalDisplay = "none";
        ModalClass = "";
        ShowBackdrop = false;
        StateHasChanged();
    }

    private void SearchPlace(ChangeEventArgs e)
    {
        huntingMyListQueryable = Enumerable.Empty<HuntingMyListViewModels>().AsQueryable();

        if (!string.IsNullOrEmpty(e.Value!.ToString()))
        {
            string getName = string.Empty;

            foreach (int huntingPlaces in Enum.GetValues(typeof(HuntingPlaces)))
            {
                getName = Enum.GetName(typeof(HuntingPlaces), huntingPlaces).ToLower();

                if (getName == e.Value.ToString().ToLower())
                    break;
            }

            if (getName != string.Empty)
            {
                    IEnumerable<Data.Models.Hunting.HuntingMyList> result = null;

                switch (getName.ToLower())
                {
                    case "Välj":
                        break;

                    case "habäck":
                        result = db.HuntingMyList.Where(c => c.HuntingPlaces == HuntingPlaces.Habäck);
                        break;

                    case "dalsjöfors":
                        result = db.HuntingMyList.Where(c => c.HuntingPlaces == HuntingPlaces.Dalsjöfors);
                        break;

                    case "karlabo":
                        result = db.HuntingMyList.Where(c => c.HuntingPlaces == HuntingPlaces.Karlabo);
                        break;

                    case "skog":
                        result = db.HuntingMyList.Where(c => c.HuntingPlaces == HuntingPlaces.Skog);
                        break;

                    case "smältryd":
                        result = db.HuntingMyList.Where(c => c.HuntingPlaces == HuntingPlaces.Smältryd);
                        break;

                    case "övrigt":
                        result = db.HuntingMyList.Where(c => c.HuntingPlaces == HuntingPlaces.Övrigt);
                        break;
                }

                if (result == null || result.Count() == 0) return;

                if (result.Any())
                    foreach (Data.Models.Hunting.HuntingMyList model in result.OrderBy(c => c.HuntingMyListId))
                    {
                        HuntingMyListViewModels hunting = HuntingMyListClass.ChangeFromModelToViewModel(model);
                        huntingMyListQueryable = huntingMyListQueryable.Concat((new[] { hunting }).AsQueryable());
                    }
            }

            return;
        }

        Navigation.Refresh(true);
    }

    private void SearchWildAnimal(ChangeEventArgs e)
    {
        huntingMyListQueryable = Enumerable.Empty<HuntingMyListViewModels>().AsQueryable();

        if (!string.IsNullOrEmpty(e.Value!.ToString()))
        {
            string getName = string.Empty;

            foreach (int wildAnimal in Enum.GetValues(typeof(WildAnimal)))
            {
                getName = Enum.GetName(typeof(WildAnimal), wildAnimal).ToLower();

                if (getName == e.Value.ToString().ToLower())
                    break;
            }

            if (getName != string.Empty)
            {
                    IEnumerable<Data.Models.Hunting.HuntingMyList> result = null;

                switch (getName.ToLower())
                {
                    case "Välj":
                        break;

                    case "hare":
                        result = db.HuntingMyList.Where(c => c.WildAnimal == WildAnimal.Hare);
                        break;

                    case "lo":
                        result = db.HuntingMyList.Where(c => c.WildAnimal == WildAnimal.Lo);
                        break;

                    case "rådjur":
                        result = db.HuntingMyList.Where(c => c.WildAnimal == WildAnimal.Rådjur);
                        break;

                    case "räv":
                        result = db.HuntingMyList.Where(c => c.WildAnimal == WildAnimal.Räv);
                        break;

                    case "vildsvin":
                        result = db.HuntingMyList.Where(c => c.WildAnimal == WildAnimal.Vildsvin);
                        break;

                    case "älg":
                        result = db.HuntingMyList.Where(c => c.WildAnimal == WildAnimal.Älg);
                        break;

                    case "övrigt":
                        result = db.HuntingMyList.Where(c => c.WildAnimal == WildAnimal.Övrigt);
                        break;
                }

                if (result == null || result.Count() == 0) return;

                if (result.Any())
                    foreach (Data.Models.Hunting.HuntingMyList model in result.OrderBy(c => c.HuntingMyListId))
                    {
                        HuntingMyListViewModels hunting = HuntingMyListClass.ChangeFromModelToViewModel(model);
                        huntingMyListQueryable = huntingMyListQueryable.Concat((new[] { hunting }).AsQueryable());
                    }
            }

            return;
        }

        Navigation.Refresh(true);
    }

    private int HowManyYears(DateTime date) => DateTime.Now.Year - date.Year;
}