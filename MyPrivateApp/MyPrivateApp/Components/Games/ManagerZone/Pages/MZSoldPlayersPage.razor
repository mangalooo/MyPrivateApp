@page "/MZSoldPlayersPage"

@using MyPrivateApp.Components.Games.ManagerZone.Classes
@using MyPrivateApp.Components.ViewModels
@using MyPrivateApp.Components.ViewModels.Games.ManagerZone
@using MyPrivateApp.Data
@using MyPrivateApp.Data.Models
@using Microsoft.AspNetCore.Components.QuickGrid
@using MyPrivateApp.Data.Models.Games.ManagerZone

@rendermode InteractiveServer

@inject ApplicationDbContext db;
@inject NavigationManager Navigation
@inject IMZSoldClass BackEndClass

<PageTitle> ManagerZone </PageTitle>

@* Header *@
<div>

    @* Desktop Navigation*@
    <div id="desktop" style="text-align:center">
        <div class="btn-group">
            <NavLink href="MZPurchasedPlayersPage" type="button" class="btn btn-outline-dark btn-sm"> Köpta spelare </NavLink>
            <NavLink href="MZSoldPlayersPage" type="button" class="btn btn-outline-dark btn-sm"> Sålda spelare </NavLink>
        </div>
    </div>

    @* Mobile Navigation*@
    <div id="mobile">
        <div class="btn-group" role="group">
            <button title="Info" id="btnGroupDrop1" type="button" class="btn btn-outline-secondary btn-sm dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">
                Alla aktier sidor
            </button>
            <ul class="dropdown-menu" aria-labelledby="btnGroupDrop1">
                <li class="dropdown-item"><NavLink href="MZPurchasedPlayersPage" type="button" class="btn btn-outline-dark btn-sm"> Köpta spelare </NavLink></li>
                <li class="dropdown-item"><NavLink href="MZSoldPlayersPage" type="button" class="btn btn-outline-dark btn-sm"> Sålda spelare </NavLink></li>
            </ul>
        </div>
    </div>

    <br />
    <br />

    <h1 style="text-align:center"> Sålda spelare </h1>

    <div style="text-align:center" hidden="@ShowOrHideCreateButton">

        <br />
        <br />

        <button class="btn btn-outline-success btn-sm" @onclick="@HideNewOrChangesForm"> Ny såld spelare </button>
    </div>

    <div style="text-align:center" hidden="@ShowOrHideErrorMessage">
        <br />
        <br />
        <Alert Color="AlertColor.Danger"> <Icon Name="IconName.ExclamationTriangleFill" class="me-2"></Icon> <b>@ErrorMessage</b> </Alert>
    </div>

    <br />
    <br />

</div>

@* Form and views *@
<div class="container">
    <div class="col-md-12">
        <div class="card">

            @* Form *@
            <div class="card-header">
                <EditForm Model="PageModel" OnSubmit="AddOrEdit" FormName="AddOrUpdate" Enhance hidden="@(!HideNewOrChangesFields)">

                    <DataAnnotationsValidator />

                    <ValidationSummary class="text-danger" role="alert" />

                    <br />

                    <div class="row">

                        <div id="mobile" class="col-4" />

                        <div class="col-4">
                            <div class="form-floating">
                                <InputText @bind-Value="PageModel.Name" class="form-control" disabled="@DisabledForm" />
                                <label for="Name"> Namn </label>
                                <ValidationMessage For="() => PageModel.Name" class="text-danger" />
                            </div>
                        </div>

                        <div class="col-4">
                            <div class="form-floating">
                                <InputNumber @bind-Value="PageModel.YearsOld" class="form-control" placeholder="" disabled="@DisabledForm" />
                                <label for="YearsOld"> Ålder </label>
                                <ValidationMessage For="() => PageModel.YearsOld" class="text-danger" />
                            </div>
                        </div>

                        <div class="col-4">
                            <div class="form-floating">
                                <InputNumber @bind-Value="PageModel.Number" class="form-control" placeholder="" disabled="@DisabledForm" />
                                <label for="Number"> Nummer </label>
                                <ValidationMessage For="() => PageModel.Number" class="text-danger" />
                            </div>
                        </div>
                    </div>

                    <br />

                    <div class="row">

                        <div id="mobile" class="col-4" />

                        <div class="col-4">
                            <div class="form-floating">
                                <InputDate @bind-Value="PageModel.PurchasedDate" class="form-control" disabled="@DisabledForm" />
                                <label for="PurchasedDate"> Inköpsdatum </label>
                                <ValidationMessage For="() => PageModel.PurchasedDate" class="text-danger" />
                            </div>
                        </div>

                        <div class="col-4">
                            <div class="form-floating">
                                <InputDate @bind-Value="PageModel.SoldDate" class="form-control" placeholder="" disabled="@DisabledForm" />
                                <label for="SoldDate"> Säljdatum </label>
                                <ValidationMessage For="() => PageModel.SoldDate" class="text-danger" />
                            </div>
                        </div>

                        <div class="col-4">
                            <div class="form-floating">
                                <InputNumber @bind-Value="PageModel.DaysInTheClub" class="form-control" placeholder="" disabled="@DisabledForm" />
                                <label for="DaysInTheClub"> Dagar i klubben </label>
                                <ValidationMessage For="() => PageModel.DaysInTheClub" class="text-danger" />
                            </div>
                        </div>
                    </div>

                    <br />

                    <div class="row">

                        <div id="mobile" class="col-3" />

                        <div class="col-3">
                            <div class="form-floating">
                                <InputNumber @bind-Value="PageModel.SalaryTotal" class="form-control" disabled="@DisabledForm" />
                                <label for="SalaryTotal"> Totalt utbetald lön </label>
                                <ValidationMessage For="() => PageModel.SalaryTotal" class="text-danger" />
                            </div>
                        </div>

                        <div class="col-3">
                            <div class="form-floating">
                                <InputNumber @bind-Value="PageModel.TrainingModeTotalCost" class="form-control" disabled="@DisabledForm" />
                                <label for="TrainingModeTotalCost"> Total träningsläger kostnader </label>
                                <ValidationMessage For="() => PageModel.TrainingModeTotalCost" class="text-danger" />
                            </div>
                        </div>

                        <div class="col-3">
                            <div class="form-floating">
                                <InputNumber @bind-Value="PageModel.PurchaseAmount" class="form-control" placeholder="" disabled="@DisabledForm" />
                                <label for="PurchaseAmount"> Inköpsvärdet </label>
                                <ValidationMessage For="() => PageModel.PurchaseAmount" class="text-danger" />
                            </div>
                        </div>

                        <div class="col-3">
                            <div class="form-floating">
                                <InputNumber @bind-Value="PageModel.SoldAmount" class="form-control" placeholder="" disabled="@DisabledForm" />
                                <label for="SoldAmount"> Säljvärdet </label>
                                <ValidationMessage For="() => PageModel.SoldAmount" class="text-danger" />
                            </div>
                        </div>
                    </div>

                    <br />

                    <div class="row">

                        <div id="mobile" class="col-4" />

                        <div class="col-4">
                            <div class="form-floating">
                                <InputNumber @bind-Value="PageModel.TotalCost" class="form-control" disabled="@DisabledForm" />
                                <label for="TotalCost"> Total kostand </label>
                                <ValidationMessage For="() => PageModel.TotalCost" class="text-danger" />
                            </div>
                        </div>

                        <div class="col-4">
                            <div class="form-floating">
                                <InputNumber @bind-Value="PageModel.MoneyProfitOrLoss" class="form-control" placeholder="" disabled="@DisabledForm" />
                                <label for="MoneyProfitOrLoss"> Vinst/förslust </label>
                                <ValidationMessage For="() => PageModel.MoneyProfitOrLoss" class="text-danger" />
                            </div>
                        </div>

                        <div class="col-4">
                            <div class="form-floating">
                                <InputText @bind-Value="PageModel.PercentProfitOrLoss" class="form-control" placeholder="" disabled="@DisabledForm" />
                                <label for="PercentProfitOrLoss"> Vinst/förslust i % </label>
                                <ValidationMessage For="() => PageModel.PercentProfitOrLoss" class="text-danger" />
                            </div>
                        </div>
                    </div>

                    <br />

                    <div class="row">
                        <div class="col-12">
                            <div class="form-floating">
                                <InputTextArea rows="10" style="height:100%;" @bind-Value="PageModel.Note" class="form-control" disabled="@DisabledForm" />
                                <label for="Note"> Beskrivning </label>
                                <ValidationMessage For="() => PageModel.Note" class="text-danger" />
                            </div>
                        </div>
                    </div>

                    <br />
                    <br />

                    <div style="text-align:center">
                        <button hidden="@ShowOrHideAddNewButton" @onclick="HideNewOrChangesForm" type="submit" style="text-align:center" class="btn btn-outline-success btn-sm"> Lägg till ny spelare </button>
                    </div>

                    <div style="text-align:center">
                        <button @onclick="HideNewOrChangesForm" hidden="@ShowOrHideEditButton" type="submit" style="text-align:center" class="btn btn-outline-warning btn-sm"> Ändra </button>
                    </div>

                    <br />

                    <div style="text-align:center">
                        <button @onclick="RefreshPage" type="button" style="text-align:center" class="btn btn-outline-secondary btn-sm"> Tillbaka </button>
                    </div>

                    <br />
                    <br />

                </EditForm>
            </div>

            @* View - Desktop *@
            <div id="desktop">

                <div class="card-body">
                    <QuickGrid Items="@Queryable" Pagination="pagination">

                        <PropertyColumn Format="yyyy-MM-dd" Title="Inköpsdatum" Property="@(c => c.PurchasedDate)" Sortable="true" />
                        <PropertyColumn Format="yyyy-MM-dd" Title="Säljdatum" Property="@(c => c.SoldDate)" Sortable="true" />
                        <PropertyColumn Title="Dagar i klubben" Property="@(c => c.DaysInTheClub)" Sortable="true" />
                        <PropertyColumn Title="Vinst/förslust" Property="@(c => c.MoneyProfitOrLoss)" Sortable="true" />
                        <PropertyColumn Title="Vinst/förslust i %" Property="@(c => c.PercentProfitOrLoss)" Sortable="true" />


                        <TemplateColumn Title="Info">

                            <div class="btn-group" role="group">
                                <button title="Info" id="btnGroupDrop1" type="button" class="btn btn-outline-secondary btn-sm dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">
                                    Info
                                </button>
                                <ul class="dropdown-menu" aria-labelledby="btnGroupDrop1">
                                    <li class="dropdown-item"><button class="btn btn-outline-info btn-sm" @onclick="@(() => Info(context))"> All info </button></li>
                                    <li class="dropdown-item"><button class="btn btn-outline-warning btn-sm" @onclick="@(() => Edit(context))"> Ändra </button></li>
                                    <li class="dropdown-item"><button class="btn btn-outline-danger btn-sm" @onclick="@(() => OpenDeleteWindow(context))"> Ta bort </button></li>
                                </ul>
                            </div>

                            <div class="modal @ModalClass" tabindex="-1" role="dialog" style="display:@ModalDisplay">
                                <div class="modal-dialog" role="document">
                                    <div class="modal-content">
                                        <div class="modal-header">
                                            <h5 class="modal-title"> Vill du ta bort spelaren: @PageModel.Name? </h5>
                                        </div>
                                        <div class="modal-footer">
                                            <button type="button" class="btn btn-outline-danger" @onclick="@(() => Delete())"> Ta bort spare </button>
                                            <button type="button" class="btn btn-outline-secondary" data-dismiss="modal" @onclick="() => CloseDeleteWindow()"> Ångra </button>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            @if (ShowBackdrop)
                            {
                                <div class="modal-backdrop fade show"></div>
                            }

                        </TemplateColumn>
                    </QuickGrid>

                    <div class="card-footer"><Paginator State="@pagination" /></div>

                    <br />
                    <br />

                </div>
            </div>

            @* View - Mobile *@
            <div id="mobile">

                <div class="card-body">
                    <QuickGrid Items="@Queryable" Pagination="pagination">

                        <PropertyColumn Title="Vinst/förslust" Property="@(c => c.MoneyProfitOrLoss)" Sortable="true" />

                        <TemplateColumn Title="Info">

                            <div class="btn-group" role="group">
                                <button title="Info" id="btnGroupDrop1" type="button" class="btn btn-outline-secondary btn-sm dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">
                                    Info
                                </button>
                                <ul class="dropdown-menu" aria-labelledby="btnGroupDrop1">
                                    <li class="dropdown-item"><button class="btn btn-outline-info btn-sm" @onclick="@(() => Info(context))"> All info </button></li>
                                    <li class="dropdown-item"><button class="btn btn-outline-warning btn-sm" @onclick="@(() => Edit(context))"> Ändra </button></li>
                                    <li class="dropdown-item"><button class="btn btn-outline-danger btn-sm" @onclick="@(() => OpenDeleteWindow(context))"> Ta bort </button></li>
                                </ul>
                            </div>

                            <div class="modal @ModalClass" tabindex="-1" role="dialog" style="display:@ModalDisplay">
                                <div class="modal-dialog" role="document">
                                    <div class="modal-content">
                                        <div class="modal-header">
                                            <h5 class="modal-title"> Vill du ta bort spelaren: @PageModel.Name? </h5>
                                        </div>
                                        <div class="modal-footer">
                                            <button type="button" class="btn btn-outline-danger" @onclick="@(() => Delete())"> Ta bort spelare </button>
                                            <button type="button" class="btn btn-outline-secondary" data-dismiss="modal" @onclick="() => CloseDeleteWindow()"> Ångra </button>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            @if (ShowBackdrop)
                            {
                                <div class="modal-backdrop fade show"></div>
                            }

                        </TemplateColumn>
                    </QuickGrid>

                    <br />
                    <br />

                </div>
            </div>

        </div>
    </div>
</div>

@* Footer *@
<div>

    <br />
    <br />

    <div class="footer" align="center">
        <p> Copyright 2023 - @DateTime.Now.Year</p>
    </div>

    <br />
    <br />

</div>

@* Back-End *@
@code
{
    [SupplyParameterFromForm]
    private MZSoldPlayersViewModels PageModel { get; set; } = new();

    PaginationState pagination = new PaginationState { ItemsPerPage = 20 };
    private IQueryable<MZSoldPlayersViewModels> Queryable = Enumerable.Empty<MZSoldPlayersViewModels>().AsQueryable();

    // Holds temporary id to delete items
    private int TemporaryId { get; set; } = 0;

    // Modol window settings
    public Guid Guid = Guid.NewGuid();
    public string ModalDisplay = "none;";
    public string ModalClass = "";
    public bool ShowBackdrop = false;

    // Hide button and fields
    private bool HideNewOrChangesFields { get; set; } = false;
    private bool ShowOrHideCreateButton { get; set; } = false;
    private bool ShowOrHideEditButton { get; set; } = false;
    private bool ShowOrHideAddNewButton { get; set; } = false;
    private bool DisabledForm { get; set; } = false;
    private bool ShowOrHideErrorMessage { get; set; } = true;

    // Text messeges
    private string ErrorMessage { get; set; } = string.Empty;

    // Load data from database to the Queryable container
    private void ConvertListToQueryable()
    {
        if (db.MZSoldPlayers.Count() == 0) return;

        Queryable = Enumerable.Empty<MZSoldPlayersViewModels>().AsQueryable();

        foreach (Data.Models.Games.ManagerZone.MZSoldPlayers model in db.MZSoldPlayers.OrderBy(c => c.ManagerZoneSoldPlayerId))
        {
            MZSoldPlayersViewModels vm = BackEndClass.ChangeFromModelToViewModel(model);
            Queryable = Queryable.Concat((new[] { vm }).AsQueryable());
        }

        pagination.TotalItemCountChanged += (sender, EventArgs) => StateHasChanged();
    }

    protected override void OnInitialized() => ConvertListToQueryable();

    private void HideNewOrChangesForm()
    {
        HideNewOrChangesFields = !HideNewOrChangesFields;
        ShowOrHideCreateButton = true;
        ShowOrHideEditButton = true;
    }

    private void RefreshPage() => Navigation.Refresh(true);

    private void AddOrEdit()
    {
        DisabledForm = false;

        if (PageModel.ManagerZoneSoldPlayerId > 0)
        {
            // Edit
            ErrorMessage = BackEndClass.Edit(db, PageModel);

            if (!string.IsNullOrEmpty(ErrorMessage))
            {
                HideNewOrChangesForm();
                ShowOrHideErrorMessage = false;
                ShowOrHideEditButton = false;
                return;
            }
            else
            {
                PageModel = new();
                Navigation.Refresh(true);
                return;
            }
        }
        else
        {
            // Add
            ErrorMessage = BackEndClass.Add(db, PageModel);

            if (!string.IsNullOrEmpty(ErrorMessage))
            {
                HideNewOrChangesForm();
                ShowOrHideErrorMessage = false;
                ShowOrHideEditButton = true;
                ShowOrHideAddNewButton = false;
                return;
            }
            else
            {
                PageModel = new();
                Navigation.Refresh(true);
                return;
            }
        }
    }

    private void Info(MZSoldPlayersViewModels vm)
    {
        HideNewOrChangesForm();
        ShowOrHideAddNewButton = true;
        DisabledForm = true;
        PageModel = vm;
    }

    private void Edit(MZSoldPlayersViewModels vm)
    {
        DisabledForm = false;
        ShowOrHideEditButton = false;
        ShowOrHideAddNewButton = true;
        ShowOrHideCreateButton = true;
        HideNewOrChangesFields = true;
        PageModel = vm;
    }

    private void Delete()
    {
        if (db.MZSoldPlayers.Count() == 0) return;

        bool findId = db.MZSoldPlayers.Any(a => a.ManagerZoneSoldPlayerId == TemporaryId);

        if (findId)
        {
            MZSoldPlayers model = db.MZSoldPlayers.FirstOrDefault(a => a.ManagerZoneSoldPlayerId == TemporaryId);
            MZSoldPlayersViewModels vm = BackEndClass.ChangeFromModelToViewModel(model);

            ErrorMessage = BackEndClass.Delete(db, vm);

            if (!string.IsNullOrEmpty(ErrorMessage))
            {
                ShowOrHideErrorMessage = false;
                return;
            }
            else
            {
                PageModel = new();
                Navigation.Refresh(true);
                return;
            }
        }
    }

    private void OpenDeleteWindow(MZSoldPlayersViewModels vm)
    {
        ModalDisplay = "block;";
        ModalClass = "Show";
        ShowBackdrop = true;
        StateHasChanged();
        TemporaryId = vm.ManagerZoneSoldPlayerId;
    }

    private void CloseDeleteWindow()
    {
        ModalDisplay = "none";
        ModalClass = "";
        ShowBackdrop = false;
        StateHasChanged();
    }
}