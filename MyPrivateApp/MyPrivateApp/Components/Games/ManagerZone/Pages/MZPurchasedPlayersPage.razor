
@page "/MZPurchasedPlayersPage"

@using Microsoft.EntityFrameworkCore
@using MyPrivateApp.Components.Games.ManagerZone.Classes
@using MyPrivateApp.Components.ViewModels
@using MyPrivateApp.Components.ViewModels.Games.ManagerZone
@using MyPrivateApp.Data
@using MyPrivateApp.Data.Models
@using Microsoft.AspNetCore.Components.QuickGrid
@using MyPrivateApp.Data.Models.Games.ManagerZone
@using static Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions;

@rendermode @(new InteractiveServerRenderMode(prerender:false))

@inject NavigationManager Navigation
@inject IMZPurchasedClass BackEndClass
@inject IDbContextFactory<ApplicationDbContext> IDbContextFactory

<PageTitle> ManagerZone </PageTitle>

@try
{
    @* Header *@
    <div>

        <br />

        @* Navigation*@
        <div align="center">
            <div class="btn-group">
                <NavLink href="MZSoldPlayersPage" type="button" class="btn btn-outline-dark btn-sm"> Sålda spelare </NavLink>
            </div>
        </div>

        <br />

        <h1 align="center"> Köpta spelare </h1>

        <br />

        @if (ShowOrHideCreateButton)
        {
            <div style="text-align:center">
                <button class="btn btn-outline-success btn-sm" @onclick="@ShowAddForm"> Ny kontakt </button>
            </div>
        }

        @if (ShowOrHideErrorMessage)
        {
            <br />

            <div style="text-align:center">
                <Alert Color="AlertColor.Danger">
                    <Icon Name="IconName.ExclamationTriangleFill" class="me-2"></Icon>
                    <b>@ErrorMessage</b>
                </Alert>
            </div>
        }

        @if (ShowOrHideInfoMessage)
        {
            <br />

            <div align="center">
                <Alert Color="AlertColor.Info">
                    <b>@InfoMessage</b>
                </Alert>
            </div>
        }

        <br />

    </div>

    @* Form and views *@
    <div class="container">
        <div class="col-md-12">
            <div class="card">

                @* Form *@
                <div>
                    @if (ShowOrHideAddOrEditForm)
                    {
                        <div class="card-header">

                            <EditForm Model="pageViewModel" OnSubmit="AddOrEdit" FormName="AddOrEdit" Enhance>

                                <DataAnnotationsValidator />

                                <br />

                                <div class="row">

                                    <div id="mobile" class="col-4" />

                                    <div class="col-4">
                                        <div class="form-floating">
                                            <InputText @bind-Value="pageViewModel.Name" class="form-control" disabled="@DisabledForm" />
                                            <label for="Name"> Namn </label>
                                        </div>
                                    </div>

                                    <div class="col-4">
                                        <div class="form-floating">
                                            <InputNumber @bind-Value="pageViewModel.YearsOld" class="form-control" placeholder="" disabled="@DisabledForm" />
                                            <label for="YearsOld"> Ålder </label>
                                        </div>
                                    </div>

                                    <div class="col-4">
                                        <div class="form-floating">
                                            <InputNumber @bind-Value="pageViewModel.Number" class="form-control" placeholder="" disabled="@DisabledForm" />
                                            <label for="Number"> Nummer </label>
                                        </div>
                                    </div>
                                </div>

                                <br />

                                <div class="row">

                                    <div id="mobile" class="col-4" />

                                    <div class="col-4">
                                        <div class="form-floating">
                                            <InputDate @bind-Value="pageViewModel.PurchasedDate" class="form-control" disabled="@DisabledForm" />
                                            <label for="PurchasedDate"> Inköpsdatum </label>
                                        </div>
                                    </div>

                                    <div class="col-4">
                                        <div class="form-floating">
                                            <InputNumber @bind-Value="pageViewModel.PurchaseAmount" class="form-control" placeholder="" disabled="@DisabledForm" />
                                            <label for="PurchaseAmount"> Inköpsbelopp </label>
                                        </div>
                                    </div>

                                    <div class="col-4">
                                        <div class="form-floating">
                                            <span class="form-control" disabled="@true" placeholder=""> @BackEndClass.DaysInTheClub(pageViewModel.PurchasedDate) </span>
                                            <label for="DaysInTheClub"> Dagar i klubben </label>
                                        </div>
                                    </div>
                                </div>

                                <br />

                                <div class="row">

                                    <div id="mobile" class="col-3" />

                                    <div class="col-3">
                                        <div class="form-floating">
                                            <InputNumber @bind-Value="pageViewModel.Salary" class="form-control" disabled="@DisabledForm" />
                                            <label for="Salary"> Lön </label>
                                        </div>
                                    </div>

                                    <div class="col-3">
                                        <div class="form-floating">
                                            <span class="form-control" disabled="@true" placeholder=""> @BackEndClass.TotalSalary(pageViewModel.PurchasedDate, pageViewModel.Salary) </span>
                                            <label for="SalaryTotal"> Total utbetalad lön </label>
                                        </div>
                                    </div>

                                    <div class="col-3">
                                        <div class="form-floating">
                                            <InputNumber @bind-Value="pageViewModel.SalaryChange" class="form-control" placeholder="" disabled="@DisabledForm" />
                                            <label for="SalaryChange"> Ändra lön </label>
                                        </div>
                                    </div>

                                    <div class="col-3">
                                        <div class="form-floating">
                                            <InputNumber @bind-Value="pageViewModel.SalarySaved" class="form-control" placeholder="" disabled="@true" />
                                            <label for="SalarySaved"> Spara gammal lön </label>
                                        </div>
                                    </div>
                                </div>

                                <br />

                                <div class="row">

                                    <div id="mobile" class="col-4" />

                                    <div class="col-4">
                                        <div class="form-floating">
                                            <InputNumber @bind-Value="pageViewModel.TrainingModeCost" class="form-control" disabled="@DisabledForm" />
                                            <label for="TrainingModeCost"> Denna träningsläger kostnad </label>
                                        </div>
                                    </div>

                                    <div class="col-4">
                                        <div class="form-floating">
                                            <InputNumber @bind-Value="pageViewModel.TrainingModeTotalCost" class="form-control" placeholder="" disabled="@true" />
                                            <label for="TrainingModeTotalCost"> Total träningsläger kostnad </label>
                                        </div>
                                    </div>

                                    <div class="col-4">
                                        <div class="form-floating">
                                            <span class="form-control" disabled="@true" placeholder=""> @BackEndClass.TotalCost(pageViewModel.PurchasedDate, pageViewModel.Salary, pageViewModel.PurchaseAmount, pageViewModel.TrainingModeTotalCost, pageViewModel.SaleCharge) </span>
                                            <label for="TotalCostRightNow"> Total kostnad just nu </label>
                                        </div>
                                    </div>
                                </div>

                                <br />

                                <div class="row">
                                    <div class="col-12">
                                        <div class="form-floating">
                                            <InputTextArea rows="2" style="height:100%;" @bind-Value="pageViewModel.Note" class="form-control" disabled="@DisabledForm" />
                                            <label for="Note"> Beskrivning </label>
                                        </div>
                                    </div>
                                </div>

                                <br />

                                @if (Sale)
                                {
                                    <div class="row">

                                        <div id="mobile" class="col-4" />

                                        <div class="col-4">
                                            <div class="form-floating">
                                                <InputDate @bind-Value="pageViewModel.SoldDate" class="form-control" />
                                                <label for="SoldDate"> Sälj datum </label>
                                            </div>
                                        </div>

                                        <div class="col-4">
                                            <div class="form-floating">
                                                <InputNumber @bind-Value="pageViewModel.SoldAmount" class="form-control" placeholder="" />
                                                <label for="SoldAmount"> Sälj värdet </label>
                                            </div>
                                        </div>

                                        <div class="col-4">
                                            <div class="form-floating">
                                                <InputNumber @bind-Value="pageViewModel.SaleCharge" class="form-control" placeholder="" />
                                                <label for="SaleCharge"> Sälj avgift </label>
                                            </div>
                                        </div>

                                    </div>
                                }

                                <br />

                                @if (ShowOrHideAddNewButton)
                                {
                                    <div align="center">
                                        <button type="submit" align="center" class="btn btn-outline-success btn-sm"> Lägg till ny spelare </button>
                                    </div>
                                }

                                @if (ShowOrHideEditButton)
                                {
                                    <div align="center">
                                        <button type="submit" align="center" class="btn btn-outline-warning btn-sm"> Ändra </button>
                                    </div>
                                }

                                <br />

                                @if (ShowOrHideSaleButton)
                                {
                                    <div align="center">
                                        <button @onclick="OpenSaleWindow" type="button" align="center" class="btn btn-outline-danger btn-sm"> Sälja </button>

                                        <div class="modal @ModalClassSale" tabindex="-1" role="dialog" style="display:@ModalDisplaySale">
                                            <div class="modal-dialog" role="document" style="width:400px">
                                                <div class="modal-content">

                                                    <br />

                                                    <h5> Vill du sälja spelaren: <strong> @pageViewModel.Name? </strong> </h5>

                                                    <br />

                                                    <div class="modal-footer">
                                                        <button type="button" class="btn btn-outline-danger" @onclick="@(() => SellButton())"> Sälj </button>
                                                        <button type="button" class="btn btn-outline-secondary" data-dismiss="modal" @onclick="() => CloseSaleWindow()"> Ångra </button>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>

                                        @if (ShowBackdropSale)
                                        {
                                            <div class="modal-backdrop fade show" />
                                        }

                                        <br /> <br />
                                    </div>
                                }

                                <div align="center">
                                    <button @onclick="RefreshPage" type="button" align="center" class="btn btn-outline-secondary btn-sm"> Tillbaka </button>
                                </div>

                                <br /> <br />

                            </EditForm>
                        </div>
                    }
                </div>

                @* View - Desktop *@
                <div id="desktop">

                    <div class="card-body">
                        <QuickGrid Items="@queryable" Pagination="pagination">

                            <PropertyColumn Title="Nummer" Property="@(c => c.Number)" Sortable="true" />
                            <PropertyColumn Format="yyyy-MM-dd" Title="Inköpsdatum" Property="@(c => c.PurchasedDate)" Sortable="true" />
                            <PropertyColumn Title="Dagar i klubben" Property="@(c => BackEndClass.DaysInTheClub(c.PurchasedDate))" Sortable="true" />
                            <PropertyColumn Title="Inköpsbelopp" Property="@(c => c.PurchaseAmount)" Sortable="true" />
                            <PropertyColumn Title="Total kostnad" Property="@(c => BackEndClass.TotalCost(c.PurchasedDate, c.Salary, c.PurchaseAmount, c.TrainingModeTotalCost, c.SaleCharge))" Sortable="true" />
                            <PropertyColumn Title="Beskrivning" Property="@(c => c.Note)" Sortable="true" />

                            <TemplateColumn Title="Info">

                                <div class="btn-group" role="group">
                                    <button title="Info" id="btnGroupDrop1" type="button" class="btn btn-outline-secondary btn-sm dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">
                                        Info
                                    </button>
                                    <ul class="dropdown-menu" aria-labelledby="btnGroupDrop1">
                                        <li class="dropdown-item"><button class="btn btn-outline-info btn-sm" @onclick="@(() => Info(context))"> All info </button></li>
                                        <li class="dropdown-item"><button class="btn btn-outline-warning btn-sm" @onclick="@(() => Edit(context))"> Ändra </button></li>
                                        <li class="dropdown-item"><button class="btn btn-outline-dark btn-sm" @onclick="@(() => Sell(context))"> Sälj </button></li>
                                        <li class="dropdown-item"><button class="btn btn-outline-danger btn-sm" @onclick="@(() => OpenDeleteWindow(context))"> Ta bort </button></li>
                                    </ul>
                                </div>

                                <div class="modal @ModalClass" tabindex="-1" role="dialog" style="display:@ModalDisplay">
                                    <div class="modal-dialog" role="document">
                                        <div class="modal-content">
                                            <div class="modal-header">
                                                <h5 class="modal-title"> Vill du ta bort spelaren: @pageViewModel.Name? </h5>
                                            </div>
                                            <div class="modal-footer">
                                                <button type="button" class="btn btn-outline-danger" @onclick="@(() => Delete())"> Ta bort spelaren </button>
                                                <button type="button" class="btn btn-outline-secondary" data-dismiss="modal" @onclick="() => CloseDeleteWindow()"> Ångra </button>
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                @if (ShowBackdrop)
                                {
                                    <div class="modal-backdrop fade show"></div>
                                }

                            </TemplateColumn>
                        </QuickGrid>

                        <div class="card-footer"><Paginator State="@pagination" /></div>

                        <br />
                        <br />

                    </div>
                </div>

                @* View - Mobile *@
                <div id="mobile">

                    <div class="card-body">
                        <QuickGrid Items="@queryable" Pagination="pagination">

                            <PropertyColumn Title="Nr" Property="@(c => c.Number)" Sortable="true" />
                            <PropertyColumn Title="Dagar" Property="@(c => BackEndClass.DaysInTheClub(c.PurchasedDate))" Sortable="true" />

                            <TemplateColumn Title="Info">

                                <div class="btn-group" role="group">
                                    <button title="Info" id="btnGroupDrop1" type="button" class="btn btn-outline-secondary btn-sm dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">
                                        Info
                                    </button>
                                    <ul class="dropdown-menu" aria-labelledby="btnGroupDrop1">
                                        <li class="dropdown-item"><button class="btn btn-outline-info btn-sm" @onclick="@(() => Info(context))"> All info </button></li>
                                        <li class="dropdown-item"><button class="btn btn-outline-warning btn-sm" @onclick="@(() => Edit(context))"> Ändra </button></li>
                                        <li class="dropdown-item"><button class="btn btn-outline-dark btn-sm" @onclick="@(() => Sell(context))"> Sälj </button></li>
                                        <li class="dropdown-item"><button class="btn btn-outline-danger btn-sm" @onclick="@(() => OpenDeleteWindow(context))"> Ta bort </button></li>
                                    </ul>
                                </div>

                                <div class="modal @ModalClass" tabindex="-1" role="dialog" style="display:@ModalDisplay">
                                    <div class="modal-dialog" role="document">
                                        <div class="modal-content">
                                            <div class="modal-header">
                                                <h5 class="modal-title"> Vill du ta bort spelaren: @pageViewModel.Name? </h5>
                                            </div>
                                            <div class="modal-footer">
                                                <button type="button" class="btn btn-outline-danger" @onclick="@(() => Delete())"> Ta bort spelare </button>
                                                <button type="button" class="btn btn-outline-secondary" data-dismiss="modal" @onclick="() => CloseDeleteWindow()"> Ångra </button>
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                @if (ShowBackdrop)
                                {
                                    <div class="modal-backdrop fade show"></div>
                                }

                            </TemplateColumn>
                        </QuickGrid>

                        <br />
                        <br />

                    </div>
                </div>

            </div>
        </div>
    </div>

    @* Footer *@
    <div>

        <br /> <br />

        <div class="footer" align="center">
            <p> Copyright 2023 - @DateTime.Now.Year</p>
        </div>

        <br /> <br />

    </div>

}
catch (Exception ex)
{
    ShowErrorMessage($"Övergripande felmeddelande: {ex.Message}");
}

@* Back-End *@
@code
{
    [SupplyParameterFromForm]
    private MZPurchasedPlayersViewModels pageViewModel { get; set; } = new();
    PaginationState pagination = new PaginationState { ItemsPerPage = 30 };
    private IQueryable<MZPurchasedPlayersViewModels> queryable = Enumerable.Empty<MZPurchasedPlayersViewModels>().AsQueryable();

    // Holds temporary id to delete items
    private int TemporaryId { get; set; } = 0;

    // Modol window settings
    public Guid Guid = Guid.NewGuid();
    public string ModalDisplay = "none;";
    public string ModalClass = "";
    public bool ShowBackdrop = false;

    public Guid GuidSale = Guid.NewGuid();
    public string ModalDisplaySale = "none;";
    public string ModalClassSale = "";
    public bool ShowBackdropSale = false;

    // Hide button and fields
    private bool ShowOrHideAddOrEditForm { get; set; } = false;
    private bool ShowOrHideCreateButton { get; set; } = true;
    private bool ShowOrHideEditButton { get; set; } = false;
    private bool ShowOrHideAddNewButton { get; set; } = false;
    private bool DisabledForm { get; set; } = false;
    private bool Sale { get; set; } = false;
    private bool ShowOrHideSaleButton { get; set; } = false;

    // Text messeges
    private bool ShowOrHideErrorMessage { get; set; } = false;
    private string ErrorMessage { get; set; } = string.Empty;
    private string InfoMessage { get; set; } = string.Empty;
    private bool ShowOrHideInfoMessage { get; set; } = false;

    private void ShowErrorMessage(string errorMessage)
    {
        ErrorMessage = errorMessage;
        ShowOrHideErrorMessage = true;
    }

    // Load data from database to the Queryable container
    private async Task ConvertListToQueryable()
    {
        try
        {
            await using ApplicationDbContext db = await IDbContextFactory.CreateDbContextAsync() ?? throw new Exception("ConvertListToQueryableAsync: db == null!");

            List<MZPurchasedPlayers> items = await db.MZPurchasedPlayers.OrderByDescending(c => c.PurchasedDate).ToListAsync();

            if (!items.Any())
            {
                InfoMessage = "Finns ingen data att visa!";
                ShowOrHideInfoMessage = true;
                return;
            }

            queryable = items
                .Select(model => BackEndClass.ChangeFromModelToViewModel(model))
                .AsQueryable();

            pagination.TotalItemCountChanged += (sender, EventArgs) => StateHasChanged();
        }
        catch (Exception ex)
        {
            ShowErrorMessage($"ConvertListToQueryableAsync. Felmeddelande: {ex.Message}");
        }
    }

    protected override async Task OnInitializedAsync() => await ConvertListToQueryable();

    private async Task RefreshPage() => await Task.Run(() => Navigation.Refresh(true));

    private void ShowAddForm()
    {
        ShowOrHideAddOrEditForm = true;
        ShowOrHideAddNewButton = true;
    }

    private async Task AddOrEdit()
    {
        DisabledForm = false;

        try
        {
            if (pageViewModel.ManagerZonePurchasedPlayersId > 0)
            {
                ErrorMessage = await BackEndClass.Edit(pageViewModel);
                ShowOrHideEditButton = true;
            }
            else
            {
                ErrorMessage = await BackEndClass.Add(pageViewModel);
                ShowOrHideAddNewButton = true;
            }

            if (!string.IsNullOrEmpty(ErrorMessage))
            {
                ShowOrHideAddOrEditForm = true;
                ShowOrHideErrorMessage = true;
                return;
            }
            else
            {
                pageViewModel = new();
                await RefreshPage();
            }
        }
        catch (Exception ex)
        {
            ShowErrorMessage($"Lägg till eller ändra. Felmeddelande: {ex.Message}");
        }
    }

    private void Info(MZPurchasedPlayersViewModels vm)
    {
        ShowOrHideAddOrEditForm = !ShowOrHideAddOrEditForm;
        ShowOrHideCreateButton = false;
        ShowOrHideEditButton = false;
        ShowOrHideAddNewButton = false;
        ShowOrHideSaleButton = false;
        DisabledForm = true;
        pageViewModel = vm;
    }

    private void Edit(MZPurchasedPlayersViewModels vm)
    {
        if (vm.ManagerZonePurchasedPlayersId == 0)
        {
            ShowErrorMessage($"Går inte att ändra spelaren. ID = {vm.ManagerZonePurchasedPlayersId}!");
            return;
        }

        DisabledForm = false;
        ShowOrHideEditButton = true;
        ShowOrHideAddNewButton = false;
        ShowOrHideCreateButton = false;
        ShowOrHideAddOrEditForm = true;
        ShowOrHideSaleButton = false;
        pageViewModel = vm;
    }

    private void Sell(MZPurchasedPlayersViewModels vm)
    {
        if (vm == null)
        {
            ShowErrorMessage("Går inte att sälja spelaren. VM = null!");
            return;
        }

        Sale = true;
        ShowOrHideSaleButton = true;
        DisabledForm = true;
        ShowOrHideAddOrEditForm = !ShowOrHideAddOrEditForm;
        ShowOrHideCreateButton = false;
        ShowOrHideEditButton = false;
        ShowOrHideAddNewButton = false;
        pageViewModel = vm;
    }

    private async Task SellButton()
    {
        try
        {
            ErrorMessage = await BackEndClass.Sell(pageViewModel);

            if (!string.IsNullOrEmpty(ErrorMessage))
                ShowOrHideErrorMessage = true;
            else
            {
                pageViewModel = new();
                await RefreshPage();
            }
        }
        catch (Exception ex)
        {
            ShowErrorMessage($"Ett fel uppstod när spelaren skulle säljas: {ex.Message}");
        }
    }

    private async Task Delete()
    {
        try
        {
            await using ApplicationDbContext db = await IDbContextFactory.CreateDbContextAsync() ?? throw new Exception("Delete: db == null!");

            if (!db.MZPurchasedPlayers.Any())
            {
                ShowErrorMessage("Gick inte att ta bort spelaren, databasen är tom!");
                return;
            }

            MZPurchasedPlayers? model = await db.MZPurchasedPlayers.FirstOrDefaultAsync(a => a.ManagerZonePurchasedPlayersId == TemporaryId);

            if (model == null)
            {
                ShowErrorMessage($"Gick inte att ta bort spelaren. Model = null! (TemporaryId = {TemporaryId})");
                return;
            }

            ErrorMessage = await BackEndClass.Delete(model);

            if (!string.IsNullOrEmpty(ErrorMessage))
                ShowOrHideErrorMessage = true;
            else
            {
                pageViewModel = new();
                await RefreshPage();
            }
        }
        catch (Exception ex)
        {
            ShowErrorMessage($"Ta bort. Felmeddelande: {ex.Message}");
        }
    }

    private void OpenSaleWindow()
    {
        ModalDisplaySale = "block;";
        ModalClassSale = "Show";
        ShowBackdropSale = true;
        StateHasChanged();
    }

    private void CloseSaleWindow()
    {
        ModalDisplaySale = "none";
        ModalClassSale = "";
        ShowBackdropSale = false;
        StateHasChanged();
    }

    private void ToggleModal(ref string modalDisplay, ref string modalClass, ref bool showBackdrop, bool isOpen)
    {
        modalDisplay = isOpen ? "block;" : "none";
        modalClass = isOpen ? "Show" : "";
        showBackdrop = isOpen;
        StateHasChanged();
    }

    private void OpenDeleteWindow(MZPurchasedPlayersViewModels vm)
    {
        TemporaryId = vm.ManagerZonePurchasedPlayersId;
        ToggleModal(ref ModalDisplay, ref ModalClass, ref ShowBackdrop, true);
    }

    private void CloseDeleteWindow() => ToggleModal(ref ModalDisplay, ref ModalClass, ref ShowBackdrop, false);
}