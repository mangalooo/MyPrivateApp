@page "/Contact"

@using Azure.Core
@using MyPrivateApp.Client.ViewModels
@using MyPrivateApp.Components.Contact.Classes
@using MyPrivateApp.Data
@using MyPrivateApp.Data.Models
@using Microsoft.AspNetCore.Components.QuickGrid
@using Microsoft.AspNetCore.Http;

@rendermode InteractiveServer

@inject ApplicationDbContext db;
@inject NavigationManager Navigation
@inject IContactClass ContactClass

<PageTitle> Kontakter </PageTitle>

<h1 align="center"> Kontakter </h1>

<br />

<div align="center" hidden="@ShowOrHideCreateButton">
    <button class="btn btn-outline-success btn-sm" @onclick="@HideNewOrChangesContactForm"> Skapa ny kontakt</button>

    <br />

    <div style="text-align:center" hidden="@ShowOrHideErrorMessage">
        <br />
        <br />
        <Alert Color="AlertColor.Danger"> <Icon Name="IconName.ExclamationTriangleFill" class="me-2"></Icon> <b>@ErrorMessage</b> </Alert>
    </div>
</div>


<br />

<div class="container">
    <div>
        <div class="card">

            @* Form *@
            <div class="card-header">

                <EditForm Model="contact" OnSubmit="AddOrEdit" FormName="CreateOrUpdateContact" Enhance hidden="@(!HideNewOrChangesFields)">

                     <DataAnnotationsValidator />

                     <ValidationSummary class="text-danger" role="alert" />

                     <div class="row">

                         <div id="mobile" class="col-4" />

                         <div class="col-4">
                             <div class="form-floating">
                                 <InputText @bind-Value="contact.Name" class="form-control" disabled="@DisabledForm" />
                                 <label for="Name"> Namn </label>
                                 <ValidationMessage For="() => contact.Name" class="text-danger" />
                             </div>
                         </div>
                         <div class="col-4">
                             <div class="form-floating">
                                 <InputDate @bind-Value="contact.Birthday" class="form-control" disabled="@DisabledForm" />
                                 <label for="Birthday"> Födelsedag </label>
                                 <ValidationMessage For="() => contact.Birthday" class="text-danger" />
                             </div>
                         </div>
                         <div class="col-4">
                             <div class="form-floating">
                                 <InputText @bind-Value="contact.HomePage" class="form-control" placeholder="" disabled="@DisabledForm" />
                                 <label for="HomePage"> Hemsida </label>
                                 <ValidationMessage For="() => contact.HomePage" class="text-danger" />
                             </div>
                         </div>
                     </div>

                     <br />

                     <div class="row">

                         <div id="mobile" class="col-4" />

                         <div class="col-4">
                             <div class="form-floating">
                                 <InputText @bind-Value="contact.Address" class="form-control" placeholder="" disabled="@DisabledForm" />
                                 <label for="Address"> Adress </label>
                                 <ValidationMessage For="() => contact.Address" class="text-danger" />
                             </div>
                         </div>
                         <div class="col-4">
                             <div class="form-floating">
                                 <InputNumber @bind-Value="contact.PostCode" class="form-control" disabled="@DisabledForm" />
                                 <label for="PostCode"> Postnummer </label>
                                 <ValidationMessage For="() => contact.PostCode" class="text-danger" />
                             </div>
                         </div>
                         <div class="col-4">
                             <div class="form-floating">
                                 <InputText @bind-Value="contact.City" class="form-control" placeholder="" disabled="@DisabledForm" />
                                 <label for="City"> Stad </label>
                                 <ValidationMessage For="() => contact.City" class="text-danger" />
                             </div>
                         </div>
                     </div>

                     <br />

                     <div class="row">

                         <div id="mobile" class="col-4" />

                         <div class="col-4">
                             <div class="form-floating">
                                 <InputText @bind-Value="contact.PrivateMail" class="form-control" disabled="@DisabledForm" />
                                 <label for="PrivateMail"> E-post </label>
                                 <ValidationMessage For="() => contact.PrivateMail" class="text-danger" />
                             </div>
                         </div>
                         <div class="col-4">
                             <div class="form-floating">
                                 <InputText @bind-Value="contact.WorkEMail" class="form-control" placeholder="" disabled="@DisabledForm" />
                                 <label for="WorkEMail"> E-post jobb </label>
                                 <ValidationMessage For="() => contact.WorkEMail" class="text-danger" />
                             </div>
                         </div>
                         <div class="col-4">
                             <div class="form-floating">
                                 <InputText @bind-Value="contact.ExtraMail" class="form-control" placeholder="" disabled="@DisabledForm" />
                                 <label for="ExtraMail"> E-post extra </label>
                                 <ValidationMessage For="() => contact.ExtraMail" class="text-danger" />
                             </div>
                         </div>
                     </div>

                     <br />

                     <div class="row">

                         <div id="mobile" class="col-3" />

                         <div class="col-3">
                             <div class="form-floating">
                                 <InputText @bind-Value="contact.PhoneNumber" class="form-control" disabled="@DisabledForm" />
                                 <label for="PhoneNumber"> Mobil nummer </label>
                                 <ValidationMessage For="() => contact.PhoneNumber" class="text-danger" />
                             </div>
                         </div>
                         <div class="col-3">
                             <div class="form-floating">
                                 <InputText @bind-Value="contact.HomePhoneNumber" class="form-control" placeholder="" disabled="@DisabledForm" />
                                 <label for="HomePhoneNumber"> Hem nummer </label>
                                 <ValidationMessage For="() => contact.HomePhoneNumber" class="text-danger" />
                             </div>
                         </div>
                         <div class="col-3">
                             <div class="form-floating">
                                 <InputText @bind-Value="contact.WorkPhoneNumber" class="form-control" placeholder="" disabled="@DisabledForm" />
                                 <label for="WorkPhoneNumber"> Jobb nummer </label>
                                 <ValidationMessage For="() => contact.WorkPhoneNumber" class="text-danger" />
                             </div>
                         </div>
                         <div class="col-3">
                             <div class="form-floating">
                                 <InputText @bind-Value="contact.ExtraPhoneNumber" class="form-control" placeholder="" disabled="@DisabledForm" />
                                 <label for="ExtraPhoneNumber"> Extra nummer </label>
                                 <ValidationMessage For="() => contact.ExtraPhoneNumber" class="text-danger" />
                             </div>
                         </div>
                     </div>

                     <br />

                     <div class="row">
                         <div class="col-12">
                             <div class="form-floating">
                                 <InputTextArea @bind-Value="contact.Notes" class="form-control" placeholder="" disabled="@DisabledForm" />
                                 <label for="Notes"> Antecklingar </label>
                                 <ValidationMessage For="() => contact.Notes" class="text-danger" />
                             </div>
                         </div>
                     </div>

                     <br />

                     @* Desktop screen *@
                     <div id="desktop" class="form-group" align="center">
                         <label for="ChristmasCard"> Julkort </label>
                         <InputCheckbox @bind-Value="contact.ChristmasCard" class="darker-border-checkbox form-check-input" disabled="@DisabledForm" />
                         <ValidationMessage For="() => contact.ChristmasCard" class="text-danger" />

                         <label for="Relatives"> Släkt </label>
                         <InputCheckbox @bind-Value="contact.Relatives" class="darker-border-checkbox form-check-input" disabled="@DisabledForm" />
                         <ValidationMessage For="() => contact.Relatives" class="text-danger" />

                         <label for="Friends"> Vänner </label>
                         <InputCheckbox @bind-Value="contact.Friends" class="darker-border-checkbox form-check-input" disabled="@DisabledForm" />
                         <ValidationMessage For="() => contact.Friends" class="text-danger" />

                         <label for="Colleagues"> Kollegor </label>
                         <InputCheckbox @bind-Value="contact.Colleagues" class="darker-border-checkbox form-check-input" disabled="@DisabledForm" />
                         <ValidationMessage For="() => contact.Colleagues" class="text-danger" />
                     </div>

                     @* Mobile screen *@
                     <div id="mobile">
                         <div class="form-check">
                             <InputCheckbox id="ChristmasCard" @bind-Value="contact.ChristmasCard" class="form-check-input" disabled="@DisabledForm" />
                             <label class="form-check-label" for="ChristmasCard"> Julkort </label>
                             <ValidationMessage For="() => contact.ChristmasCard" class="text-danger" />
                         </div>

                         <div class="form-check">
                             <InputCheckbox id="Relatives" @bind-Value="contact.Relatives" class="form-check-input" disabled="@DisabledForm" />
                             <label class="form-check-label" for="Relatives"> Släkting </label>
                             <ValidationMessage For="() => contact.Relatives" class="text-danger" />
                         </div>
                         <div class="form-check">
                             <InputCheckbox id="Friends" @bind-Value="contact.Friends" class="form-check-input" disabled="@DisabledForm" />
                             <label class="form-check-label" for="Friends"> Vän </label>
                             <ValidationMessage For="() => contact.Friends" class="text-danger" />
                         </div>
                         <div class="form-check">
                             <InputCheckbox id="Colleagues" @bind-Value="contact.Colleagues" class="form-check-input" disabled="@DisabledForm" />
                             <label class="form-check-label" for="Colleagues"> Kollega </label>
                             <ValidationMessage For="() => contact.Colleagues" class="text-danger" />
                         </div>

                     </div>

                     <br />

                     <div align="center">
                         <button hidden="@ShowOrHideAddNewContactButton" @onclick="HideNewOrChangesContactForm" type="submit" align="center" class="btn btn-outline-success btn-sm"> Lägg till ny kontakt </button>
                     </div>

                     <div align="center">
                         <button @onclick="HideNewOrChangesContactForm" hidden="@ShowOrHideEditButton" type="submit" align="center" class="btn btn-outline-warning btn-sm"> Ändra </button>
                     </div>

                     <br />

                     <div align="center">
                         <button @onclick="RefreshPage" type="button" align="center" class="btn btn-outline-secondary btn-sm"> Tillbaka </button>
                     </div>

                     <br />
                     <br />

                 </EditForm>

             </div>

            @* Mobile screen *@
            <div id="mobile">

                <div class="row" align="center">
                    <div class="form-check-inline">

                        <label class="form-check-label">
                            Julkort <input type="checkbox" class="form-check-input" value="" id="1" bind="" @onchange="SearchChristmasCard">
                        </label>

                        <label class="form-check-label">
                            Släkt <input type="checkbox" class="form-check-input" value="" id="2" @onchange="SearchRelatives">
                        </label>

                    </div>
                </div>

                <div class="row" align="center">
                    <div class="form-check-inline">

                        <label class="form-check-label">
                            Vänner <input type="checkbox" class="form-check-input" value="" id="3" @onchange="SearchFriends">
                        </label>

                        <label class="form-check-label">
                            Kollegor <input type="checkbox" class="form-check-input" value="" id="4" @onchange="SearchColleagues">
                        </label>

                    </div>
                </div>

                 <div class="card-body">
                     <QuickGrid Items="@ContactsQueryable" Pagination="pagination">

                         <PropertyColumn Title="Namn" Property="@(c => c.Name)" Sortable="true">
                             <ColumnOptions>
                                 <div class="search-box">
                                     <input type="search" autofocus @onchange="SearchFirstName" />
                                 </div>
                             </ColumnOptions>
                         </PropertyColumn>

                         <TemplateColumn>

                             <div class="btn-group" role="group">
                                 <button title="Info" id="btnGroupDrop1" type="button" class="btn btn-outline-secondary btn-sm dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">
                                     Info
                                 </button>
                                 <ul class="dropdown-menu" aria-labelledby="btnGroupDrop1">
                                    <li class="dropdown-item"><button class="btn btn-outline-info btn-sm" @onclick="@(() => Info(context))"> All info </button></li>
                                     <li class="dropdown-item"><button class="btn btn-outline-warning btn-sm" @onclick="@(() => Edit(context))"> Ändra </button></li>
                                     <li class="dropdown-item"><button class="btn btn-outline-danger btn-sm" @onclick="@(() => OpenDeleteWindow())"> Ta bort </button></li>
                                 </ul>
                             </div>

                             <div class="modal @ModalClass" tabindex="-1" role="dialog" style="display:@ModalDisplay">
                                 <div class="modal-dialog" role="document">
                                     <div class="modal-content">
                                         <div class="modal-header">
                                             <h5 class="modal-title"> Vill du ta bort kontaken? </h5>
                                         </div>
                                         <div class="modal-footer">
                                            <button type="button" class="btn btn-outline-danger" @onclick="@(() => Delete(context))"> Ta bort kontakt </button>
                                             <button type="button" class="btn btn-outline-secondary" data-dismiss="modal" @onclick="() => CloseWindow()"> Ångra </button>
                                         </div>
                                     </div>
                                 </div>
                             </div>

                             @if (ShowBackdrop)
                            {
                                <div class="modal-backdrop fade show"></div>
                            }

                        </TemplateColumn>

                    </QuickGrid>

                    <br />
                    <br />

                </div>
            </div>

            @* Desktop screen *@
            <div id="desktop">

                <div align="center">
                    <div class="form-check-inline">
                        <label class="form-check-label">
                            Julkort <input type="checkbox" class="form-check-input" value="" id="1" bind="" @onchange="SearchChristmasCard">
                        </label>
                    </div>
                    <div class="form-check-inline">
                        <label class="form-check-label">
                            Släkt <input type="checkbox" class="form-check-input" value="" id="2" @onchange="SearchRelatives">
                        </label>
                    </div>
                    <div class="form-check-inline">
                        <label class="form-check-label">
                            Vänner <input type="checkbox" class="form-check-input" value="" id="3" @onchange="SearchFriends">
                        </label>
                    </div>
                    <div class="form-check-inline">
                        <label class="form-check-label">
                            Kollegor <input type="checkbox" class="form-check-input" value="" id="4" @onchange="SearchColleagues">
                        </label>
                    </div>
                </div>

                <br />

                <div class="card-body">
                    <QuickGrid Items="@ContactsQueryable" Pagination="pagination">

                        <PropertyColumn Title="Namn" Property="@(c => c.Name)" Sortable="true">
                            <ColumnOptions>
                                <div class="search-box">
                                    <input type="search" autofocus @onchange="SearchFirstName" />
                                </div>
                            </ColumnOptions>
                        </PropertyColumn>

                        <PropertyColumn Title="Ålder" Property="@(c => GetAge(c.Birthday))" Sortable="true">
                            <ColumnOptions>
                                <div class="search-box">
                                    <input type="search" autofocus @onchange="SearchAge" />
                                </div>
                            </ColumnOptions>
                        </PropertyColumn>

                        <PropertyColumn Title="Dagar till nästa födelsedag" Property="@(c => GetDaysToNextBirthday(c.Birthday))" Sortable="true" />

                        <TemplateColumn>

                            <div class="btn-group" role="group">
                                <button id="btnGroupDrop1" type="button" class="btn btn-outline-secondary btn-sm dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">
                                    Info
                                </button>
                                <ul class="dropdown-menu" aria-labelledby="btnGroupDrop1">
                                    <li class="dropdown-item"><button class="btn btn-outline-info btn-sm" @onclick="@(() => Info(context))"> All info </button></li>
                                    <li class="dropdown-item"><button class="btn btn-outline-warning btn-sm" @onclick="@(() => Edit(context))"> Ändra </button></li>
                                    <li class="dropdown-item"><button class="btn btn-outline-danger btn-sm" @onclick="@(() => OpenDeleteWindow())"> Ta bort </button></li>
                                </ul>
                            </div>

                            <div class="modal @ModalClass" tabindex="-1" role="dialog" style="display:@ModalDisplay">
                                <div class="modal-dialog" role="document">
                                    <div class="modal-content">
                                        <div class="modal-header">
                                            <h5 class="modal-title"> Vill du ta bort kontaken? </h5>
                                        </div>
                                        <div class="modal-footer">
                                            <button type="button" class="btn btn-outline-danger" @onclick="@(() => Delete(context))"> Ta bort kontakt </button>
                                            <button type="button" class="btn btn-outline-secondary" data-dismiss="modal" @onclick="() => CloseWindow()"> Ångra </button>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            @if (ShowBackdrop)
                            {
                                <div class="modal-backdrop fade show"></div>
                            }

                        </TemplateColumn>
                    </QuickGrid>

                    <div class="card-footer"><Paginator State="@pagination" /></div>

                    <br />
                    <br />

                </div>
            </div>
        </div>
    </div>
</div>

<br />
<br />

<div class="footer" align="center">
    <p> Copyright 2023 - @DateTime.Now.Year</p>
</div>

<br />
<br />

@code
{
    [SupplyParameterFromForm]
    private ContactsViewModels contact { get; set; } = new();

    // Modol window settings
    public Guid Guid = Guid.NewGuid();
    public string ModalDisplay = "none;";
    public string ModalClass = "";
    public bool ShowBackdrop = false;

    // Hide button and fields
    private bool HideNewOrChangesFields { get; set; } = false;
    private bool ShowOrHideCreateButton { get; set; } = false;
    private bool ShowOrHideEditButton { get; set; } = false;
    private bool ShowOrHideAddNewContactButton { get; set; } = false;
    private bool DisabledForm { get; set; } = false;
    private bool ShowOrHideErrorMessage { get; set; } = true;

    // Text messeges
    private string ErrorMessage { get; set; } = string.Empty;

    // Show items from db
    PaginationState pagination = new PaginationState { ItemsPerPage = 10 };
    private IQueryable<ContactsViewModels> ContactsQueryable = Enumerable.Empty<ContactsViewModels>().AsQueryable();

    protected override void OnInitialized() => ConvertListToQueryable();

    private void AddOrEdit()
    {
        DisabledForm = false;

        if (contact.ContactsId > 0)
        {
            // Edit
            ErrorMessage = ContactClass.Edit(db, contact);

            if (!string.IsNullOrEmpty(ErrorMessage))
            {
                ShowOrHideErrorMessage = false;
                HideNewOrChangesFields = true;
                ShowOrHideEditButton = false;
                return;
            }
            else
            {
                contact = new();
                Navigation.Refresh(true);
                return;
            }
        }
        else
        {
            // Add
            ErrorMessage = ContactClass.Add(db, contact, false);

            if (!string.IsNullOrEmpty(ErrorMessage))
            {
                ShowOrHideErrorMessage = false;
                ShowOrHideEditButton = true;
                return;
            }
            else
            {
                contact = new();
                Navigation.Refresh(true);
                return;
            }
        }
    }

    // Load data from database to the Queryable container
    private void ConvertListToQueryable()
    {
        if (db.Contacts.Count() == 0) return;

        ContactsQueryable = Enumerable.Empty<ContactsViewModels>().AsQueryable();

        foreach (Contacts model in db.Contacts.OrderBy(c => c.ContactsId))
        {
            ContactsViewModels contact = ChangeFromModelToViewModel(model);
            ContactsQueryable = ContactsQueryable.Concat(new[] { contact }.AsQueryable());
        }

        pagination.TotalItemCountChanged += (sender, EventArgs) => StateHasChanged();
    }

    public ContactsViewModels ChangeFromModelToViewModel(Contacts model)
    {
        DateTime birthday = DateTime.Parse(model.Birthday);

        ContactsViewModels vm = new()
            {
                ContactsId = model.ContactsId,
                Name = model.Name,
                Birthday = birthday,
                Address = model.Address,
                PostCode = model.PostCode,
                PrivateMail = model.PrivateMail,
                WorkEMail = model.WorkEMail,
                ExtraMail = model.ExtraMail,
                PhoneNumber = model.PhoneNumber,
                HomePhoneNumber = model.HomePhoneNumber,
                WorkPhoneNumber = model.WorkPhoneNumber,
                ExtraPhoneNumber = model.ExtraPhoneNumber,
                City = model.City,
                HomePage = model.HomePage,
                Notes = model.Notes,
                ChristmasCard = model.ChristmasCard,
                Friends = model.Friends,
                Relatives = model.Relatives,
                Colleagues = model.Colleagues
            };

        return vm;
    }

    private void HideNewOrChangesContactForm()
    {
        HideNewOrChangesFields = !HideNewOrChangesFields;
        ShowOrHideCreateButton = true;
        ShowOrHideEditButton = true;
    }

    private void RefreshPage() => Navigation.Refresh(true);

    private void Info(ContactsViewModels incomingModel)
    {
        HideNewOrChangesContactForm();
        ShowOrHideAddNewContactButton = true;
        DisabledForm = true;
        contact = incomingModel;
    }

    private void Edit(ContactsViewModels incomingModel)
    {
        DisabledForm = false;
        ShowOrHideEditButton = false;
        ShowOrHideAddNewContactButton = true;
        HideNewOrChangesFields = true;
        contact = incomingModel;
    }

    private void Delete(ContactsViewModels vm)
    {
        if (db.ShopingLists.Count() == 0) return;

        ErrorMessage = ContactClass.Delete(db, vm, false);

        if (!string.IsNullOrEmpty(ErrorMessage))
        {
            ShowOrHideErrorMessage = false;
            return;
        }
        else
        {
            contact = new();
            Navigation.Refresh(true);
            return;
        }
    }

    private void OpenDeleteWindow()
    {
        ModalDisplay = "block;";
        ModalClass = "Show";
        ShowBackdrop = true;
        StateHasChanged();
    }

    private void CloseWindow()
    {
        ModalDisplay = "none";
        ModalClass = "";
        ShowBackdrop = false;
        StateHasChanged();
    }

    private int GetAge(DateTime birthDate) => DateTime.Now.Year - birthDate.Year;

    private int GetDaysToNextBirthday(DateTime birthDate)
    {
        DateTime date = DateTime.Now;
        DateTime birthDay = new DateTime(date.Year, birthDate.Month, birthDate.Day);

        string getDays = (birthDay - date).TotalDays.ToString();
        string result = getDays.Substring(0, getDays.LastIndexOf(','));

        if (getDays.Substring(0, 1) == "-")
        {
            DateTime firstDayOfThisYear = new DateTime(date.Year, 1, 1);
            DateTime lastDayOfThisYear = new DateTime(date.Year, 12, 31);
            double getDaysOfThisYear = (lastDayOfThisYear - firstDayOfThisYear).TotalDays;
            string getDaysOfThisYearToString = getDaysOfThisYear.ToString();
            int totalDaysOfThisYear = int.Parse(getDaysOfThisYearToString);
            result = result.Substring(1);
            int getNumber = int.Parse(result);
            int count = totalDaysOfThisYear - getNumber;
            result = count.ToString();
        }

        return int.Parse(result);
    }

    private void SetQuery(IEnumerable<Contacts> result)
    {
        ContactsQueryable = Enumerable.Empty<ContactsViewModels>().AsQueryable();

        if (result.Count() == 0) return;

        if (result.Any())
            foreach (Contacts model in result.OrderBy(c => c.ContactsId))
            {
                ContactsViewModels contact = ChangeFromModelToViewModel(model);
                ContactsQueryable = ContactsQueryable.Concat(new[] { contact }.AsQueryable());
            }
    }

    private void SearchFirstName(ChangeEventArgs e)
    {
        if (!string.IsNullOrEmpty(e.Value!.ToString()))
        {
            IEnumerable<Contacts> result = db.Contacts.Where(c => c.Name!.Contains(e.Value!.ToString()!));
            
            SetQuery(result);
            return;
        }

        Navigation.Refresh(true);
    }

    private void SearchAge(ChangeEventArgs e)
    {
        if (!string.IsNullOrEmpty(e.Value!.ToString()))
        {
            IEnumerable<Contacts> result = db.Contacts;

            ContactsQueryable = Enumerable.Empty<ContactsViewModels>().AsQueryable();

            if (result.Count() == 0) return;

            if (result.Any())
                foreach (Contacts model in result.OrderBy(c => c.ContactsId))
                {
                    ContactsViewModels contact = ChangeFromModelToViewModel(model);

                    if (e.Value.ToString() == GetAge(contact.Birthday).ToString())
                        ContactsQueryable = ContactsQueryable.Concat(new[] { contact }.AsQueryable());
                }

            return;
        }

        Navigation.Refresh(true);
    }

    private void SearchFriends(ChangeEventArgs e)
    {
        string trueOrFalse = e.Value.ToString();

        if (trueOrFalse == "True")
        {
            IEnumerable<Contacts> result = db.Contacts.Where(c => c.Friends == true);
            
            SetQuery(result);
            return;
        }

        Navigation.Refresh(true);
    }

    private void SearchChristmasCard(ChangeEventArgs e)
    {
        string trueOrFalse = e.Value.ToString();

        if (trueOrFalse == "True")
        {
            IEnumerable<Contacts> result = db.Contacts.Where(c => c.ChristmasCard == true);
            ContactsQueryable = Enumerable.Empty<ContactsViewModels>().AsQueryable();

            SetQuery(result);
            return;
        }

        Navigation.Refresh(true);
    }

    private void SearchRelatives(ChangeEventArgs e)
    {
        string trueOrFalse = e.Value.ToString();

        if (trueOrFalse == "True")
        {
            IEnumerable<Contacts> result = db.Contacts.Where(c => c.Relatives == true);
            ContactsQueryable = Enumerable.Empty<ContactsViewModels>().AsQueryable();

            SetQuery(result);
            return;
        }

        Navigation.Refresh(true);
    }

    private void SearchColleagues(ChangeEventArgs e)
    {
        string trueOrFalse = e.Value.ToString();

        if (trueOrFalse == "True")
        {
            IEnumerable<Contacts> result = db.Contacts.Where(c => c.Colleagues == true);
            
            SetQuery(result);
            return;
        }

        Navigation.Refresh(true);
    }
}