@page "/Contact"

@using Azure.Core
@using MyPrivateApp.Client.ViewModels
@using MyPrivateApp.Components.Contact.Classes
@using MyPrivateApp.Data
@using MyPrivateApp.Data.Models
@using Microsoft.AspNetCore.Components.QuickGrid
@using Microsoft.AspNetCore.Http;
@using static Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions;
@using AutoMapper;

@rendermode InteractiveServer

@inject ApplicationDbContext db
@inject NavigationManager Navigation
@inject IContactClass BackEndClass
@inject IMapper mapper

<PageTitle> Kontakter </PageTitle>

@* Header *@
<div>

    <br />

    <h1 style="text-align:center"> Kontakter </h1>

    <div style="text-align:center" hidden="@ShowOrHideCreateButton">

        <br />

        <button class="btn btn-outline-success btn-sm" @onclick="@HideNewOrChangesForm"> Ny kontakt </button>
    </div>

    <div style="text-align:center" hidden="@ShowOrHideErrorMessage">
        <br />
        <br />
        <Alert Color="AlertColor.Danger"> <Icon Name="IconName.ExclamationTriangleFill" class="me-2"></Icon> <b>@ErrorMessage</b> </Alert>
    </div>

    <br />
    <br />

</div>

@* Form and views *@
<div class="container">
    <div>
        <div class="card">

            @* Form *@
            <div class="card-header">

                <EditForm Model="pageModel" OnSubmit="AddOrEdit" FormName="CreateOrUpdateContact" Enhance hidden="@(!HideNewOrChangesFields)">

                    <DataAnnotationsValidator />

                    <ValidationSummary class="text-danger" role="alert" />

                    <div class="row">

                        <div id="mobile" class="col-4" />

                        <div class="col-4">
                            <div class="form-floating">
                                <InputText @bind-Value="pageModel.Name" class="form-control" disabled="@DisabledForm" />
                                <label for="Name"> Namn </label>
                                <ValidationMessage For="() => pageModel.Name" class="text-danger" />
                            </div>
                        </div>
                        <div class="col-4">
                            <div class="form-floating">
                                <InputDate @bind-Value="pageModel.Birthday" class="form-control" disabled="@DisabledForm" />
                                <label for="Birthday"> Födelsedag </label>
                                <ValidationMessage For="() => pageModel.Birthday" class="text-danger" />
                            </div>
                        </div>
                        <div class="col-4">
                            <div class="form-floating">
                                <InputText @bind-Value="pageModel.MarriedPartner" class="form-control" placeholder="" disabled="@DisabledForm" />
                                <label for="MarriedPartner"> Gift/sambo med </label>
                                <ValidationMessage For="() => pageModel.MarriedPartner" class="text-danger" />
                            </div>
                        </div>
                    </div>

                    <br />

                    <div class="row">

                        <div id="mobile" class="col-3" />

                        <div class="col-3">
                            <div class="form-floating">
                                <InputText @bind-Value="pageModel.ChildOne" class="form-control" disabled="@DisabledForm" />
                                <label for="ChildOne"> Barn 1 </label>
                                <ValidationMessage For="() => pageModel.ChildOne" class="text-danger" />
                            </div>
                        </div>
                        <div class="col-3">
                            <div class="form-floating">
                                <InputText @bind-Value="pageModel.ChildTwo" class="form-control" placeholder="" disabled="@DisabledForm" />
                                <label for="ChildTwo"> Barn 2 </label>
                                <ValidationMessage For="() => pageModel.ChildTwo" class="text-danger" />
                            </div>
                        </div>
                        <div class="col-3">
                            <div class="form-floating">
                                <InputText @bind-Value="pageModel.ChildThree" class="form-control" placeholder="" disabled="@DisabledForm" />
                                <label for="ChildThree"> barn 3 </label>
                                <ValidationMessage For="() => pageModel.ChildThree" class="text-danger" />
                            </div>
                        </div>
                        <div class="col-3">
                            <div class="form-floating">
                                <InputText @bind-Value="pageModel.ChildFour" class="form-control" placeholder="" disabled="@DisabledForm" />
                                <label for="ChildFour"> Barn 4 </label>
                                <ValidationMessage For="() => pageModel.ChildFour" class="text-danger" />
                            </div>
                        </div>
                    </div>

                    <br />

                    <div class="row">

                        <div id="mobile" class="col-4" />

                        <div class="col-4">
                            <div class="form-floating">
                                <InputText @bind-Value="pageModel.Address" class="form-control" placeholder="" disabled="@DisabledForm" />
                                <label for="Address"> Adress </label>
                                <ValidationMessage For="() => pageModel.Address" class="text-danger" />
                            </div>
                        </div>
                        <div class="col-4">
                            <div class="form-floating">
                                <InputNumber @bind-Value="pageModel.PostCode" class="form-control" disabled="@DisabledForm" />
                                <label for="PostCode"> Postnummer </label>
                                <ValidationMessage For="() => pageModel.PostCode" class="text-danger" />
                            </div>
                        </div>
                        <div class="col-4">
                            <div class="form-floating">
                                <InputText @bind-Value="pageModel.City" class="form-control" placeholder="" disabled="@DisabledForm" />
                                <label for="City"> Stad/ort </label>
                                <ValidationMessage For="() => pageModel.City" class="text-danger" />
                            </div>
                        </div>
                    </div>

                    <br />

                    <div class="row">

                        <div id="mobile" class="col-4" />

                        <div class="col-4">
                            <div class="form-floating">
                                <InputText @bind-Value="pageModel.PrivateMail" class="form-control" disabled="@DisabledForm" />
                                <label for="PrivateMail"> E-post </label>
                                <ValidationMessage For="() => pageModel.PrivateMail" class="text-danger" />
                            </div>
                        </div>
                        <div class="col-4">
                            <div class="form-floating">
                                <InputText @bind-Value="pageModel.WorkEMail" class="form-control" placeholder="" disabled="@DisabledForm" />
                                <label for="WorkEMail"> E-post jobb </label>
                                <ValidationMessage For="() => pageModel.WorkEMail" class="text-danger" />
                            </div>
                        </div>
                        <div class="col-4">
                            <div class="form-floating">
                                <InputText @bind-Value="pageModel.ExtraMail" class="form-control" placeholder="" disabled="@DisabledForm" />
                                <label for="ExtraMail"> E-post extra </label>
                                <ValidationMessage For="() => pageModel.ExtraMail" class="text-danger" />
                            </div>
                        </div>
                    </div>

                    <br />

                    <div class="row">

                        <div id="mobile" class="col-3" />

                        <div class="col-3">
                            <div class="form-floating">
                                <InputText @bind-Value="pageModel.PhoneNumber" class="form-control" disabled="@DisabledForm" />
                                <label for="PhoneNumber"> Mobil nummer </label>
                                <ValidationMessage For="() => pageModel.PhoneNumber" class="text-danger" />
                            </div>
                        </div>
                        <div class="col-3">
                            <div class="form-floating">
                                <InputText @bind-Value="pageModel.HomePhoneNumber" class="form-control" placeholder="" disabled="@DisabledForm" />
                                <label for="HomePhoneNumber"> Hem nummer </label>
                                <ValidationMessage For="() => pageModel.HomePhoneNumber" class="text-danger" />
                            </div>
                        </div>
                        <div class="col-3">
                            <div class="form-floating">
                                <InputText @bind-Value="pageModel.WorkPhoneNumber" class="form-control" placeholder="" disabled="@DisabledForm" />
                                <label for="WorkPhoneNumber"> Jobb nummer </label>
                                <ValidationMessage For="() => pageModel.WorkPhoneNumber" class="text-danger" />
                            </div>
                        </div>
                        <div class="col-3">
                            <div class="form-floating">
                                <InputText @bind-Value="pageModel.ExtraPhoneNumber" class="form-control" placeholder="" disabled="@DisabledForm" />
                                <label for="ExtraPhoneNumber"> Extra nummer </label>
                                <ValidationMessage For="() => pageModel.ExtraPhoneNumber" class="text-danger" />
                            </div>
                        </div>
                    </div>

                    <br />

                    <div class="row">
                        <div class="col-12">
                            <div class="form-floating">
                                <InputText @bind-Value="pageModel.HomePage" class="form-control" placeholder="" disabled="@DisabledForm" />
                                <label for="HomePage"> Hemsida </label>
                                <ValidationMessage For="() => pageModel.HomePage" class="text-danger" />
                            </div>
                        </div>
                    </div>

                    <br />

                    <div class="row-10">
                        <div class="col-12">
                            <div class="form-floating">
                                <InputTextArea rows="6" style="height:100%;" @bind-Value="pageModel.Notes" class="form-control" placeholder="" disabled="@DisabledForm" />
                                <label for="Notes"> Antecklingar </label>
                                <ValidationMessage For="() => pageModel.Notes" class="text-danger" />
                            </div>
                        </div>
                    </div>

                    <br />

                    @* View - Desktop *@
                    <div id="desktop" class="form-group" align="center">
                        <label for="ChristmasCard"> Julkort </label>
                        <InputCheckbox @bind-Value="pageModel.ChristmasCard" class="darker-border-checkbox form-check-input" disabled="@DisabledForm" />
                        <ValidationMessage For="() => pageModel.ChristmasCard" class="text-danger" />

                        &nbsp;&nbsp;

                        <label for="Relatives"> Släkt </label>
                        <InputCheckbox @bind-Value="pageModel.Relatives" class="darker-border-checkbox form-check-input" disabled="@DisabledForm" />
                        <ValidationMessage For="() => pageModel.Relatives" class="text-danger" />

                        &nbsp;&nbsp;

                        <label for="Friends"> Vänner </label>
                        <InputCheckbox @bind-Value="pageModel.Friends" class="darker-border-checkbox form-check-input" disabled="@DisabledForm" />
                        <ValidationMessage For="() => pageModel.Friends" class="text-danger" />

                        &nbsp;&nbsp;

                        <label for="Colleagues"> Kollegor </label>
                        <InputCheckbox @bind-Value="pageModel.Colleagues" class="darker-border-checkbox form-check-input" disabled="@DisabledForm" />
                        <ValidationMessage For="() => pageModel.Colleagues" class="text-danger" />
                    </div>

                    @* View - Mobile *@
                    <div id="mobile">
                        <div class="form-check">
                            <InputCheckbox id="ChristmasCard" @bind-Value="pageModel.ChristmasCard" class="form-check-input" disabled="@DisabledForm" />
                            <label class="form-check-label" for="ChristmasCard"> Julkort </label>
                            <ValidationMessage For="() => pageModel.ChristmasCard" class="text-danger" />
                        </div>

                        <div class="form-check">
                            <InputCheckbox id="Relatives" @bind-Value="pageModel.Relatives" class="form-check-input" disabled="@DisabledForm" />
                            <label class="form-check-label" for="Relatives"> Släkting </label>
                            <ValidationMessage For="() => pageModel.Relatives" class="text-danger" />
                        </div>

                        <div class="form-check">
                            <InputCheckbox id="Friends" @bind-Value="pageModel.Friends" class="form-check-input" disabled="@DisabledForm" />
                            <label class="form-check-label" for="Friends"> Vän </label>
                            <ValidationMessage For="() => pageModel.Friends" class="text-danger" />
                        </div>

                        <div class="form-check">
                            <InputCheckbox id="Colleagues" @bind-Value="pageModel.Colleagues" class="form-check-input" disabled="@DisabledForm" />
                            <label class="form-check-label" for="Colleagues"> Kollega </label>
                            <ValidationMessage For="() => pageModel.Colleagues" class="text-danger" />
                        </div>

                    </div>

                    <br />

                    <div align="center">
                        <button hidden="@ShowOrHideAddNewButton" @onclick="HideNewOrChangesForm" type="submit" align="center" class="btn btn-outline-success btn-sm"> Lägg till ny kontakt </button>
                    </div>

                    <div align="center">
                        <button @onclick="HideNewOrChangesForm" hidden="@ShowOrHideEditButton" type="submit" align="center" class="btn btn-outline-warning btn-sm"> Ändra </button>
                    </div>

                    <br />

                    <div align="center">
                        <button @onclick="RefreshPage" type="button" align="center" class="btn btn-outline-secondary btn-sm"> Tillbaka </button>
                    </div>

                    <br />
                    <br />

                </EditForm>

            </div>

            @* View - Desktop *@
            <div id="desktop">

                <br />

                <div align="center">
                    <div class="form-check-inline">
                        <label class="form-check-label">
                            Julkort <input type="checkbox" class="form-check-input" value="" id="1" bind="" @onchange="SearchChristmasCard">
                        </label>
                    </div>
                    <div class="form-check-inline">
                        <label class="form-check-label">
                            Släkt <input type="checkbox" class="form-check-input" value="" id="2" @onchange="SearchRelatives">
                        </label>
                    </div>
                    <div class="form-check-inline">
                        <label class="form-check-label">
                            Vänner <input type="checkbox" class="form-check-input" value="" id="3" @onchange="SearchFriends">
                        </label>
                    </div>
                    <div class="form-check-inline">
                        <label class="form-check-label">
                            Kollegor <input type="checkbox" class="form-check-input" value="" id="4" @onchange="SearchColleagues">
                        </label>
                    </div>
                </div>

                <br />

                <div class="card-body">
                    <QuickGrid Items="@queryable" Pagination="pagination">

                        <PropertyColumn Title="Namn" Property="@(c => c.Name)" Sortable="true">
                            <ColumnOptions>
                                <div class="search-box">
                                    <input type="search" autofocus @onchange="SearchFirstName" />
                                </div>
                            </ColumnOptions>
                        </PropertyColumn>

                        <PropertyColumn Title="Ålder" Property="@(c => GetAge(c.Birthday))" Sortable="true">
                            <ColumnOptions>
                                <div class="search-box">
                                    <input type="search" autofocus @onchange="SearchAge" />
                                </div>
                            </ColumnOptions>
                        </PropertyColumn>

                        <PropertyColumn Title="Dagar till nästa födelsedag" Property="@(c => GetDaysToNextBirthday(c.Birthday))" Sortable="true" />

                        <TemplateColumn>

                            <div class="btn-group" role="group">
                                <button id="btnGroupDrop1" type="button" class="btn btn-outline-secondary btn-sm dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">
                                    Info
                                </button>
                                <ul class="dropdown-menu" aria-labelledby="btnGroupDrop1">
                                    <li class="dropdown-item"><button class="btn btn-outline-info btn-sm" @onclick="@(() => Info(context))"> All info </button></li>
                                    <li class="dropdown-item"><button class="btn btn-outline-warning btn-sm" @onclick="@(() => Edit(context))"> Ändra </button></li>
                                    <li class="dropdown-item"><button class="btn btn-outline-danger btn-sm" @onclick="@(() => OpenDeleteWindow())"> Ta bort </button></li>
                                </ul>
                            </div>

                            <div class="modal @ModalClass" tabindex="-1" role="dialog" style="display:@ModalDisplay">
                                <div class="modal-dialog" role="document">
                                    <div class="modal-content">
                                        <div class="modal-header">
                                            <h5 class="modal-title"> Vill du ta bort kontaken? </h5>
                                        </div>
                                        <div class="modal-footer">
                                            <button type="button" class="btn btn-outline-danger" @onclick="@(() => Delete())"> Ta bort kontakt </button>
                                            <button type="button" class="btn btn-outline-secondary" data-dismiss="modal" @onclick="() => CloseWindow()"> Ångra </button>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            @if (ShowBackdrop)
                            {
                                <div class="modal-backdrop fade show"></div>
                            }

                        </TemplateColumn>
                    </QuickGrid>

                    <br />

                    <div class="card-footer"><Paginator State="@pagination" /></div>

                    <br />
                    <br />

                </div>
            </div>

            @* View - Mobile *@
            <div id="mobile">

                <br />

                <div class="row" align="center">
                    <div class="form-check-inline">

                        <label class="form-check-label">
                            Julkort <input type="checkbox" class="form-check-input" value="" id="1" bind="" @onchange="SearchChristmasCard">
                        </label>

                        &nbsp;&nbsp;

                        <label class="form-check-label">
                            Släkt <input type="checkbox" class="form-check-input" value="" id="2" @onchange="SearchRelatives">
                        </label>

                    </div>
                </div>

                <br />

                <div class="row" align="center">
                    <div class="form-check-inline">

                        <label class="form-check-label">
                            Vänner <input type="checkbox" class="form-check-input" value="" id="3" @onchange="SearchFriends">
                        </label>

                        &nbsp;&nbsp;

                        <label class="form-check-label">
                            Kollegor <input type="checkbox" class="form-check-input" value="" id="4" @onchange="SearchColleagues">
                        </label>

                    </div>
                </div>

                <div class="card-body">
                    <QuickGrid Items="@queryable" Pagination="pagination">

                        <PropertyColumn Title="Namn" Property="@(c => c.Name)" Sortable="true">
                            <ColumnOptions>
                                <div class="search-box">
                                    <input type="search" autofocus @onchange="SearchFirstName" />
                                </div>
                            </ColumnOptions>
                        </PropertyColumn>

                        <TemplateColumn>

                            <div class="btn-group" role="group">
                                <button title="Info" id="btnGroupDrop1" type="button" class="btn btn-outline-secondary btn-sm dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">
                                    Info
                                </button>
                                <ul class="dropdown-menu" aria-labelledby="btnGroupDrop1">
                                    <li class="dropdown-item"><button class="btn btn-outline-info btn-sm" @onclick="@(() => Info(context))"> All info </button></li>
                                    <li class="dropdown-item"><button class="btn btn-outline-warning btn-sm" @onclick="@(() => Edit(context))"> Ändra </button></li>
                                    <li class="dropdown-item"><button class="btn btn-outline-danger btn-sm" @onclick="@(() => OpenDeleteWindow())"> Ta bort </button></li>
                                </ul>
                            </div>

                            <div class="modal @ModalClass" tabindex="-1" role="dialog" style="display:@ModalDisplay">
                                <div class="modal-dialog" role="document">
                                    <div class="modal-content">
                                        <div class="modal-header">
                                            <h5 class="modal-title"> Vill du ta bort kontaken? </h5>
                                        </div>
                                        <div class="modal-footer">
                                            <button type="button" class="btn btn-outline-danger" @onclick="@(() => Delete())"> Ta bort kontakt </button>
                                            <button type="button" class="btn btn-outline-secondary" data-dismiss="modal" @onclick="() => CloseWindow()"> Ångra </button>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            @if (ShowBackdrop)
                            {
                                <div class="modal-backdrop fade show"></div>
                            }

                        </TemplateColumn>

                    </QuickGrid>

                    <br />
                    <br />

                </div>
            </div>

        </div>
    </div>
</div>

@* Footer *@
<div>

    <br />
    <br />

    <div class="footer" align="center">
        <p> Copyright 2023 - @DateTime.Now.Year</p>
    </div>

    <br />
    <br />

</div>

@* Back-End *@
@code
{
    [SupplyParameterFromForm]
    private ContactsViewModels pageModel { get; set; } = new();

    // Show items from db
    PaginationState pagination = new PaginationState { ItemsPerPage = 10 };
    private IQueryable<ContactsViewModels> queryable = Enumerable.Empty<ContactsViewModels>().AsQueryable();

    // Holds temporary id to delete items
    private int TemporaryId { get; set; } = 0;

    // Modol window settings
    public Guid Guid = Guid.NewGuid();
    public string ModalDisplay = "none;";
    public string ModalClass = "";
    public bool ShowBackdrop = false;

    // Hide button and fields
    private bool HideNewOrChangesFields { get; set; } = false;
    private bool ShowOrHideCreateButton { get; set; } = false;
    private bool ShowOrHideEditButton { get; set; } = false;
    private bool ShowOrHideAddNewButton { get; set; } = false;
    private bool DisabledForm { get; set; } = false;
    private bool ShowOrHideErrorMessage { get; set; } = true;

    // Text messeges
    private string ErrorMessage { get; set; } = string.Empty;

    // Load data from database to the Queryable container
    private async Task ConvertListToQueryableAsync()
    {
        List<Contacts> contacts = await db.Contacts.OrderBy(c => c.ContactsId).ToListAsync();

        if (!contacts.Any()) return;

        queryable = contacts
            .Select(model => BackEndClass.ChangeFromModelToViewModel(model))
            .AsQueryable();

        pagination.TotalItemCountChanged += (sender, EventArgs) => StateHasChanged();
    }

    protected override async Task OnInitializedAsync() => await ConvertListToQueryableAsync();

    private async Task RefreshPage() => await Task.Run(() => Navigation.Refresh(true));

    private async Task AddOrEdit()
    {
        DisabledForm = false;

        try
        {
            if (pageModel.ContactsId > 0)
            {
                // Edit
                ErrorMessage = await BackEndClass.Edit(pageModel);
            }
            else
            {
                // Add
                ErrorMessage = await BackEndClass.Add(pageModel);
            }

            if (!string.IsNullOrEmpty(ErrorMessage))
            {
                HideNewOrChangesForm();
                ShowOrHideErrorMessage = false;
                ShowOrHideEditButton = pageModel.ContactsId > 0;
                ShowOrHideAddNewButton = pageModel.ContactsId == 0;
            }
            else
            {
                pageModel = new();
                await RefreshPage();
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"An error occurred: {ex.Message}";
            ShowOrHideErrorMessage = false;
        }
    }

    private void HideNewOrChangesForm()
    {
        HideNewOrChangesFields = !HideNewOrChangesFields;
        ShowOrHideCreateButton = true;
        ShowOrHideEditButton = true;
    }

    private void Info(ContactsViewModels vm)
    {
        HideNewOrChangesForm();
        ShowOrHideAddNewButton = true;
        DisabledForm = true;
        pageModel = vm;
    }

    private void Edit(ContactsViewModels vm)
    {
        DisabledForm = false;
        ShowOrHideEditButton = false;
        ShowOrHideAddNewButton = true;
        HideNewOrChangesFields = true;
        pageModel = vm;
    }

    private async Task Delete()
    {
        if (!db.Contacts.Any()) return;

        Contacts? model = await db.Contacts.FirstOrDefaultAsync(a => a.ContactsId == TemporaryId);
        if (model == null) return;

        ContactsViewModels vm = BackEndClass.ChangeFromModelToViewModel(model);
        ErrorMessage = await BackEndClass.Delete(vm);

        if (!string.IsNullOrEmpty(ErrorMessage))
            ShowOrHideErrorMessage = false;
        else
        {
            pageModel = new();
            await RefreshPage();
        }
    }

    private void ToggleModal(ref string modalDisplay, ref string modalClass, ref bool showBackdrop, bool isOpen)
    {
        modalDisplay = isOpen ? "block;" : "none";
        modalClass = isOpen ? "Show" : "";
        showBackdrop = isOpen;
        StateHasChanged();
    }

    private void OpenDeleteWindow() => ToggleModal(ref ModalDisplay, ref ModalClass, ref ShowBackdrop, true);

    private void CloseWindow() => ToggleModal(ref ModalDisplay, ref ModalClass, ref ShowBackdrop, false);

    private int GetAge(DateTime birthDate)
    {
        int yearsOld = DateTime.Now.Year - birthDate.Year;
        DateTime date = DateTime.Now;

        if (date.Month < birthDate.Month)
            return yearsOld - 1;

        if (date.Month == birthDate.Month && date.Day <= birthDate.Day)
            return yearsOld - 1;

        return yearsOld;
    }

    private int GetDaysToNextBirthday(DateTime birthDate)
    {
        DateTime today = DateTime.Today;
        DateTime nextBirthday = new DateTime(today.Year, birthDate.Month, birthDate.Day);

        if (nextBirthday < today)
            nextBirthday = nextBirthday.AddYears(1);

        return (nextBirthday - today).Days;
    }

    private Task SetQuery(IEnumerable<Contacts> result)
    {
        if (!result.Any())
        {
            queryable = Enumerable.Empty<ContactsViewModels>().AsQueryable();
            return Task.CompletedTask;
        }

        IEnumerable<ContactsViewModels> contactList = result
            .OrderBy(c => c.ContactsId)
            .Select(model => BackEndClass.ChangeFromModelToViewModel(model))
            .ToList();

        queryable = contactList.AsQueryable();
        return Task.CompletedTask;
    }

    private async Task SearchFirstName(ChangeEventArgs e)
    {
        string? searchValue = e.Value?.ToString();

        if (!string.IsNullOrEmpty(searchValue))
        {
            IEnumerable<Contacts> result = await db.Contacts
                .Where(c => c.Name!.Contains(searchValue))
                .ToListAsync();

            await SetQuery(result);
        }
        else
            await RefreshPage();
    }

    private async Task SearchAge(ChangeEventArgs e)
    {
        string? searchValue = e.Value?.ToString();

        if (!string.IsNullOrEmpty(searchValue) && int.TryParse(searchValue, out int age))
        {
            var result = await db.Contacts.ToListAsync();
            var filteredResult = result
                .Where(c => GetAge(DateTime.Parse(c.Birthday)) == age)
                .ToList();
            await SetQuery(filteredResult);
        }
        else
            await RefreshPage();
    }

    private async Task SearchFriends(ChangeEventArgs e)
    {
        if (e.Value == null) return;

        string trueOrFalse = e.Value.ToString() ?? string.Empty;

        if (trueOrFalse == "True")
        {
            IEnumerable<Contacts> result = await db.Contacts.AsNoTracking().Where(c => c.Friends).ToListAsync();

            await SetQuery(result);

            return;
        }

        await RefreshPage();
    }

    private async Task SearchChristmasCard(ChangeEventArgs e)
    {
        if (e.Value == null) return;

        string trueOrFalse = e.Value.ToString() ?? string.Empty;

        if (trueOrFalse == "True")
        {
            IEnumerable<Contacts> result = await db.Contacts.Where(c => c.ChristmasCard).ToListAsync();

            await SetQuery(result);

            return;
        }

        await RefreshPage();
    }

    private async Task SearchRelatives(ChangeEventArgs e)
    {
        if (e.Value == null) return;

        string trueOrFalse = e.Value.ToString() ?? string.Empty;

        if (trueOrFalse == "True")
        {
            IEnumerable<Contacts> result = await db.Contacts.Where(c => c.Relatives).ToListAsync();

            await SetQuery(result);

            return;
        }

        await RefreshPage();
    }

    private async Task SearchColleagues(ChangeEventArgs e)
    {
        if (e.Value == null) return;

        string trueOrFalse = e.Value.ToString() ?? string.Empty;

        if (trueOrFalse == "True")
        {
            IEnumerable<Contacts> result = await db.Contacts.Where(c => c.Colleagues).ToListAsync();

            await SetQuery(result);
            return;
        }

        await RefreshPage();
    }
}