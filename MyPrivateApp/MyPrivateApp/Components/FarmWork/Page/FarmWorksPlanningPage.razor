@page "/FarmWorksPlanningPage"

@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using MyPrivateApp.Client.ViewModels
@using MyPrivateApp.Components.Enum
@using MyPrivateApp.Components.FarmWork.Classes
@using MyPrivateApp.Components.ViewModels
@using MyPrivateApp.Components.ViewModels.FarmWork
@using MyPrivateApp.Data
@using MyPrivateApp.Data.Models
@using MyPrivateApp.Data.Models.FarmWork
@using static Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions;

@rendermode @(new InteractiveServerRenderMode(prerender:false))

@inject NavigationManager Navigation
@inject IFarmWorksPlanningClass BackEndClass
@inject IDbContextFactory<ApplicationDbContext> IDbContextFactory

<PageTitle> Gårdsarbeten </PageTitle>

@try
{
    @* Header *@
    <div>

        <br />

        @* Navigation - Desktop *@
        <div id="desktop" align="center">
            <div class="btn-group" role="group" aria-label="Desktop Navigation">
                @foreach (var page in navList)
                {
                    <NavLink href=@(page.Href) type="button" class="btn btn-outline-dark btn-sm" aria-label="@(page.Text)"> @(page.Text) </NavLink>
                }
            </div>
        </div>

        @* Navigation - Mobile *@
        <div id="mobile">
            <div class="btn-group" role="group">
                <button title="Info" id="btnGroupDrop1" type="button" class="btn btn-outline-secondary btn-sm dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false" aria-haspopup="true">
                    Alla jakt sidor
                </button>
                <ul class="dropdown-menu" aria-labelledby="btnGroupDrop1">
                    @foreach (var page in navList)
                    {
                        <li class="dropdown-item">
                            <NavLink href=@(page.Href) type="button" class="btn btn-outline-dark btn-sm">@(page.Text)</NavLink>
                        </li>
                    }
                </ul>
            </div>
        </div>

        <br /> <br />

        <h1 align="center"> Skogsplaneringen </h1>

        <br />

        @if (ShowOrHideCreateButton)
        {
            <br />

            <div align="center">
                <button class="btn btn-outline-success btn-sm" @onclick="@ShowAddForm"> Ny skogsplanering </button>
            </div>

            <br />
        }

        @if (ShowOrHideErrorMessage)
        {
            <br />

            <div align="center">
                <Alert Color="AlertColor.Danger">
                    <Icon Name="IconName.ExclamationTriangleFill" class="me-2"></Icon>
                    <b>@ErrorMessage</b>
                </Alert>
            </div>
        }

        @if (ShowOrHideInfoMessage)
        {
            <br />

            <div align="center">
                <Alert Color="AlertColor.Info">
                    <b>@InfoMessage</b>
                </Alert>
            </div>
        }

        <br />

    </div>

    @* Form and views *@
    <div class="container">
        <div class="col-md-12">
            <div class="card">

                @* Form *@
                <div>
                    @if (ShowOrHideAddOrEditForm)
                    {
                        <div class="card-header">

                            <EditForm Model="pageViewModel" OnSubmit="AddOrEdit" Enhance>

                                <div class="row">

                                    <div id="mobile" class="col-4" />

                                    <div class="col-4">
                                        <div class="form-floating">
                                            <InputDate @bind-Value="pageViewModel.Date" class="form-control" disabled="@DisabledForm" />
                                            <label for="Date"> Datum </label>
                                        </div>
                                    </div>

                                    <div class="col-4">
                                        <div class="form-floating">
                                            <InputSelect @bind-Value="pageViewModel.Place" class="form-control" placeholder="" disabled="@DisabledForm">
                                                @foreach (object place in Enum.GetValues(typeof(FarmWorkPlaces)))
                                                {
                                                    <option value="@place">@place</option>
                                                }
                                            </InputSelect>
                                            <label for="wildAnimal"> Plats </label>
                                        </div>
                                    </div>

                                    <div class="col-4">
                                        <div class="form-floating">
                                            <InputText @bind-Value="pageViewModel.Area" class="form-control" disabled="@DisabledForm" />
                                            <label for="Date"> Område </label>
                                        </div>
                                    </div>

                                </div>

                                <br />

                                <div class="row">

                                    <div class="col-5">
                                        <div class="form-floating">
                                            <InputSelect @bind-Value="pageViewModel.Prioritize" class="form-control" placeholder="" disabled="@DisabledForm">
                                                @foreach (object formWorkTodo in Enum.GetValues(typeof(FormWorkTodo)))
                                                {
                                                    <option value="@formWorkTodo">@formWorkTodo</option>
                                                }
                                            </InputSelect>
                                            <label for="formWorkTodo"> Att göra </label>
                                        </div>
                                    </div>

                                    <div class="col-5">
                                        <div class="form-floating">
                                            <InputSelect @bind-Value="pageViewModel.Prioritize" class="form-control" placeholder="" disabled="@DisabledForm">
                                                @foreach (object prioritize in Enum.GetValues(typeof(Prioritize)))
                                                {
                                                    <option value="@prioritize">@prioritize</option>
                                                }
                                            </InputSelect>
                                            <label for="prioritize"> Prioritera </label>
                                        </div>
                                    </div>

                                </div>

                                <br />

                                <div class="row">
                                    <div class="col-12">
                                        <div class="form-floating">
                                            <InputTextArea rows="10" style="height:100%;" @bind-Value="pageViewModel.Notes" class="form-control" disabled="@DisabledForm" />
                                            <label for="Notes"> Anteckningar </label>
                                        </div>
                                    </div>
                                </div>

                                <br />

                                @if (ShowOrHideAddNewButton)
                                {
                                    <div align="center">
                                        <button type="submit" align="center" class="btn btn-outline-success btn-sm"> Lägg till ny planering </button>
                                    </div>
                                }

                                @if (ShowOrHideEditButton)
                                {
                                    <div align="center">
                                        <button type="submit" align="center" class="btn btn-outline-warning btn-sm"> Ändra </button>
                                    </div>
                                }

                                <br />

                                <div align="center">
                                    <button @onclick="RefreshPage" type="button" align="center" class="btn btn-outline-secondary btn-sm"> Tillbaka </button>
                                </div>

                                <br /> <br />

                            </EditForm>
                        </div>
                    }
                </div>

                @* View - Desktop *@
                <div id="desktop">

                    <br />


                    <div class="card-body">
                        <QuickGrid Items="@queryable" Pagination="pagination">

                            <PropertyColumn Format="yyyy-MM-dd" Title="Datum" Property="@(c => c.Date)" Sortable="true" />

                            <PropertyColumn Title="Plats" Property="@(c => c.Place)" Sortable="true">
                                <ColumnOptions>
                                    <div class="search-box">
                                        <input type="search" autofocus @onchange="SearchPlace" />
                                    </div>
                                </ColumnOptions>
                            </PropertyColumn>

                            <PropertyColumn Title="Område" Property="@(c => c.Area)" Sortable="true" />
                            <PropertyColumn Title="Att göra" Property="@(c => c.FormWorkTodo)" Sortable="true" />
                            <PropertyColumn Title="Prioritera" Property="@(c => c.Prioritize)" Sortable="true" />
                            <PropertyColumn Title="Anteckningar" Property="@(c => c.Notes)" Sortable="true" />

                            <TemplateColumn Title="Info">

                                <div class="btn-group" role="group">
                                    <button title="Info" id="btnGroupDrop1" type="button" class="btn btn-outline-secondary btn-sm dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">
                                        Info
                                    </button>
                                    <ul class="dropdown-menu" aria-labelledby="btnGroupDrop1">
                                        <li class="dropdown-item"><button class="btn btn-outline-info btn-sm" @onclick="@(() => Info(context))"> All info </button></li>
                                        <li class="dropdown-item"><button class="btn btn-outline-warning btn-sm" @onclick="@(() => Edit(context))"> Ändra </button></li>
                                        <li class="dropdown-item"><button class="btn btn-outline-danger btn-sm" @onclick="@(() => OpenDeleteWindow(context))"> Ta bort </button></li>
                                    </ul>
                                </div>

                                <div class="modal @ModalClass" tabindex="-1" role="dialog" style="display:@ModalDisplay">
                                    <div class="modal-dialog" role="document">
                                        <div class="modal-content">
                                            <div class="modal-header">
                                                <h5 class="modal-title"> Vill du ta bort skogsplaneringen? </h5>
                                            </div>
                                            <div class="modal-footer">
                                                <button type="button" class="btn btn-outline-danger" @onclick="@(() => Delete())"> Ta bort skogsplaneringen </button>
                                                <button type="button" class="btn btn-outline-secondary" data-dismiss="modal" @onclick="() => CloseWindow()"> Ångra </button>
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                @if (ShowBackdrop)
                                {
                                    <div class="modal-backdrop fade show"></div>
                                }

                            </TemplateColumn>
                        </QuickGrid>

                        <div class="card-footer"><Paginator State="@pagination" /></div>

                        <br /> <br />

                    </div>
                </div>

                @* View - Mobile *@
                <div id="mobile">

                    <br />

                    <div class="card-body">
                        <QuickGrid Items="@queryable" Pagination="pagination">

                            <PropertyColumn Title="Plats" Property="@(c => c.Place)" Sortable="true">
                                <ColumnOptions>
                                    <div class="search-box">
                                        <input type="search" autofocus @onchange="SearchPlace" />
                                    </div>
                                </ColumnOptions>
                            </PropertyColumn>

                            <PropertyColumn Title="Område" Property="@(c => c.Area)" Sortable="true" />

                            <TemplateColumn Title="Info">

                                <div class="btn-group" role="group">
                                    <button title="Info" id="btnGroupDrop1" type="button" class="btn btn-outline-secondary btn-sm dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">
                                        Info
                                    </button>
                                    <ul class="dropdown-menu" aria-labelledby="btnGroupDrop1">
                                        <li class="dropdown-item"><button class="btn btn-outline-info btn-sm" @onclick="@(() => Info(context))"> All info </button></li>
                                        <li class="dropdown-item"><button class="btn btn-outline-warning btn-sm" @onclick="@(() => Edit(context))"> Ändra </button></li>
                                        <li class="dropdown-item"><button class="btn btn-outline-danger btn-sm" @onclick="@(() => OpenDeleteWindow(context))"> Ta bort </button></li>
                                    </ul>
                                </div>

                                <div class="modal @ModalClass" tabindex="-1" role="dialog" style="display:@ModalDisplay">
                                    <div class="modal-dialog" role="document">
                                        <div class="modal-content">
                                            <div class="modal-header">
                                                <h5 class="modal-title"> Vill du ta bort skogsplaneringen? </h5>
                                            </div>
                                            <div class="modal-footer">
                                                <button type="button" class="btn btn-outline-danger" @onclick="@(() => Delete())"> Ta bort skogsplaneringen </button>
                                                <button type="button" class="btn btn-outline-secondary" data-dismiss="modal" @onclick="() => CloseWindow()"> Ångra </button>
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                @if (ShowBackdrop)
                                {
                                    <div class="modal-backdrop fade show"></div>
                                }

                            </TemplateColumn>
                        </QuickGrid>

                        <br /> <br />

                    </div>
                </div>

            </div>
        </div>
    </div>

    @* Footer *@
    <div>

        <br /> <br />

        <div class="footer" align="center">
            <p> Copyright 2023 - @DateTime.Now.Year</p>
        </div>

        <br /> <br />

    </div>

}
catch (Exception ex)
{
    ShowErrorMessage($"Övergripande felmeddelande: {ex.Message}");
}

@* Back-End *@
@code
{
    [SupplyParameterFromForm]
    private FarmWorksPlanningViewModels pageViewModel { get; set; } = new();

    PaginationState pagination = new PaginationState { ItemsPerPage = 30 };
    private IQueryable<FarmWorksPlanningViewModels> queryable = Enumerable.Empty<FarmWorksPlanningViewModels>().AsQueryable();

    // Holds temporary id to delete items
    private int TemporaryId { get; set; } = 0;

    // Modol window settings Delete
    public Guid Guid = Guid.NewGuid();
    public string ModalDisplay = "none;";
    public string ModalClass = "";
    public bool ShowBackdrop = false;

    // Modol window settings Salary
    public Guid GuidSalary = Guid.NewGuid();
    public string ModalDisplaySalary = "none;";
    public string ModalClassSalary = "";
    public bool ShowBackdropSalary = false;

    // Hide button and fields
    private bool ShowOrHideAddOrEditForm { get; set; } = false;
    private bool ShowOrHideCreateButton { get; set; } = true;
    private bool ShowOrHideEditButton { get; set; } = false;
    private bool ShowOrHideAddNewButton { get; set; } = false;
    private bool DisabledForm { get; set; } = false;

    // Error text messeges
    private bool ShowOrHideErrorMessage { get; set; } = false;
    private string ErrorMessage { get; set; } = string.Empty;
    private string InfoMessage { get; set; } = string.Empty;
    private bool ShowOrHideInfoMessage { get; set; } = false;

    private void ShowErrorMessage(string errorMessage)
    {
        ErrorMessage = errorMessage;
        ShowOrHideErrorMessage = true;
    }

    // Navigation list
    private readonly (string Href, string Text)[] navList = new[]
    {
        ("FarmWorksStartPage", "Start"),
        ("FarmWorkPage", "Arbetsrapporten"),
        ("FarmWorksPlanningPage", "Skogsplanneringen")
    };

    // Load data from database to the Queryable container
    private async Task ConvertListToQueryableAsync()
    {
        try
        {
            await using ApplicationDbContext db = await IDbContextFactory.CreateDbContextAsync() ?? throw new Exception("ConvertListToQueryableAsync: db == null!");

            List<FarmWorksPlanning> items = await db.FarmWorksPlanning.OrderByDescending(c => c.Date).ToListAsync();

            if (!items.Any())
            {
                InfoMessage = "Finns ingen data att visa!";
                ShowOrHideInfoMessage = true;
                return;
            }

            queryable = items
                .Select(model => BackEndClass.ChangeFromModelToViewModel(model))
                .AsQueryable();

            pagination.TotalItemCountChanged += (sender, EventArgs) => StateHasChanged();
        }
        catch (Exception ex)
        {
            ShowErrorMessage($"ConvertListToQueryableAsync. Felmeddelande: {ex.Message}");
        }
    }

    protected override async Task OnInitializedAsync() => await ConvertListToQueryableAsync();

    private async Task RefreshPage() => await Task.Run(() => Navigation.Refresh(true));

    private void ShowAddForm()
    {
        ShowOrHideAddOrEditForm = true;
        ShowOrHideAddNewButton = true;
    }

    private async Task AddOrEdit()
    {
        DisabledForm = false;

        try
        {
            if (pageViewModel.FarmWorksId > 0)
            {
                ErrorMessage = await BackEndClass.Edit(pageViewModel);
                ShowOrHideEditButton = true;
            }
            else
            {
                ErrorMessage = await BackEndClass.Add(pageViewModel);
                ShowOrHideAddNewButton = true;
            }

            if (!string.IsNullOrEmpty(ErrorMessage))
            {
                ShowOrHideAddOrEditForm = true;
                ShowOrHideErrorMessage = true;
                return;
            }
            else
            {
                pageViewModel = new();
                await RefreshPage();
            }
        }
        catch (Exception ex)
        {
            ShowErrorMessage($"Lägg till eller ändra. Felmeddelande: {ex.Message}");
        }
    }

    private void Info(FarmWorksPlanningViewModels vm)
    {
        ShowOrHideAddOrEditForm = !ShowOrHideAddOrEditForm;
        ShowOrHideCreateButton = false;
        ShowOrHideEditButton = false;
        ShowOrHideAddNewButton = false;
        DisabledForm = true;
        pageViewModel = vm;
    }

    private void Edit(FarmWorksPlanningViewModels vm)
    {
        if (vm.FarmWorksId == 0)
        {
            ShowErrorMessage($"Går inte att ändra skogsplaneringen. ID = {vm.FarmWorksId}!");
            return;
        }

        DisabledForm = false;
        ShowOrHideEditButton = true;
        ShowOrHideAddNewButton = false;
        ShowOrHideCreateButton = false;
        ShowOrHideAddOrEditForm = true;
        pageViewModel = vm;
    }

    private async Task Delete()
    {
        try
        {
            await using ApplicationDbContext db = await IDbContextFactory.CreateDbContextAsync() ?? throw new Exception("Delete: db == null!");

            if (!db.FarmWorks.Any())
            {
                ShowErrorMessage("Gick inte att ta bort skogsplaneringen, databasen är tom!");
                return;
            }

            FarmWorksPlanning? model = await db.FarmWorksPlanning.FirstOrDefaultAsync(a => a.FarmWorksId == TemporaryId);

            if (model == null)
            {
                ShowErrorMessage($"Går inte att ta bort skogsplaneringen. (TemporaryId = {TemporaryId})!");
                return;
            }

            ErrorMessage = await BackEndClass.Delete(model);

            if (!string.IsNullOrEmpty(ErrorMessage))
                ShowOrHideErrorMessage = true;
            else
            {
                pageViewModel = new();
                await RefreshPage();
            }
        }
        catch (Exception ex)
        {
            ShowErrorMessage($"Ta bort. Felmeddelande: {ex.Message}");
        }
    }

    private void ToggleModal(ref string modalDisplay, ref string modalClass, ref bool showBackdrop, bool isOpen)
    {
        modalDisplay = isOpen ? "block;" : "none";
        modalClass = isOpen ? "Show" : "";
        showBackdrop = isOpen;
        StateHasChanged();
    }

    private void OpenDeleteWindow(FarmWorksPlanningViewModels vm)
    {
        TemporaryId = vm.FarmWorksId;
        ToggleModal(ref ModalDisplay, ref ModalClass, ref ShowBackdrop, true);
    }

    private void CloseWindow() => ToggleModal(ref ModalDisplay, ref ModalClass, ref ShowBackdrop, false);

    private void OpenDeleteWindowSalary(FarmWorksPlanningViewModels vm)
    {
        TemporaryId = vm.FarmWorksId;
        ToggleModal(ref ModalDisplaySalary, ref ModalClassSalary, ref ShowBackdropSalary, true);
    }

    private void CloseWindowSalary() => ToggleModal(ref ModalDisplaySalary, ref ModalClassSalary, ref ShowBackdropSalary, false);

    private async Task SearchPlace(ChangeEventArgs e)
    {
        try
        {
            await using ApplicationDbContext db = await IDbContextFactory.CreateDbContextAsync() ?? throw new Exception("SearchPlace: db == null!");

            queryable = Enumerable.Empty<FarmWorksPlanningViewModels>().AsQueryable();
            string? placeName = e.Value?.ToString()?.ToLowerInvariant();

            if (string.IsNullOrEmpty(placeName))
            {
                await RefreshPage();
                return;
            }

            var placeMapping = new Dictionary<string, FarmWorkPlaces>(StringComparer.OrdinalIgnoreCase)
            {
                { "habäck", FarmWorkPlaces.Habäck },
                { "karlabo", FarmWorkPlaces.Karlabo },
                { "klev", FarmWorkPlaces.Klev },
                { "skog", FarmWorkPlaces.Skog },
                { "smältryd", FarmWorkPlaces.Smältryd },
                { "övrigt", FarmWorkPlaces.Övrigt }
            };

            if (placeMapping.TryGetValue(placeName, out var place))
            {
                var result = db.FarmWorksPlanning.Where(c => c.Place == place);

                if (result.Any())
                {
                    queryable = result
                        .OrderBy(c => c.Date)
                        .Select(model => BackEndClass.ChangeFromModelToViewModel(model))
                        .AsQueryable();
                }
            }
        }
        catch (Exception ex)
        {
            ShowErrorMessage($"Sök plsats. Felmeddelande: {ex.Message}");
        }
    }
}