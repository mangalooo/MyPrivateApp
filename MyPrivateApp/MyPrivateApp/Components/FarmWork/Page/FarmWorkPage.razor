@page "/FarmWorkPage"

@using MyPrivateApp.Client.ViewModels
@using MyPrivateApp.Components.Enum
@using MyPrivateApp.Components.FarmWork.Classes
@using MyPrivateApp.Components.ViewModels
@using MyPrivateApp.Data
@using MyPrivateApp.Data.Models
@using Microsoft.AspNetCore.Components.QuickGrid

@rendermode InteractiveServer

@inject ApplicationDbContext db;
@inject NavigationManager Navigation
@inject IFarmWorkClass FarmWorkClass

<PageTitle> Gårdsarbete </PageTitle>

@* Header *@
<div>

    <br />

    <h1 style="text-align:center"> Gårdsarbete </h1>

    <br />

    <h3 style="text-align:center"> Nästa lön: @GetNextSalary()</h3>

    <div style="text-align:center" hidden="@ShowOrHideCreateButton">

        <br />
        <br />

        <button class="btn btn-outline-success btn-sm" @onclick="@HideNewOrChangesForm"> Nytt gårdsarbete </button>
    </div>

    <div style="text-align:center" hidden="@ShowOrHideErrorMessage">
        <br />
        <br />
        <Alert Color="AlertColor.Danger"> <Icon Name="IconName.ExclamationTriangleFill" class="me-2"></Icon> <b>@ErrorMessage</b> </Alert>
    </div>

    <br />
    <br />

</div>

<div class="container">
    <div class="col-md-12">
        <div class="card">

            @* Form *@
            <div class="card-header">
                <EditForm Model="FarmWork" OnSubmit="AddOrEdit" FormName="AddOrUpdateFarmWork" Enhance hidden="@(!HideNewOrChangesFields)">

                     <DataAnnotationsValidator />

                     <ValidationSummary class="text-danger" role="alert" />

                     <div class="row">

                        <div id="mobile" class="col-4" />

                        <div class="col-4">
                            <div class="form-floating">
                                <InputDate @bind-Value="FarmWork.Date" class="form-control" disabled="@DisabledForm" />
                                <label for="Date"> Datum </label>
                                <ValidationMessage For="() => FarmWork.Date" class="text-danger" />
                            </div>
                        </div>

                         <div class="col-4">
                             <div class="form-floating">
                                <InputSelect @bind-Value="FarmWork.Place" class="form-control" placeholder="" disabled="@DisabledForm">
                                    @foreach (object place in Enum.GetValues(typeof(FarmWorkPlaces)))
                                    {
                                        <option value="@place">@place</option>
                                    }
                                </InputSelect>
                                <label for="wildAnimal"> Plats </label>
                                <ValidationMessage For="() => FarmWork.Place" class="text-danger" />
                            </div>
                        </div>
                        <div class="col-4">
                            <div class="form-floating">
                                <InputNumber @bind-Value="FarmWork.Hours" class="form-control" placeholder="" disabled="@DisabledForm" />
                                <label for="Hours"> Timmar </label>
                                <ValidationMessage For="() => FarmWork.Hours" class="text-danger" />
                            </div>
                        </div>
                    </div>

                    <br />

                    <div class="row">
                        <div class="col-12">
                            <div class="form-floating">
                                <InputTextArea rows="10" style="height:100%;" @bind-Value="FarmWork.Note" class="form-control" disabled="@DisabledForm" />
                                <label for="Note"> Beskrivning </label>
                                <ValidationMessage For="() => FarmWork.Note" class="text-danger" />
                            </div>
                        </div>
                    </div>

                    <br />

                    @* Desktop screen *@
                    <div id="desktop" class="form-group" align="center">
                        <label for="NextSalary"> Nästa lön? </label>
                        <InputCheckbox @bind-Value="FarmWork.NextSalary" class="darker-border-checkbox form-check-input" disabled="@DisabledForm" />
                        <ValidationMessage For="() => FarmWork.NextSalary" class="text-danger" />
                    </div>

                    @* Mobile screen *@
                    <div id="mobile">
                        <div class="form-check">
                            <InputCheckbox id="NextSalary" @bind-Value="FarmWork.NextSalary" class="form-check-input" disabled="@DisabledForm" />
                            <label class="form-check-label" for="NextSalary"> Fått lön? </label>
                            <ValidationMessage For="() => FarmWork.NextSalary" class="text-danger" />
                        </div>
                    </div>

                    <br />

                    <div style="text-align:center">
                        <button hidden="@ShowOrHideAddNewButton" @onclick="HideNewOrChangesForm" type="submit" style="text-align:center" class="btn btn-outline-success btn-sm"> Lägg till nytt gårdsarbete </button>
                    </div>

                    <div style="text-align:center">
                        <button @onclick="HideNewOrChangesForm" hidden="@ShowOrHideEditButton" type="submit" style="text-align:center" class="btn btn-outline-warning btn-sm"> Ändra </button>
                    </div>

                    <br />

                    <div style="text-align:center">
                        <button @onclick="RefreshPage" type="button" style="text-align:center" class="btn btn-outline-secondary btn-sm"> Tillbaka </button>
                    </div>

                    <br />
                    <br />
                </EditForm>
            </div>

            @* Desktop screen *@
            <div id="desktop">

                <br />

                <div align="center">
                    <div class="form-check-inline">
                        <label class="form-check-label">
                            Nästa lön <input type="checkbox" class="form-check-input" value="" id="1" bind="" @onchange="SearchNextSalary">
                        </label>
                    </div>
                </div>

                <br />

                <div class="card-body">
                    <QuickGrid Items="@FarmWorkQueryable" Pagination="pagination">

                        <PropertyColumn Format="yyyy-MM-dd" Title="Datum" Property="@(c => c.Date)" Sortable="true" />

                        <PropertyColumn Title="Plats" Property="@(c => c.Place)" Sortable="true">
                            <ColumnOptions>
                                <div class="search-box">
                                    <input type="search" autofocus @onchange="SearchPlace" />
                                </div>
                            </ColumnOptions>
                        </PropertyColumn>

                        <PropertyColumn Title="Timmar" Property="@(c => c.Hours)" Sortable="true" />

                        <PropertyColumn Title="Beskrivning" Property="@(c => c.Note)" Sortable="true" />

                        <TemplateColumn Title="Info">

                            <div class="btn-group" role="group">
                                <button title="Info" id="btnGroupDrop1" type="button" class="btn btn-outline-secondary btn-sm dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">
                                    Info
                                </button>
                                <ul class="dropdown-menu" aria-labelledby="btnGroupDrop1">
                                    <li class="dropdown-item"><button class="btn btn-outline-info btn-sm" @onclick="@(() => Info(context))"> All info </button></li>
                                    <li class="dropdown-item"><button class="btn btn-outline-warning btn-sm" @onclick="@(() => Edit(context))"> Ändra </button></li>
                                    <li class="dropdown-item"><button class="btn btn-outline-danger btn-sm" @onclick="@(() => OpenDeleteWindow())"> Ta bort </button></li>
                                </ul>
                            </div>

                            <div class="modal @ModalClass" tabindex="-1" role="dialog" style="display:@ModalDisplay">
                                <div class="modal-dialog" role="document">
                                    <div class="modal-content">
                                        <div class="modal-header">
                                            <h5 class="modal-title"> Vill du ta bort gårdsarbetet? </h5>
                                        </div>
                                        <div class="modal-footer">
                                            <button type="button" class="btn btn-outline-danger" @onclick="@(() => Delete(context))"> Ta bort gårdsarbetet </button>
                                            <button type="button" class="btn btn-outline-secondary" data-dismiss="modal" @onclick="() => CloseWindow()"> Ångra </button>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            @if (ShowBackdrop)
                            {
                                <div class="modal-backdrop fade show"></div>
                            }

                        </TemplateColumn>
                    </QuickGrid>

                    <div class="card-footer"><Paginator State="@pagination" /></div>

                    <br />
                    <br />

                </div>
            </div>

            @* Mobile streen *@
            <div id="mobile">

                <br />

                <div class="row" align="center">
                    <div class="form-check-inline">

                        <label class="form-check-label">
                            Nästa lön <input type="checkbox" class="form-check-input" value="" id="1" bind="" @onchange="SearchNextSalary">
                        </label>

                    </div>
                </div>

                <br />

                <div class="card-body">
                    <QuickGrid Items="@FarmWorkQueryable" Pagination="pagination">

                        <PropertyColumn Title="Plats" Property="@(c => c.Place)" Sortable="true">
                            <ColumnOptions>
                                <div class="search-box">
                                    <input type="search" autofocus @onchange="SearchPlace" />
                                </div>
                            </ColumnOptions>
                        </PropertyColumn>

                        <PropertyColumn Title="Timmar" Property="@(c => c.Hours)" Sortable="true" />

                        <TemplateColumn Title="Info">

                            <div class="btn-group" role="group">
                                <button title="Info" id="btnGroupDrop1" type="button" class="btn btn-outline-secondary btn-sm dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">
                                    Info
                                </button>
                                <ul class="dropdown-menu" aria-labelledby="btnGroupDrop1">
                                    <li class="dropdown-item"><button class="btn btn-outline-info btn-sm" @onclick="@(() => Info(context))"> All info </button></li>
                                    <li class="dropdown-item"><button class="btn btn-outline-warning btn-sm" @onclick="@(() => Edit(context))"> Ändra </button></li>
                                    <li class="dropdown-item"><button class="btn btn-outline-danger btn-sm" @onclick="@(() => OpenDeleteWindow())"> Ta bort </button></li>
                                </ul>
                            </div>

                            <div class="modal @ModalClass" tabindex="-1" role="dialog" style="display:@ModalDisplay">
                                <div class="modal-dialog" role="document">
                                    <div class="modal-content">
                                        <div class="modal-header">
                                            <h5 class="modal-title"> Vill du ta bort gårdsarbetet? </h5>
                                        </div>
                                        <div class="modal-footer">
                                            <button type="button" class="btn btn-outline-danger" @onclick="@(() => Delete(context))"> Ta bort gårdsarbetet </button>
                                            <button type="button" class="btn btn-outline-secondary" data-dismiss="modal" @onclick="() => CloseWindow()"> Ångra </button>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            @if (ShowBackdrop)
                            {
                                <div class="modal-backdrop fade show"></div>
                            }

                        </TemplateColumn>
                    </QuickGrid>

                    <br />
                    <br />

                </div>
            </div>

        </div>
    </div>

    <br />

    <button class="btn btn-outline-danger btn-sm" @onclick="@RemoveNextSalary"> Ta bort nästa lön </button>

</div>

<br />
<br />

<div class="footer" align="center">
    <p> Copyright 2023 - @DateTime.Now.Year</p>
</div>

<br />
<br />

@code
{
    [SupplyParameterFromForm]
    private FarmWorksViewModels FarmWork { get; set; } = new();

    // Modol window settings
    public Guid Guid = Guid.NewGuid();
    public string ModalDisplay = "none;";
    public string ModalClass = "";
    public bool ShowBackdrop = false;

    // Hide button and fields
    private bool HideNewOrChangesFields { get; set; } = false;
    private bool ShowOrHideCreateButton { get; set; } = false;
    private bool ShowOrHideEditButton { get; set; } = false;
    private bool ShowOrHideAddNewButton { get; set; } = false;
    private bool DisabledForm { get; set; } = false;
    private bool ShowOrHideErrorMessage { get; set; } = true;

    // Text messeges
    private string ErrorMessage { get; set; } = string.Empty;

    PaginationState pagination = new PaginationState { ItemsPerPage = 20 };
    private IQueryable<FarmWorksViewModels> FarmWorkQueryable = Enumerable.Empty<FarmWorksViewModels>().AsQueryable();

    // Load data from database to the Queryable container
    private void ConvertListToQueryable()
    {
        if (db.FarmWorks.Count() == 0) return;

        FarmWorkQueryable = Enumerable.Empty<FarmWorksViewModels>().AsQueryable();

        foreach (Data.Models.FarmWorks model in db.FarmWorks.OrderBy(c => c.FarmWorksId))
        {
            FarmWorksViewModels farmWork = FarmWorkClass.ChangeFromModelToViewModel(model);
            FarmWorkQueryable = FarmWorkQueryable.Concat((new[] { farmWork }).AsQueryable());
        }

        pagination.TotalItemCountChanged += (sender, EventArgs) => StateHasChanged();

        GetNextSalary();
    }

    protected override void OnInitialized() => ConvertListToQueryable();

    private void HideNewOrChangesForm()
    {
        HideNewOrChangesFields = !HideNewOrChangesFields;
        ShowOrHideCreateButton = true;
        ShowOrHideEditButton = true;
    }

    private void RefreshPage() => Navigation.Refresh(true);

    private void AddOrEdit()
    {
        DisabledForm = false;

        if (FarmWork.FarmWorksId > 0)
        {
            // Edit
            ErrorMessage = FarmWorkClass.Edit(db, FarmWork);

            if (!string.IsNullOrEmpty(ErrorMessage))
            {
                HideNewOrChangesForm();
                ShowOrHideErrorMessage = false;
                ShowOrHideEditButton = false;
                return;
            }
            else
            {
                FarmWork = new();
                Navigation.Refresh(true);
                return;
            }
        }
        else
        {
            // Add
            ErrorMessage = FarmWorkClass.Add(db, FarmWork, false);

            if (!string.IsNullOrEmpty(ErrorMessage))
            {
                HideNewOrChangesForm();
                ShowOrHideErrorMessage = false;
                ShowOrHideEditButton = true;
                ShowOrHideAddNewButton = false;
                return;
            }
            else
            {
                FarmWork = new();
                Navigation.Refresh(true);
                return;
            }
        }
    }

    private void Info(FarmWorksViewModels vm)
    {
        HideNewOrChangesForm();
        ShowOrHideAddNewButton = true;
        DisabledForm = true;
        FarmWork = vm;
    }

    private void Edit(FarmWorksViewModels vm)
    {
        DisabledForm = false;
        ShowOrHideEditButton = false;
        ShowOrHideAddNewButton = true;
        ShowOrHideCreateButton = true;
        HideNewOrChangesFields = true;
        FarmWork = vm;
    }

    private void Delete(FarmWorksViewModels vm)
    {
        if (db.FarmWorks.Count() == 0) return;

        ErrorMessage = FarmWorkClass.Delete(db, vm, false);

        if (!string.IsNullOrEmpty(ErrorMessage))
        {
            ShowOrHideErrorMessage = false;
            return;
        }
        else
        {
            FarmWork = new();
            Navigation.Refresh(true);
            return;
        }
    }

    private void OpenDeleteWindow()
    {
        ModalDisplay = "block;";
        ModalClass = "Show";
        ShowBackdrop = true;
        StateHasChanged();
    }

    private void CloseWindow()
    {
        ModalDisplay = "none";
        ModalClass = "";
        ShowBackdrop = false;
        StateHasChanged();
    }

    private void SearchPlace(ChangeEventArgs e)
    {
        FarmWorkQueryable = Enumerable.Empty<FarmWorksViewModels>().AsQueryable();

        if (!string.IsNullOrEmpty(e.Value!.ToString()))
        {
            string getName = string.Empty;

            foreach (int huntingPlaces in Enum.GetValues(typeof(HuntingPlaces)))
            {
                getName = Enum.GetName(typeof(HuntingPlaces), huntingPlaces).ToLower();

                if (getName == e.Value.ToString().ToLower())
                    break;
            }

            if (getName != string.Empty)
            {
                IEnumerable<Data.Models.FarmWorks> result = null;

                switch (getName.ToLower())
                {
                    case "Välj":
                        break;

                    case "habäck":
                        result = db.FarmWorks.Where(c => c.Place == FarmWorkPlaces.Habäck);
                        break;

                    case "karlabo":
                        result = db.FarmWorks.Where(c => c.Place == FarmWorkPlaces.Karlabo);
                        break;

                    case "klev":
                        result = db.FarmWorks.Where(c => c.Place == FarmWorkPlaces.Klev);
                        break;

                    case "skog":
                        result = db.FarmWorks.Where(c => c.Place == FarmWorkPlaces.Skog);
                        break;

                    case "smältryd":
                        result = db.FarmWorks.Where(c => c.Place == FarmWorkPlaces.Smältryd);
                        break;

                    case "övrigt":
                        result = db.FarmWorks.Where(c => c.Place == FarmWorkPlaces.Övrigt);
                        break;
                }

                if (result == null || result.Count() == 0) return;

                if (result.Any())
                    foreach (Data.Models.FarmWorks model in result.OrderBy(c => c.FarmWorksId))
                    {
                        FarmWorksViewModels farmWorks = FarmWorkClass.ChangeFromModelToViewModel(model);
                        FarmWorkQueryable = FarmWorkQueryable.Concat((new[] { farmWorks }).AsQueryable());
                    }
            }

            return;
        }

        Navigation.Refresh(true);
    }

    private double GetNextSalary()
    {
        double nextSalary = 0;

        if (db.FarmWorks.Count() > 0)
        {
            foreach (var item in db.FarmWorks)
            {
                if (item.NextSalary)
                {
                    nextSalary += item.Hours * 200;
                }
            }
        }

        return nextSalary;
    }

    private void SearchNextSalary(ChangeEventArgs e)
    {
        string trueOrFalse = e.Value.ToString();

        if (trueOrFalse == "True")
        {
            IEnumerable<FarmWorks> result = db.FarmWorks.Where(c => c.NextSalary == true);
            FarmWorkQueryable = Enumerable.Empty<FarmWorksViewModels>().AsQueryable();

            FarmWorkQueryable = Enumerable.Empty<FarmWorksViewModels>().AsQueryable();

            if (result.Count() == 0) return;

            if (result.Any())
                foreach (FarmWorks model in result.OrderBy(c => c.FarmWorksId))
                {
                    FarmWorksViewModels farmWork = FarmWorkClass.ChangeFromModelToViewModel(model);
                    FarmWorkQueryable = FarmWorkQueryable.Concat(new[] { farmWork }.AsQueryable());
                }

            return;
        }

        Navigation.Refresh(true);
    }

    private void RemoveNextSalary()
    {
        if (db.FarmWorks.Count() > 0)
        {
            foreach (var item in db.FarmWorks)
            {
                if (item.NextSalary)
                {
                    item.NextSalary = false;

                    db.SaveChanges();

                    Navigation.Refresh(true);
                }
            }
        }
    }
}