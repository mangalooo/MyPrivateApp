@page "/FarmWorkPage"

@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using MyPrivateApp.Client.ViewModels
@using MyPrivateApp.Components.Enum
@using MyPrivateApp.Components.FarmWork.Classes
@using MyPrivateApp.Components.ViewModels.FarmWork
@using MyPrivateApp.Data
@using MyPrivateApp.Data.Models.FarmWork
@using static Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions;

@rendermode @(new InteractiveServerRenderMode(prerender:false))

@inject NavigationManager Navigation
@inject IFarmWorksClass BackEndClass
@inject IDbContextFactory<ApplicationDbContext> IDbContextFactory

<PageTitle> Gårdsarbeten </PageTitle>

@* Header *@
<div>

    <br />

    @* Navigation - Desktop *@
    <div id="desktop" align="center">
        <div class="btn-group" role="group" aria-label="Desktop Navigation">
            @foreach (var page in navList)
            {
                <NavLink href=@(page.Href) type="button" class="btn btn-outline-dark btn-sm" aria-label="@(page.Text)"> @(page.Text) </NavLink>
            }
        </div>
    </div>

    @* Navigation - Mobile *@
    <div id="mobile">
        <div class="btn-group" role="group">
            <button title="Info" id="btnGroupDrop1" type="button" class="btn btn-outline-secondary btn-sm dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false" aria-haspopup="true">
                Alla jakt sidor
            </button>
            <ul class="dropdown-menu" aria-labelledby="btnGroupDrop1">
                @foreach (var page in navList)
                {
                    <li class="dropdown-item">
                        <NavLink href=@(page.Href) type="button" class="btn btn-outline-dark btn-sm">@(page.Text)</NavLink>
                    </li>
                }
            </ul>
        </div>
    </div>

    <br /> <br />

    <h1 align="center"> Arbetsrapporten </h1>

    <br />

    <h3 align="center"> Nästa lön: @NextSalary</h3>

    <br />

    @if (ShowOrHideCreateButton)
    {
        <div style="text-align:center">
            <button class="btn btn-outline-success btn-sm" @onclick="@ShowAddForm"> Nytt gårdsarbete </button>
        </div>
    }

    @if (ShowOrHideErrorMessage)
    {
        <br />

        <div style="text-align:center">
            <Alert Color="AlertColor.Danger">
                <Icon Name="IconName.ExclamationTriangleFill" class="me-2"></Icon>
                <b>@ErrorMessage</b>
            </Alert>
        </div>
    }

    @if (ShowOrHideInfoMessage)
    {
        <br />

        <div align="center">
            <Alert Color="AlertColor.Info">
                <b>@InfoMessage</b>
            </Alert>
        </div>
    }

    <br />

</div>

@* Form and views *@
<div class="container">
    <div class="col-md-12">
        <div class="card">

            @* Form *@
            <div>
                @if (ShowOrHideAddOrEditForm)
                {
                    <div class="card-header">
                        <EditForm Model="pageViewModel" OnSubmit="AddOrEdit" Enhance>

                            <div class="row">
                                <div class="col-4">
                                    <div class="form-floating">
                                        <InputDate @bind-Value="pageViewModel.Date" id="inputDate" class="form-control" disabled="@DisabledForm" aria-label="Datum" />
                                        <label for="inputDate">Datum</label>
                                    </div>
                                </div>
                                <div class="col-4">
                                    <div class="form-floating">
                                        <InputSelect @bind-Value="pageViewModel.Place" id="inputPlace" class="form-control" disabled="@DisabledForm" aria-label="Plats">
                                            @foreach (FarmWorkPlaces place in Enum.GetValues(typeof(FarmWorkPlaces)))
                                            {
                                                if (place != FarmWorkPlaces.Välj)
                                                {
                                                    <option @key="place" value="@place">@place</option>
                                                }
                                            }
                                        </InputSelect>
                                        <label for="inputPlace">Plats</label>
                                    </div>
                                </div>
                                <div class="col-4">
                                    <div class="form-floating">
                                        <InputNumber @bind-Value="pageViewModel.Hours" id="inputHours" class="form-control" disabled="@DisabledForm" aria-label="Timmar" />
                                        <label for="inputHours">Timmar</label>
                                    </div>
                                </div>
                            </div>

                            <br />

                            <div class="row">
                                <div class="col-12">
                                    <div class="form-floating">
                                        <InputTextArea rows="10" id="inputNote" style="height:100%;" @bind-Value="pageViewModel.Note" class="form-control" disabled="@DisabledForm" aria-label="Beskrivning" />
                                        <label for="inputNote">Beskrivning</label>
                                    </div>
                                </div>
                            </div>

                            <br />

                            <div class="form-group text-center">
                                <div class="form-check d-inline-block">
                                    <InputCheckbox id="inputNextSalary" @bind-Value="pageViewModel.NextSalary" class="form-check-input" disabled="@DisabledForm" aria-label="Nästa lön" />
                                    <label class="form-check-label" for="inputNextSalary">Nästa lön?</label>
                                </div>
                            </div>

                            <br />

                            @if (ShowOrHideAddNewButton)
                            {
                                <div align="center">
                                    <button type="submit" class="btn btn-outline-success btn-sm">Lägg till nytt gårdsarbete</button>
                                </div>
                            }

                            @if (ShowOrHideEditButton)
                            {
                                <div align="center">
                                    <button type="submit" class="btn btn-outline-warning btn-sm">Ändra</button>
                                </div>
                            }

                            <br />

                            <div align="center">
                                <button @onclick="RefreshPage" type="button" class="btn btn-outline-secondary btn-sm">Tillbaka</button>
                            </div>

                            <br /><br />
                        </EditForm>
                    </div>
                }
            </div>

            @* View - Desktop *@
            <div id="desktop">

                <br />

                <div align="center">
                    <div class="form-check-inline">
                        <label class="form-check-label">
                            Nästa lön <input type="checkbox" class="form-check-input" value="" id="1" bind="" @onchange="SearchNextSalary">
                        </label>
                    </div>
                </div>

                <br />

                <div class="card-body">
                    <QuickGrid Items="@queryable" Pagination="pagination">

                        <PropertyColumn Class="width" Format="yyyy-MM-dd" Title="Datum" Property="@(c => c.Date)" Sortable="true" />

                        <PropertyColumn Title="Plats" Property="@(c => c.Place)" Sortable="true">
                            <ColumnOptions>
                                <div class="search-box">
                                    <input type="search" autofocus @onchange="SearchPlace" />
                                </div>
                            </ColumnOptions>
                        </PropertyColumn>

                        <PropertyColumn Title="Timmar" Property="@(c => c.Hours)" Sortable="true" />

                        <PropertyColumn Title="Beskrivning" Property="@(c => c.Note)" Sortable="true" />

                        <TemplateColumn Title="Info">

                            <div class="btn-group" role="group">
                                <button title="Info" id="btnGroupDrop1" type="button" class="btn btn-outline-secondary btn-sm dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">
                                    Info
                                </button>
                                <ul class="dropdown-menu" aria-labelledby="btnGroupDrop1">
                                    <li class="dropdown-item"><button class="btn btn-outline-info btn-sm" @onclick="@(() => Info(context))"> All info </button></li>
                                    <li class="dropdown-item"><button class="btn btn-outline-warning btn-sm" @onclick="@(() => Edit(context))"> Ändra </button></li>
                                    <li class="dropdown-item"><button class="btn btn-outline-danger btn-sm" @onclick="@(() => OpenDeleteWindow(context))"> Ta bort </button></li>
                                </ul>
                            </div>

                            <div class="modal @ModalClass" tabindex="-1" role="dialog" style="display:@ModalDisplay">
                                <div class="modal-dialog" role="document">
                                    <div class="modal-content">
                                        <div class="modal-header">
                                            <h5 class="modal-title"> Vill du ta bort gårdsarbetet? </h5>
                                        </div>
                                        <div class="modal-footer">
                                            <button type="button" class="btn btn-outline-danger" @onclick="@(() => Delete())"> Ta bort gårdsarbetet </button>
                                            <button type="button" class="btn btn-outline-secondary" data-dismiss="modal" @onclick="() => CloseWindow()"> Ångra </button>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            @if (ShowBackdrop)
                            {
                                <div class="modal-backdrop fade show"></div>
                            }

                        </TemplateColumn>
                    </QuickGrid>

                    <div class="card-footer"><Paginator State="@pagination" /></div>

                    @*                     @if (isDeleteSalaryButtonVisible)
                    {
                        <br />

                        <button class="btn btn-outline-danger btn-sm" @onclick="@(() => OpenDeleteWindowSalary(pageViewModel))"> Ta bort nästa lön </button>

                        <div class="modal @ModalClassSalary" tabindex="-1" role="dialog" style="display:@ModalDisplaySalary">
                            <div class="modal-dialog" role="document">
                                <div class="modal-content">
                                    <div class="modal-header">
                                        <h5 class="modal-title"> Vill du ta bort nästa lön? </h5>
                                    </div>
                                    <div class="modal-footer">
                                        <button type="button" class="btn btn-outline-danger" @onclick="@(() => RemoveNextSalary())"> Ta bort nästa lön </button>
                                        <button type="button" class="btn btn-outline-secondary" data-dismiss="modal" @onclick="() => CloseWindowSalary()"> Ångra </button>
                                    </div>
                                </div>
                            </div>
                        </div>

                        @if (ShowBackdropSalary)
                        {
                            <div class="modal-backdrop fade show"></div>
                        }
                    } *@

                    <br /><br />

                </div>
            </div>

            @* View - Mobile *@
            <div id="mobile">

                <br />

                <div class="row" align="center">
                    <div class="form-check-inline">

                        <label class="form-check-label">
                            Nästa lön <input type="checkbox" class="form-check-input" value="" id="1" bind="" @onchange="SearchNextSalary">
                        </label>

                    </div>
                </div>

                <br />

                <div class="card-body">
                    <QuickGrid Items="@queryable" Pagination="pagination">

                        <PropertyColumn Title="Plats" Property="@(c => c.Place)" Sortable="true">
                            <ColumnOptions>
                                <div class="search-box">
                                    <input type="search" autofocus @onchange="SearchPlace" />
                                </div>
                            </ColumnOptions>
                        </PropertyColumn>

                        <PropertyColumn Title="Timmar" Property="@(c => c.Hours)" Sortable="true" />

                        <TemplateColumn Title="Info">

                            <div class="btn-group" role="group">
                                <button title="Info" id="btnGroupDrop1" type="button" class="btn btn-outline-secondary btn-sm dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">
                                    Info
                                </button>
                                <ul class="dropdown-menu" aria-labelledby="btnGroupDrop1">
                                    <li class="dropdown-item"><button class="btn btn-outline-info btn-sm" @onclick="@(() => Info(context))"> All info </button></li>
                                    <li class="dropdown-item"><button class="btn btn-outline-warning btn-sm" @onclick="@(() => Edit(context))"> Ändra </button></li>
                                    <li class="dropdown-item"><button class="btn btn-outline-danger btn-sm" @onclick="@(() => OpenDeleteWindow(context))"> Ta bort </button></li>
                                </ul>
                            </div>

                            <div class="modal @ModalClass" tabindex="-1" role="dialog" style="display:@ModalDisplay">
                                <div class="modal-dialog" role="document">
                                    <div class="modal-content">
                                        <div class="modal-header">
                                            <h5 class="modal-title"> Vill du ta bort gårdsarbetet? </h5>
                                        </div>
                                        <div class="modal-footer">
                                            <button type="button" class="btn btn-outline-danger" @onclick="@(() => Delete())"> Ta bort gårdsarbetet </button>
                                            <button type="button" class="btn btn-outline-secondary" data-dismiss="modal" @onclick="() => CloseWindow()"> Ångra </button>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            @if (ShowBackdrop)
                            {
                                <div class="modal-backdrop fade show"></div>
                            }

                        </TemplateColumn>
                    </QuickGrid>

                    @if (isDeleteSalaryButtonVisible)
                    {
                        <br />

                        <br />

                        <button class="btn btn-outline-danger btn-sm" @onclick="@(() => OpenDeleteWindowSalary(pageViewModel))"> Ta bort nästa lön </button>

                        <div class="modal @ModalClass" tabindex="-1" role="dialog" style="display:@ModalDisplay">
                            <div class="modal-dialog" role="document">
                                <div class="modal-content">
                                    <div class="modal-header">
                                        <h5 class="modal-title"> Vill du ta bort nästa lön? </h5>
                                    </div>
                                    <div class="modal-footer">
                                        <button type="button" class="btn btn-outline-danger" @onclick="@(() => RemoveNextSalary())"> Ta bort nästa lön </button>
                                        <button type="button" class="btn btn-outline-secondary" data-dismiss="modal" @onclick="() => CloseWindowSalary()"> Ångra </button>
                                    </div>
                                </div>
                            </div>
                        </div>

                        @if (ShowBackdropSalary)
                        {
                            <div class="modal-backdrop fade show"></div>
                        }
                    }

                    <br /><br />

                </div>
            </div>

        </div>
    </div>
</div>

@* Footer *@
<div>

    <br /> <br />

    <div class="footer" align="center">
        <p> Copyright 2023 - @DateTime.Now.Year</p>
    </div>

    <br /> <br />

</div>

@* Back-End *@
@code
{
    [SupplyParameterFromForm]
    private FarmWorksViewModels pageViewModel { get; set; } = new();

    PaginationState pagination = new PaginationState { ItemsPerPage = 30 };
    private IQueryable<FarmWorksViewModels> queryable = Enumerable.Empty<FarmWorksViewModels>().AsQueryable();

    // Holds temporary id to delete items
    private int TemporaryId { get; set; } = 0;

    // Modol window settings Delete
    public Guid Guid = Guid.NewGuid();
    public string ModalDisplay = "none;";
    public string ModalClass = "";
    public bool ShowBackdrop = false;

    // Modol window settings Salary
    public Guid GuidSalary = Guid.NewGuid();
    public string ModalDisplaySalary = "none;";
    public string ModalClassSalary = "";
    public bool ShowBackdropSalary = false;

    // Hide button and fields
    private bool ShowOrHideAddOrEditForm { get; set; } = false;
    private bool ShowOrHideCreateButton { get; set; } = true;
    private bool ShowOrHideEditButton { get; set; } = false;
    private bool ShowOrHideAddNewButton { get; set; } = false;
    private bool DisabledForm { get; set; } = false;
    private bool isDeleteSalaryButtonVisible;
    private string NextSalary = string.Empty;

    // Error text messeges
    private bool ShowOrHideErrorMessage { get; set; } = false;
    private string ErrorMessage { get; set; } = string.Empty;
    private string InfoMessage { get; set; } = string.Empty;
    private bool ShowOrHideInfoMessage { get; set; } = false;

    private void ShowErrorMessage(string errorMessage)
    {
        ErrorMessage = errorMessage;
        ShowOrHideErrorMessage = true;
    }

    // Navigation list
    private readonly (string Href, string Text)[] navList = new[]
    {
        ("FarmWorksStartPage", "Start"),
        ("FarmWorkPage", "Arbetsrapporten"),
        ("FarmWorksPlanningPage", "Skogsplanneringen"),
        ("FarmWorksPlanningCompletedPage", "Färdigställda skogområden")
    };

    // Load data from database to the Queryable container
    private async Task ConvertListToQueryableAsync()
    {
        try
        {
            await using ApplicationDbContext db = await IDbContextFactory.CreateDbContextAsync() 
                ?? throw new Exception("ConvertListToQueryableAsync: db == null!");

            List<FarmWorks> items = await db.FarmWorks.OrderByDescending(c => c.Date).ToListAsync();

            if (!items.Any())
            {
                InfoMessage = "Finns ingen data att visa!";
                ShowOrHideInfoMessage = true;
                return;
            }

            queryable = items
                .Select(model => BackEndClass.ChangeFromModelToViewModel(model))
                .AsQueryable();

            pagination.TotalItemCountChanged += (sender, EventArgs) => StateHasChanged();
        }
        catch (Exception ex)
        {
            ShowErrorMessage($"ConvertListToQueryableAsync. Felmeddelande: {ex.Message}");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        isDeleteSalaryButtonVisible = await ShowOrHideDeleteSalaryButton();
        NextSalary = await GetNextSalary();
        await ConvertListToQueryableAsync();
    }

    private async Task RefreshPage() => await Task.Run(() => Navigation.Refresh(true));

    private void ShowAddForm()
    {
        ShowOrHideAddOrEditForm = true;
        ShowOrHideAddNewButton = true;
    }

    private async Task AddOrEdit()
    {
        DisabledForm = false;

        try
        {
            if (pageViewModel.FarmWorksId > 0)
            {
                ErrorMessage = await BackEndClass.Edit(pageViewModel);
                ShowOrHideEditButton = true;
            }
            else
            {
                ErrorMessage = await BackEndClass.Add(pageViewModel);
                ShowOrHideAddNewButton = true;
            }

            if (!string.IsNullOrEmpty(ErrorMessage))
            {
                ShowOrHideAddOrEditForm = true;
                ShowOrHideErrorMessage = true;
                return;
            }
            else
            {
                pageViewModel = new();
                await RefreshPage();
            }
        }
        catch (Exception ex)
        {
            ShowErrorMessage($"Lägg till eller ändra. Felmeddelande: {ex.Message}");
        }
    }

    private void Info(FarmWorksViewModels vm)
    {
        ShowOrHideAddOrEditForm = !ShowOrHideAddOrEditForm;
        ShowOrHideCreateButton = false;
        ShowOrHideEditButton = false;
        ShowOrHideAddNewButton = false;
        DisabledForm = true;
        pageViewModel = vm;
    }

    private void Edit(FarmWorksViewModels vm)
    {
        if (vm.FarmWorksId == 0)
        {
            ShowErrorMessage($"Går inte att ändra gårdsarbetet. ID = {vm.FarmWorksId}!");
            return;
        }

        DisabledForm = false;
        ShowOrHideEditButton = true;
        ShowOrHideAddNewButton = false;
        ShowOrHideCreateButton = false;
        ShowOrHideAddOrEditForm = true;
        pageViewModel = vm;
    }

    private async Task Delete()
    {
        try
        {
            await using ApplicationDbContext db = await IDbContextFactory.CreateDbContextAsync() ?? throw new Exception("Delete: db == null!");

            if (!db.FarmWorks.Any())
            {
                ShowErrorMessage("Gick inte att ta bort gårdsarbetet, databasen är tom!");
                return;
            }

            FarmWorks? model = await db.FarmWorks.FirstOrDefaultAsync(a => a.FarmWorksId == TemporaryId);

            if (model == null)
            {
                ShowErrorMessage($"Går inte att ta bort gårdsarbetet. (TemporaryId = {TemporaryId})!");
                return;
            }

            ErrorMessage = await BackEndClass.Delete(model);

            if (!string.IsNullOrEmpty(ErrorMessage))
                ShowOrHideErrorMessage = true;
            else
            {
                pageViewModel = new();
                await RefreshPage();
            }
        }
        catch (Exception ex)
        {
            ShowErrorMessage($"Ta bort. Felmeddelande: {ex.Message}");
        }
    }

    private void ToggleModal(ref string modalDisplay, ref string modalClass, ref bool showBackdrop, bool isOpen)
    {
        modalDisplay = isOpen ? "block;" : "none";
        modalClass = isOpen ? "Show" : "";
        showBackdrop = isOpen;
        StateHasChanged();
    }

    private void OpenDeleteWindow(FarmWorksViewModels vm)
    {
        TemporaryId = vm.FarmWorksId;
        ToggleModal(ref ModalDisplay, ref ModalClass, ref ShowBackdrop, true);
    }

    private void CloseWindow() => ToggleModal(ref ModalDisplay, ref ModalClass, ref ShowBackdrop, false);

    private void OpenDeleteWindowSalary(FarmWorksViewModels vm)
    {
        TemporaryId = vm.FarmWorksId;
        ToggleModal(ref ModalDisplaySalary, ref ModalClassSalary, ref ShowBackdropSalary, true);
    }

    private void CloseWindowSalary() => ToggleModal(ref ModalDisplaySalary, ref ModalClassSalary, ref ShowBackdropSalary, false);

    private async Task SearchPlace(ChangeEventArgs e)
    {
        try
        {
            if (e.Value == null)
            {
                ShowErrorMessage("Fel vid sökning av plats!");
                return;
            }

            queryable = Enumerable.Empty<FarmWorksViewModels>().AsQueryable();
            string? placeName = e.Value?.ToString()?.ToLower();

            if (string.IsNullOrEmpty(placeName))
            {
                await RefreshPage();
                return;
            }

            Dictionary<string, FarmWorkPlaces> placeMapping = new()
            {
                { "habäck", FarmWorkPlaces.Habäck },
                { "karlabo", FarmWorkPlaces.Karlabo },
                { "klev", FarmWorkPlaces.Klev },
                { "skog", FarmWorkPlaces.Skog },
                { "smältryd", FarmWorkPlaces.Smältryd },
                { "övrigt", FarmWorkPlaces.Övrigt }
            };

            if (placeMapping.TryGetValue(placeName, out var place))
            {
                await using ApplicationDbContext db = await IDbContextFactory.CreateDbContextAsync() 
                    ?? throw new Exception("SearchPlace: db == null!");

                var result = db.FarmWorks.Where(c => c.Place == place);

                if (result.Any())
                {
                    ShowOrHideInfoMessage = false;

                    var farmWorksList = await result
                        .OrderBy(c => c.Date)
                        .Select(model => BackEndClass.ChangeFromModelToViewModel(model))
                        .ToListAsync();

                    queryable = farmWorksList.Any()
                    ? farmWorksList.AsQueryable()
                    : Enumerable.Empty<FarmWorksViewModels>().AsQueryable();
                }
            }
            else
            {
                InfoMessage = $"Hittade ingen plats för: {placeName}!";
                ShowOrHideInfoMessage = true;
                queryable = Enumerable.Empty<FarmWorksViewModels>().AsQueryable();
                return;
            }

            StateHasChanged();
        }
        catch (Exception ex)
        {
            ShowErrorMessage($"Sök plats. Felmeddelande: {ex.Message}");
        }
    }

    private async Task<string> GetNextSalary()
    {
        try
        {
            await using ApplicationDbContext db = await IDbContextFactory.CreateDbContextAsync() ?? throw new Exception("GetNextSalary: db == null!");

            // Calculate total salary for items marked as NextSalary
            decimal nextSalary = await db.FarmWorks
                .Where(item => item.NextSalary)
                .SumAsync(item => (decimal)item.Hours * 214m)
                .ConfigureAwait(false);

            // Calculate the result after tax
            decimal afterTax = nextSalary * 0.7m;

            // Use invariant culture for consistent formatting
            return afterTax.ToString("#,##0.00", System.Globalization.CultureInfo.InvariantCulture);
        }
        catch (Exception ex)
        {
            ShowErrorMessage($"Nästa lön. Felmeddelande: {ex.Message}");
            return "0.00";
        }
    }

    private async Task RemoveNextSalary()
    {
        try
        {
            await using ApplicationDbContext db = await IDbContextFactory.CreateDbContextAsync() ?? throw new Exception("RemoveNextSalary: db == null!");

            // Get all items with NextSalary set to true
            var itemsToUpdate = await db.FarmWorks
                .Where(item => item.NextSalary)
                .ToListAsync().ConfigureAwait(false);

            if (itemsToUpdate.Count > 0)
            {
                foreach (var item in itemsToUpdate)
                    item.NextSalary = false;

                await db.SaveChangesAsync().ConfigureAwait(false);
                await RefreshPage();
            }
        }
        catch (Exception ex)
        {
            ShowErrorMessage($"Ta bort nästa lön. Felmeddelande: {ex.Message}");
        }
    }

    private async Task SearchNextSalary(ChangeEventArgs e)
    {
        try
        {
            if (e.Value is null || !bool.TryParse(e.Value.ToString(), out bool trueOrFalse))
                return;

            if (trueOrFalse)
            {
                await using ApplicationDbContext db = await IDbContextFactory.CreateDbContextAsync() ?? throw new Exception("SearchNextSalary: db == null!");

                var farmWorksList = await db.FarmWorks
                    .Where(c => c.NextSalary)
                    .OrderByDescending(c => c.Date)
                    .Select(model => BackEndClass.ChangeFromModelToViewModel(model))
                    .ToListAsync();

                queryable = farmWorksList.Any()
                    ? farmWorksList.AsQueryable()
                    : Enumerable.Empty<FarmWorksViewModels>().AsQueryable();
            }
            else
                await RefreshPage();

            StateHasChanged();
        }
        catch (Exception ex)
        {
            ShowErrorMessage($"Visa nästa lön. Felmeddelande: {ex.Message}");
        }
    }

    private async Task<bool> ShowOrHideDeleteSalaryButton()
    {
        try
        {
            await using ApplicationDbContext db = await IDbContextFactory.CreateDbContextAsync().ConfigureAwait(false);
            return await db.FarmWorks.AnyAsync(y => y.NextSalary).ConfigureAwait(false);
        }
        catch (Exception ex)
        {
            ShowErrorMessage($"Kunde inte kontrollera om löneknappen ska visas. Fel: {ex.Message}");
            return false;
        }
    }
}