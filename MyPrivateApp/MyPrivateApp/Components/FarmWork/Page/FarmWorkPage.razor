
@page "/FarmWorkPage"

@using MyPrivateApp.Client.ViewModels
@using MyPrivateApp.Components.Enum
@using MyPrivateApp.Components.FarmWork.Classes
@using MyPrivateApp.Components.ViewModels
@using MyPrivateApp.Data
@using MyPrivateApp.Data.Models
@using Microsoft.AspNetCore.Components.QuickGrid
@using static Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions;
@using AutoMapper;

@rendermode InteractiveServer

@inject ApplicationDbContext db;
@inject NavigationManager Navigation
@inject IFarmWorkClass BackEndClass

<PageTitle> Gårdsarbete </PageTitle>

@* Header *@
<div>

    <br />

    <h1 style="text-align:center"> Gårdsarbete </h1>

    <br />

    <h3 style="text-align:center"> Nästa lön: @NextSalary</h3>

    @if (ShowOrHideCreateButton)
    {
        <br /> <br />

        <div style="text-align:center">
            <button class="btn btn-outline-success btn-sm" @onclick="@ShowOrHideNewOrChangesForm"> Nytt gårdsarbete </button>
        </div>

        <br />
    }

    @if (ShowOrHideErrorMessage)
    {
        <br />

        <div style="text-align:center">
            <Alert Color="AlertColor.Danger">
                <Icon Name="IconName.ExclamationTriangleFill" class="me-2"></Icon>
                <b>@ErrorMessage</b>
            </Alert>
        </div>
    }

    <br />

</div>

@* Form and views *@
<div class="container">
    <div class="col-md-12">
        <div class="card">

            @* Form *@
            @if (ShowOrHideNewOrChangesFields)
            {
                <div class="card-header">

                    <EditForm Model="pageViewModel" OnSubmit="AddOrEdit" FormName="AddOrUpdate" Enhance>

                        <DataAnnotationsValidator />

                        <ValidationSummary class="text-danger" role="alert" />

                        <div class="row">

                            <div id="mobile" class="col-4" />

                            <div class="col-4">
                                <div class="form-floating">
                                    <InputDate @bind-Value="pageViewModel.Date" class="form-control" disabled="@DisabledForm" />
                                    <label for="Date"> Datum </label>
                                    <ValidationMessage For="() => pageViewModel.Date" class="text-danger" />
                                </div>
                            </div>

                            <div class="col-4">
                                <div class="form-floating">
                                    <InputSelect @bind-Value="pageViewModel.Place" class="form-control" placeholder="" disabled="@DisabledForm">
                                        @foreach (object place in Enum.GetValues(typeof(FarmWorkPlaces)))
                                        {
                                            <option value="@place">@place</option>
                                        }
                                    </InputSelect>
                                    <label for="wildAnimal"> Plats </label>
                                    <ValidationMessage For="() => pageViewModel.Place" class="text-danger" />
                                </div>
                            </div>
                            <div class="col-4">
                                <div class="form-floating">
                                    <InputNumber @bind-Value="pageViewModel.Hours" class="form-control" placeholder="" disabled="@DisabledForm" />
                                    <label for="Hours"> Timmar </label>
                                    <ValidationMessage For="() => pageViewModel.Hours" class="text-danger" />
                                </div>
                            </div>
                        </div>

                        <br />

                        <div class="row">
                            <div class="col-12">
                                <div class="form-floating">
                                    <InputTextArea rows="10" style="height:100%;" @bind-Value="pageViewModel.Note" class="form-control" disabled="@DisabledForm" />
                                    <label for="Note"> Beskrivning </label>
                                    <ValidationMessage For="() => pageViewModel.Note" class="text-danger" />
                                </div>
                            </div>
                        </div>

                        <br />

                        @* Desktop screen *@
                        <div id="desktop" class="form-group" align="center">
                            <label for="NextSalary"> Nästa lön? </label>
                            <InputCheckbox @bind-Value="pageViewModel.NextSalary" class="darker-border-checkbox form-check-input" disabled="@DisabledForm" />
                            <ValidationMessage For="() => pageViewModel.NextSalary" class="text-danger" />
                        </div>

                        @* Mobile screen *@
                        <div id="mobile">
                            <div class="form-check">
                                <InputCheckbox id="NextSalary" @bind-Value="pageViewModel.NextSalary" class="form-check-input" disabled="@DisabledForm" />
                                <label class="form-check-label" for="NextSalary"> Fått lön? </label>
                                <ValidationMessage For="() => pageViewModel.NextSalary" class="text-danger" />
                            </div>
                        </div>

                        <br />

                        @if (ShowOrHideAddNewButton)
                        {
                            <div style="text-align:center">
                                <button @onclick="ShowOrHideNewOrChangesForm" type="submit" style="text-align:center" class="btn btn-outline-success btn-sm"> Lägg till nytt gårdsarbete </button>
                            </div>
                        }

                        @if (ShowOrHideEditButton)
                        {
                            <div style="text-align:center">
                                <button @onclick="ShowOrHideNewOrChangesForm" type="submit" style="text-align:center" class="btn btn-outline-warning btn-sm"> Ändra </button>
                            </div>
                        }

                        <br />

                        <div style="text-align:center">
                            <button @onclick="RefreshPage" type="button" style="text-align:center" class="btn btn-outline-secondary btn-sm"> Tillbaka </button>
                        </div>

                        <br /> <br />

                    </EditForm>
                </div>
            }

            @* View - Desktop *@
            
            
            <div id="desktop">

                <br />

                <div align="center">
                    <div class="form-check-inline">
                        <label class="form-check-label">
                            Nästa lön <input type="checkbox" class="form-check-input" value="" id="1" bind="" @onchange="SearchNextSalary">
                        </label>
                    </div>
                </div>

                <br />

                <div class="card-body">
                    <QuickGrid Items="@queryable" Pagination="pagination">

                        <PropertyColumn Format="yyyy-MM-dd" Title="Datum" Property="@(c => c.Date)" Sortable="true" />

                        <PropertyColumn Title="Plats" Property="@(c => c.Place)" Sortable="true">
                            <ColumnOptions>
                                <div class="search-box">
                                    <input type="search" autofocus @onchange="SearchPlace" />
                                </div>
                            </ColumnOptions>
                        </PropertyColumn>

                        <PropertyColumn Title="Timmar" Property="@(c => c.Hours)" Sortable="true" />

                        <PropertyColumn Title="Beskrivning" Property="@(c => c.Note)" Sortable="true" />

                        <TemplateColumn Title="Info">

                            <div class="btn-group" role="group">
                                <button title="Info" id="btnGroupDrop1" type="button" class="btn btn-outline-secondary btn-sm dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">
                                    Info
                                </button>
                                <ul class="dropdown-menu" aria-labelledby="btnGroupDrop1">
                                    <li class="dropdown-item"><button class="btn btn-outline-info btn-sm" @onclick="@(() => Info(context))"> All info </button></li>
                                    <li class="dropdown-item"><button class="btn btn-outline-warning btn-sm" @onclick="@(() => Edit(context))"> Ändra </button></li>
                                    <li class="dropdown-item"><button class="btn btn-outline-danger btn-sm" @onclick="@(() => OpenDeleteWindow(context))"> Ta bort </button></li>
                                </ul>
                            </div>

                            <div class="modal @ModalClass" tabindex="-1" role="dialog" style="display:@ModalDisplay">
                                <div class="modal-dialog" role="document">
                                    <div class="modal-content">
                                        <div class="modal-header">
                                            <h5 class="modal-title"> Vill du ta bort gårdsarbetet? </h5>
                                        </div>
                                        <div class="modal-footer">
                                            <button type="button" class="btn btn-outline-danger" @onclick="@(() => Delete())"> Ta bort gårdsarbetet </button>
                                            <button type="button" class="btn btn-outline-secondary" data-dismiss="modal" @onclick="() => CloseWindow()"> Ångra </button>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            @if (ShowBackdrop)
                            {
                                <div class="modal-backdrop fade show"></div>
                            }

                        </TemplateColumn>
                    </QuickGrid>

                    <div class="card-footer"><Paginator State="@pagination" /></div>

                    @if (isDeleteSalaryButtonVisible)
                    {
                        <br />

                        <button class="btn btn-outline-danger btn-sm" @onclick="@(() => OpenDeleteWindowSalary(pageViewModel))"> Ta bort nästa lön </button>

                        <div class="modal @ModalClassSalary" tabindex="-1" role="dialog" style="display:@ModalDisplaySalary">
                            <div class="modal-dialog" role="document">
                                <div class="modal-content">
                                    <div class="modal-header">
                                        <h5 class="modal-title"> Vill du ta bort nästa lön? </h5>
                                    </div>
                                    <div class="modal-footer">
                                        <button type="button" class="btn btn-outline-danger" @onclick="@(() => RemoveNextSalary())"> Ta bort nästa lön </button>
                                        <button type="button" class="btn btn-outline-secondary" data-dismiss="modal" @onclick="() => CloseWindowSalary()"> Ångra </button>
                                    </div>
                                </div>
                            </div>
                        </div>

                        @if (ShowBackdropSalary)
                        {
                            <div class="modal-backdrop fade show"></div>
                        }
                    }

                    <br />
                    <br />

                </div>
            </div>

            @* View - Mobile *@
            <div id="mobile">

                <br />

                <div class="row" align="center">
                    <div class="form-check-inline">

                        <label class="form-check-label">
                            Nästa lön <input type="checkbox" class="form-check-input" value="" id="1" bind="" @onchange="SearchNextSalary">
                        </label>

                    </div>
                </div>

                <br />

                <div class="card-body">
                    <QuickGrid Items="@queryable" Pagination="pagination">

                        <PropertyColumn Title="Plats" Property="@(c => c.Place)" Sortable="true">
                            <ColumnOptions>
                                <div class="search-box">
                                    <input type="search" autofocus @onchange="SearchPlace" />
                                </div>
                            </ColumnOptions>
                        </PropertyColumn>

                        <PropertyColumn Title="Timmar" Property="@(c => c.Hours)" Sortable="true" />

                        <TemplateColumn Title="Info">

                            <div class="btn-group" role="group">
                                <button title="Info" id="btnGroupDrop1" type="button" class="btn btn-outline-secondary btn-sm dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">
                                    Info
                                </button>
                                <ul class="dropdown-menu" aria-labelledby="btnGroupDrop1">
                                    <li class="dropdown-item"><button class="btn btn-outline-info btn-sm" @onclick="@(() => Info(context))"> All info </button></li>
                                    <li class="dropdown-item"><button class="btn btn-outline-warning btn-sm" @onclick="@(() => Edit(context))"> Ändra </button></li>
                                    <li class="dropdown-item"><button class="btn btn-outline-danger btn-sm" @onclick="@(() => OpenDeleteWindow(context))"> Ta bort </button></li>
                                </ul>
                            </div>

                            <div class="modal @ModalClass" tabindex="-1" role="dialog" style="display:@ModalDisplay">
                                <div class="modal-dialog" role="document">
                                    <div class="modal-content">
                                        <div class="modal-header">
                                            <h5 class="modal-title"> Vill du ta bort gårdsarbetet? </h5>
                                        </div>
                                        <div class="modal-footer">
                                            <button type="button" class="btn btn-outline-danger" @onclick="@(() => Delete())"> Ta bort gårdsarbetet </button>
                                            <button type="button" class="btn btn-outline-secondary" data-dismiss="modal" @onclick="() => CloseWindow()"> Ångra </button>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            @if (ShowBackdrop)
                            {
                                <div class="modal-backdrop fade show"></div>
                            }

                        </TemplateColumn>
                    </QuickGrid>

                    @if (isDeleteSalaryButtonVisible)
                    {
                        <br />
                        <br />

                        <button class="btn btn-outline-danger btn-sm" @onclick="@(() => OpenDeleteWindowSalary(pageViewModel))"> Ta bort nästa lön </button>

                        <div class="modal @ModalClass" tabindex="-1" role="dialog" style="display:@ModalDisplay">
                            <div class="modal-dialog" role="document">
                                <div class="modal-content">
                                    <div class="modal-header">
                                        <h5 class="modal-title"> Vill du ta bort nästa lön? </h5>
                                    </div>
                                    <div class="modal-footer">
                                        <button type="button" class="btn btn-outline-danger" @onclick="@(() => RemoveNextSalary())"> Ta bort nästa lön </button>
                                        <button type="button" class="btn btn-outline-secondary" data-dismiss="modal" @onclick="() => CloseWindowSalary()"> Ångra </button>
                                    </div>
                                </div>
                            </div>
                        </div>

                        @if (ShowBackdropSalary)
                        {
                            <div class="modal-backdrop fade show"></div>
                        }
                    }

                    <br />
                    <br />

                </div>
            </div>

        </div>
    </div>
</div>

@* Footer *@
<div>

    <br /> <br />

    <div class="footer" align="center">
        <p> Copyright 2023 - @DateTime.Now.Year</p>
    </div>

    <br /> <br />

</div>

@* Back-End *@
@code
{
    [SupplyParameterFromForm]
    private FarmWorksViewModels pageViewModel { get; set; } = new();

    PaginationState pagination = new PaginationState { ItemsPerPage = 30 };
    private IQueryable<FarmWorksViewModels> queryable = Enumerable.Empty<FarmWorksViewModels>().AsQueryable();

    // Holds temporary id to delete items
    private int TemporaryId { get; set; } = 0;

    // Modol window settings Delete
    public Guid Guid = Guid.NewGuid();
    public string ModalDisplay = "none;";
    public string ModalClass = "";
    public bool ShowBackdrop = false;

    // Modol window settings Salary
    public Guid GuidSalary = Guid.NewGuid();
    public string ModalDisplaySalary = "none;";
    public string ModalClassSalary = "";
    public bool ShowBackdropSalary = false;

    // Hide button and fields
    private bool ShowOrHideNewOrChangesFields { get; set; } = false;
    private bool ShowOrHideCreateButton { get; set; } = true;
    private bool ShowOrHideEditButton { get; set; } = false;
    private bool ShowOrHideAddNewButton { get; set; } = false;
    private bool DisabledForm { get; set; } = false;
    private bool ShowOrHideErrorMessage { get; set; } = false;
    private bool isDeleteSalaryButtonVisible;
    private string NextSalary = string.Empty;

    // Text messeges
    private string ErrorMessage { get; set; } = string.Empty;

    private void ShowErrorMessage(string errorMessage)
    {
        ErrorMessage = errorMessage;
        ShowOrHideErrorMessage = true;
    }

    // Load data from database to the Queryable container
    private async Task ConvertListToQueryableAsync()
    {
        List<FarmWorks> farmWorks = await db.FarmWorks.OrderByDescending(c => c.Date).ToListAsync();

        if (!farmWorks.Any())
        {
            ShowErrorMessage("Finns ingen data att visa!");
            return;
        }

        queryable = farmWorks
            .Select(model => BackEndClass.ChangeFromModelToViewModel(model))
            .AsQueryable();

        pagination.TotalItemCountChanged += (sender, EventArgs) => StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        isDeleteSalaryButtonVisible = await ShowOrHideDetleteSalaryButton();
        NextSalary = await GetNextSalary();
        await ConvertListToQueryableAsync();
    }

    private async Task RefreshPage() => await Task.Run(() => Navigation.Refresh(true));

    private void ShowOrHideNewOrChangesForm()
    {
        ShowOrHideNewOrChangesFields = !ShowOrHideNewOrChangesFields;
        ShowOrHideCreateButton = false;
        ShowOrHideEditButton = false;
        ShowOrHideAddNewButton = true;
    }

    private async Task AddOrEdit()
    {
        DisabledForm = false;

        try
        {
            if (pageViewModel.FarmWorksId > 0)
            {
                ErrorMessage = await BackEndClass.Edit(pageViewModel);
                ShowOrHideEditButton = true;
            }
            else
            {
                ErrorMessage = await BackEndClass.Add(pageViewModel);
                ShowOrHideAddNewButton = true;
            }
            
            if (!string.IsNullOrEmpty(ErrorMessage))
            {
                ShowOrHideNewOrChangesForm();
                ShowOrHideErrorMessage = true;
                return;
            }
            else
            {
                pageViewModel = new();
                await RefreshPage();
            }
        }
        catch (Exception ex)
        {
            ShowErrorMessage($"Ett fel uppstod: {ex.Message}");
        }
    }

    private void Info(FarmWorksViewModels vm)
    {
        ShowOrHideNewOrChangesForm();
        ShowOrHideAddNewButton = false;
        DisabledForm = true;
        pageViewModel = vm;
    }

    private void Edit(FarmWorksViewModels vm)
    {
        if (vm.FarmWorksId == 0)
        {
            ShowErrorMessage($"Går inte att ändra gårdsarbetet. ID = {vm.FarmWorksId}!");
            return;
        }

        DisabledForm = false;
        ShowOrHideEditButton = true;
        ShowOrHideAddNewButton = false;
        ShowOrHideCreateButton = false;
        ShowOrHideNewOrChangesFields = true;
        pageViewModel = vm;
    }

    private async Task Delete()
    {
        if (!db.FarmWorks.Any())
        {
            ShowErrorMessage("Gick inte att ta bort gårdsarbetet, databasen är tom!");
            return;
        }

        FarmWorks? model = await db.FarmWorks.FirstOrDefaultAsync(a => a.FarmWorksId == TemporaryId);

        if (model == null)
        {
            ShowErrorMessage($"Går inte att ta bort gårdsarbetet. (TemporaryId = {TemporaryId})!");
            return;
        }

        FarmWorksViewModels vm = BackEndClass.ChangeFromModelToViewModel(model);
        ErrorMessage = await BackEndClass.Delete(vm);

        if (!string.IsNullOrEmpty(ErrorMessage))
            ShowOrHideErrorMessage = true;
        else
        {
            pageViewModel = new();
            await RefreshPage();
        }
    }

    private void ToggleModal(ref string modalDisplay, ref string modalClass, ref bool showBackdrop, bool isOpen)
    {
        modalDisplay = isOpen ? "block;" : "none";
        modalClass = isOpen ? "Show" : "";
        showBackdrop = isOpen;
        StateHasChanged();
    }

    private void OpenDeleteWindow(FarmWorksViewModels vm)
    {
        TemporaryId = vm.FarmWorksId;
        ToggleModal(ref ModalDisplay, ref ModalClass, ref ShowBackdrop, true);
    }

    private void CloseWindow() => ToggleModal(ref ModalDisplay, ref ModalClass, ref ShowBackdrop, false);

    private void OpenDeleteWindowSalary(FarmWorksViewModels vm)
    {
        TemporaryId = vm.FarmWorksId;
        ToggleModal(ref ModalDisplaySalary, ref ModalClassSalary, ref ShowBackdropSalary, true);
    }

    private void CloseWindowSalary() => ToggleModal(ref ModalDisplaySalary, ref ModalClassSalary, ref ShowBackdropSalary, false);

    private async Task SearchPlace(ChangeEventArgs e)
    {
        queryable = Enumerable.Empty<FarmWorksViewModels>().AsQueryable();
        string? placeName = e.Value?.ToString()?.ToLowerInvariant();

        if (string.IsNullOrEmpty(placeName))
        {
            await RefreshPage();
            return;
        }

        var placeMapping = new Dictionary<string, FarmWorkPlaces>(StringComparer.OrdinalIgnoreCase)
        {
            { "habäck", FarmWorkPlaces.Habäck },
            { "karlabo", FarmWorkPlaces.Karlabo },
            { "klev", FarmWorkPlaces.Klev },
            { "skog", FarmWorkPlaces.Skog },
            { "smältryd", FarmWorkPlaces.Smältryd },
            { "övrigt", FarmWorkPlaces.Övrigt }
        };

        if (placeMapping.TryGetValue(placeName, out var place))
        {
            var result = db.FarmWorks.Where(c => c.Place == place);

            if (result.Any())
            {
                queryable = result
                    .OrderBy(c => c.Date)
                    .Select(model => BackEndClass.ChangeFromModelToViewModel(model))
                    .AsQueryable();
            }
        }
    }

    private async Task<string> GetNextSalary()
    {
        double nextSalary = await db.FarmWorks
            .Where(item => item.NextSalary)
            .SumAsync(item => item.Hours * 214);

        // Calculate the result after tax
        double result = nextSalary * 0.7;

        return result.ToString("#,##0.00");
    }

    private async Task RemoveNextSalary()
    {
        // Get all items with NextSalary set to true
        var itemsToUpdate = db.FarmWorks
            .Where(item => item.NextSalary)
            .ToList();

        if (itemsToUpdate.Any())
        {
            // Update the NextSalary property for all items
            foreach (var item in itemsToUpdate)
                item.NextSalary = false;

            await db.SaveChangesAsync();
            await RefreshPage();
        }
    }

    private async Task SearchNextSalary(ChangeEventArgs e)
    {
        if (e.Value is not null && bool.TryParse(e.Value.ToString(), out bool trueOrFalse))
        {
            if (trueOrFalse)
            {
                IEnumerable<FarmWorks> result = await db.FarmWorks
                    .Where(c => c.NextSalary)
                    .ToListAsync();

                if (!result.Any())
                {
                    queryable = Enumerable.Empty<FarmWorksViewModels>().AsQueryable();
                    return;
                }

                IEnumerable<FarmWorksViewModels> farmWorksList = result
                    .OrderByDescending(c => c.Date)
                    .Select(model => BackEndClass.ChangeFromModelToViewModel(model))
                    .ToList();

                queryable = farmWorksList.AsQueryable();
            }
            else
                await RefreshPage();
        }
    }

    private async Task<bool> ShowOrHideDetleteSalaryButton()
    {
        if (db.FarmWorks.Any())
            if (await db.FarmWorks.AnyAsync(y => y.NextSalary == true))
                return true;

        return false;
    }
}